
TesteKlever.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d14  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08005eb4  08005eb4  00015eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f98  08005f98  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005f98  08005f98  00015f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005fa0  08005fa0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fa0  08005fa0  00015fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005fa4  08005fa4  00015fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005fa8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000040a8  20000010  08005fb8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200040b8  08005fb8  000240b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000145a8  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d75  00000000  00000000  000345e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001270  00000000  00000000  00037360  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001118  00000000  00000000  000385d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017b45  00000000  00000000  000396e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e11e  00000000  00000000  0005122d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00098219  00000000  00000000  0005f34b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f7564  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cdc  00000000  00000000  000f75e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005e9c 	.word	0x08005e9c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08005e9c 	.word	0x08005e9c

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	60f8      	str	r0, [r7, #12]
 80004e8:	60b9      	str	r1, [r7, #8]
 80004ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	4a07      	ldr	r2, [pc, #28]	; (800050c <vApplicationGetIdleTaskMemory+0x2c>)
 80004f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004f2:	68bb      	ldr	r3, [r7, #8]
 80004f4:	4a06      	ldr	r2, [pc, #24]	; (8000510 <vApplicationGetIdleTaskMemory+0x30>)
 80004f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2280      	movs	r2, #128	; 0x80
 80004fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80004fe:	bf00      	nop
 8000500:	3714      	adds	r7, #20
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	2000002c 	.word	0x2000002c
 8000510:	20000080 	.word	0x20000080

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b5b0      	push	{r4, r5, r7, lr}
 8000516:	b0aa      	sub	sp, #168	; 0xa8
 8000518:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051a:	f000 fd67 	bl	8000fec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051e:	f000 f8ab 	bl	8000678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000522:	f000 f991 	bl	8000848 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000526:	f000 f965 	bl	80007f4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800052a:	f000 f911 	bl	8000750 <MX_ADC1_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of BinarySemaphoteUART */
  osSemaphoreDef(BinarySemaphoteUART);
 800052e:	2300      	movs	r3, #0
 8000530:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000534:	2300      	movs	r3, #0
 8000536:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  BinarySemaphoteUARTHandle = osSemaphoreCreate(osSemaphore(BinarySemaphoteUART), 1);
 800053a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800053e:	2101      	movs	r1, #1
 8000540:	4618      	mov	r0, r3
 8000542:	f003 f88e 	bl	8003662 <osSemaphoreCreate>
 8000546:	4602      	mov	r2, r0
 8000548:	4b3d      	ldr	r3, [pc, #244]	; (8000640 <main+0x12c>)
 800054a:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of AdcReadsQueue */
  osMessageQDef(AdcReadsQueue, 16, uint16_t);
 800054c:	4b3d      	ldr	r3, [pc, #244]	; (8000644 <main+0x130>)
 800054e:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8000552:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000554:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  AdcReadsQueueHandle = osMessageCreate(osMessageQ(AdcReadsQueue), NULL);
 8000558:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f003 f936 	bl	80037d0 <osMessageCreate>
 8000564:	4602      	mov	r2, r0
 8000566:	4b38      	ldr	r3, [pc, #224]	; (8000648 <main+0x134>)
 8000568:	601a      	str	r2, [r3, #0]

  /* definition and creation of LedQueue */
  osMessageQDef(LedQueue, 16, uint8_t);
 800056a:	4b38      	ldr	r3, [pc, #224]	; (800064c <main+0x138>)
 800056c:	f107 0480 	add.w	r4, r7, #128	; 0x80
 8000570:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000572:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  LedQueueHandle = osMessageCreate(osMessageQ(LedQueue), NULL);
 8000576:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800057a:	2100      	movs	r1, #0
 800057c:	4618      	mov	r0, r3
 800057e:	f003 f927 	bl	80037d0 <osMessageCreate>
 8000582:	4602      	mov	r2, r0
 8000584:	4b32      	ldr	r3, [pc, #200]	; (8000650 <main+0x13c>)
 8000586:	601a      	str	r2, [r3, #0]

  /* definition and creation of UsartQueue */
  osMessageQDef(UsartQueue, 16, uint16_t);
 8000588:	4b2e      	ldr	r3, [pc, #184]	; (8000644 <main+0x130>)
 800058a:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800058e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000590:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  UsartQueueHandle = osMessageCreate(osMessageQ(UsartQueue), NULL);
 8000594:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f003 f918 	bl	80037d0 <osMessageCreate>
 80005a0:	4602      	mov	r2, r0
 80005a2:	4b2c      	ldr	r3, [pc, #176]	; (8000654 <main+0x140>)
 80005a4:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005a6:	4b2c      	ldr	r3, [pc, #176]	; (8000658 <main+0x144>)
 80005a8:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80005ac:	461d      	mov	r5, r3
 80005ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005ba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005be:	2100      	movs	r1, #0
 80005c0:	4618      	mov	r0, r3
 80005c2:	f002 ffee 	bl	80035a2 <osThreadCreate>
 80005c6:	4602      	mov	r2, r0
 80005c8:	4b24      	ldr	r3, [pc, #144]	; (800065c <main+0x148>)
 80005ca:	601a      	str	r2, [r3, #0]

  /* definition and creation of usart_read_task */
  osThreadDef(usart_read_task, StartUsartTask, osPriorityIdle, 0, 128);
 80005cc:	4b24      	ldr	r3, [pc, #144]	; (8000660 <main+0x14c>)
 80005ce:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80005d2:	461d      	mov	r5, r3
 80005d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  usart_read_taskHandle = osThreadCreate(osThread(usart_read_task), NULL);
 80005e0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f002 ffdb 	bl	80035a2 <osThreadCreate>
 80005ec:	4602      	mov	r2, r0
 80005ee:	4b1d      	ldr	r3, [pc, #116]	; (8000664 <main+0x150>)
 80005f0:	601a      	str	r2, [r3, #0]

  /* definition and creation of LED_Task */
  osThreadDef(LED_Task, StartLedTask, osPriorityIdle, 0, 128);
 80005f2:	4b1d      	ldr	r3, [pc, #116]	; (8000668 <main+0x154>)
 80005f4:	f107 041c 	add.w	r4, r7, #28
 80005f8:	461d      	mov	r5, r3
 80005fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005fe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000602:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LED_TaskHandle = osThreadCreate(osThread(LED_Task), NULL);
 8000606:	f107 031c 	add.w	r3, r7, #28
 800060a:	2100      	movs	r1, #0
 800060c:	4618      	mov	r0, r3
 800060e:	f002 ffc8 	bl	80035a2 <osThreadCreate>
 8000612:	4602      	mov	r2, r0
 8000614:	4b15      	ldr	r3, [pc, #84]	; (800066c <main+0x158>)
 8000616:	601a      	str	r2, [r3, #0]

  /* definition and creation of ADC_Task */
  osThreadDef(ADC_Task, StartAdcTask, osPriorityIdle, 0, 128);
 8000618:	4b15      	ldr	r3, [pc, #84]	; (8000670 <main+0x15c>)
 800061a:	463c      	mov	r4, r7
 800061c:	461d      	mov	r5, r3
 800061e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000620:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000622:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000626:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ADC_TaskHandle = osThreadCreate(osThread(ADC_Task), NULL);
 800062a:	463b      	mov	r3, r7
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f002 ffb7 	bl	80035a2 <osThreadCreate>
 8000634:	4602      	mov	r2, r0
 8000636:	4b0f      	ldr	r3, [pc, #60]	; (8000674 <main+0x160>)
 8000638:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800063a:	f002 ffab 	bl	8003594 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800063e:	e7fe      	b.n	800063e <main+0x12a>
 8000640:	20004070 	.word	0x20004070
 8000644:	08005eb4 	.word	0x08005eb4
 8000648:	20003fd4 	.word	0x20003fd4
 800064c:	08005ec4 	.word	0x08005ec4
 8000650:	20003fd0 	.word	0x20003fd0
 8000654:	20003fd8 	.word	0x20003fd8
 8000658:	08005ee0 	.word	0x08005ee0
 800065c:	20003fcc 	.word	0x20003fcc
 8000660:	08005f0c 	.word	0x08005f0c
 8000664:	2000402c 	.word	0x2000402c
 8000668:	08005f34 	.word	0x08005f34
 800066c:	20003fdc 	.word	0x20003fdc
 8000670:	08005f5c 	.word	0x08005f5c
 8000674:	20003fe0 	.word	0x20003fe0

08000678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b094      	sub	sp, #80	; 0x50
 800067c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067e:	f107 0320 	add.w	r3, r7, #32
 8000682:	2230      	movs	r2, #48	; 0x30
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f005 fbff 	bl	8005e8a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068c:	f107 030c 	add.w	r3, r7, #12
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800069c:	2300      	movs	r3, #0
 800069e:	60bb      	str	r3, [r7, #8]
 80006a0:	4b29      	ldr	r3, [pc, #164]	; (8000748 <SystemClock_Config+0xd0>)
 80006a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a4:	4a28      	ldr	r2, [pc, #160]	; (8000748 <SystemClock_Config+0xd0>)
 80006a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006aa:	6413      	str	r3, [r2, #64]	; 0x40
 80006ac:	4b26      	ldr	r3, [pc, #152]	; (8000748 <SystemClock_Config+0xd0>)
 80006ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b4:	60bb      	str	r3, [r7, #8]
 80006b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006b8:	2300      	movs	r3, #0
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	4b23      	ldr	r3, [pc, #140]	; (800074c <SystemClock_Config+0xd4>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006c4:	4a21      	ldr	r2, [pc, #132]	; (800074c <SystemClock_Config+0xd4>)
 80006c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006ca:	6013      	str	r3, [r2, #0]
 80006cc:	4b1f      	ldr	r3, [pc, #124]	; (800074c <SystemClock_Config+0xd4>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d8:	2302      	movs	r3, #2
 80006da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006dc:	2301      	movs	r3, #1
 80006de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e0:	2310      	movs	r3, #16
 80006e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e4:	2302      	movs	r3, #2
 80006e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006e8:	2300      	movs	r3, #0
 80006ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006ec:	2310      	movs	r3, #16
 80006ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006f0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006f6:	2304      	movs	r3, #4
 80006f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006fa:	2307      	movs	r3, #7
 80006fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fe:	f107 0320 	add.w	r3, r7, #32
 8000702:	4618      	mov	r0, r3
 8000704:	f001 f9d0 	bl	8001aa8 <HAL_RCC_OscConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800070e:	f000 fadf 	bl	8000cd0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000712:	230f      	movs	r3, #15
 8000714:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000716:	2302      	movs	r3, #2
 8000718:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071a:	2300      	movs	r3, #0
 800071c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800071e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000722:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000728:	f107 030c 	add.w	r3, r7, #12
 800072c:	2102      	movs	r1, #2
 800072e:	4618      	mov	r0, r3
 8000730:	f001 fc2a 	bl	8001f88 <HAL_RCC_ClockConfig>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800073a:	f000 fac9 	bl	8000cd0 <Error_Handler>
  }
}
 800073e:	bf00      	nop
 8000740:	3750      	adds	r7, #80	; 0x50
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40023800 	.word	0x40023800
 800074c:	40007000 	.word	0x40007000

08000750 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000756:	463b      	mov	r3, r7
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
 800075e:	609a      	str	r2, [r3, #8]
 8000760:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000762:	4b21      	ldr	r3, [pc, #132]	; (80007e8 <MX_ADC1_Init+0x98>)
 8000764:	4a21      	ldr	r2, [pc, #132]	; (80007ec <MX_ADC1_Init+0x9c>)
 8000766:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000768:	4b1f      	ldr	r3, [pc, #124]	; (80007e8 <MX_ADC1_Init+0x98>)
 800076a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800076e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000770:	4b1d      	ldr	r3, [pc, #116]	; (80007e8 <MX_ADC1_Init+0x98>)
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000776:	4b1c      	ldr	r3, [pc, #112]	; (80007e8 <MX_ADC1_Init+0x98>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800077c:	4b1a      	ldr	r3, [pc, #104]	; (80007e8 <MX_ADC1_Init+0x98>)
 800077e:	2200      	movs	r2, #0
 8000780:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000782:	4b19      	ldr	r3, [pc, #100]	; (80007e8 <MX_ADC1_Init+0x98>)
 8000784:	2200      	movs	r2, #0
 8000786:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800078a:	4b17      	ldr	r3, [pc, #92]	; (80007e8 <MX_ADC1_Init+0x98>)
 800078c:	2200      	movs	r2, #0
 800078e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000790:	4b15      	ldr	r3, [pc, #84]	; (80007e8 <MX_ADC1_Init+0x98>)
 8000792:	4a17      	ldr	r2, [pc, #92]	; (80007f0 <MX_ADC1_Init+0xa0>)
 8000794:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000796:	4b14      	ldr	r3, [pc, #80]	; (80007e8 <MX_ADC1_Init+0x98>)
 8000798:	2200      	movs	r2, #0
 800079a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800079c:	4b12      	ldr	r3, [pc, #72]	; (80007e8 <MX_ADC1_Init+0x98>)
 800079e:	2201      	movs	r2, #1
 80007a0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007a2:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <MX_ADC1_Init+0x98>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007aa:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <MX_ADC1_Init+0x98>)
 80007ac:	2201      	movs	r2, #1
 80007ae:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007b0:	480d      	ldr	r0, [pc, #52]	; (80007e8 <MX_ADC1_Init+0x98>)
 80007b2:	f000 fc5d 	bl	8001070 <HAL_ADC_Init>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80007bc:	f000 fa88 	bl	8000cd0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007c4:	2301      	movs	r3, #1
 80007c6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007c8:	2300      	movs	r3, #0
 80007ca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007cc:	463b      	mov	r3, r7
 80007ce:	4619      	mov	r1, r3
 80007d0:	4805      	ldr	r0, [pc, #20]	; (80007e8 <MX_ADC1_Init+0x98>)
 80007d2:	f000 fc91 	bl	80010f8 <HAL_ADC_ConfigChannel>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007dc:	f000 fa78 	bl	8000cd0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007e0:	bf00      	nop
 80007e2:	3710      	adds	r7, #16
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20003fe4 	.word	0x20003fe4
 80007ec:	40012000 	.word	0x40012000
 80007f0:	0f000001 	.word	0x0f000001

080007f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007f8:	4b11      	ldr	r3, [pc, #68]	; (8000840 <MX_USART2_UART_Init+0x4c>)
 80007fa:	4a12      	ldr	r2, [pc, #72]	; (8000844 <MX_USART2_UART_Init+0x50>)
 80007fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007fe:	4b10      	ldr	r3, [pc, #64]	; (8000840 <MX_USART2_UART_Init+0x4c>)
 8000800:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000804:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000806:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <MX_USART2_UART_Init+0x4c>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800080c:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <MX_USART2_UART_Init+0x4c>)
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000812:	4b0b      	ldr	r3, [pc, #44]	; (8000840 <MX_USART2_UART_Init+0x4c>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000818:	4b09      	ldr	r3, [pc, #36]	; (8000840 <MX_USART2_UART_Init+0x4c>)
 800081a:	220c      	movs	r2, #12
 800081c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800081e:	4b08      	ldr	r3, [pc, #32]	; (8000840 <MX_USART2_UART_Init+0x4c>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000824:	4b06      	ldr	r3, [pc, #24]	; (8000840 <MX_USART2_UART_Init+0x4c>)
 8000826:	2200      	movs	r2, #0
 8000828:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800082a:	4805      	ldr	r0, [pc, #20]	; (8000840 <MX_USART2_UART_Init+0x4c>)
 800082c:	f001 ffee 	bl	800280c <HAL_UART_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000836:	f000 fa4b 	bl	8000cd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20004030 	.word	0x20004030
 8000844:	40004400 	.word	0x40004400

08000848 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08a      	sub	sp, #40	; 0x28
 800084c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	60da      	str	r2, [r3, #12]
 800085c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	613b      	str	r3, [r7, #16]
 8000862:	4b2d      	ldr	r3, [pc, #180]	; (8000918 <MX_GPIO_Init+0xd0>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a2c      	ldr	r2, [pc, #176]	; (8000918 <MX_GPIO_Init+0xd0>)
 8000868:	f043 0304 	orr.w	r3, r3, #4
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b2a      	ldr	r3, [pc, #168]	; (8000918 <MX_GPIO_Init+0xd0>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0304 	and.w	r3, r3, #4
 8000876:	613b      	str	r3, [r7, #16]
 8000878:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	4b26      	ldr	r3, [pc, #152]	; (8000918 <MX_GPIO_Init+0xd0>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a25      	ldr	r2, [pc, #148]	; (8000918 <MX_GPIO_Init+0xd0>)
 8000884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b23      	ldr	r3, [pc, #140]	; (8000918 <MX_GPIO_Init+0xd0>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	60bb      	str	r3, [r7, #8]
 800089a:	4b1f      	ldr	r3, [pc, #124]	; (8000918 <MX_GPIO_Init+0xd0>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a1e      	ldr	r2, [pc, #120]	; (8000918 <MX_GPIO_Init+0xd0>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b1c      	ldr	r3, [pc, #112]	; (8000918 <MX_GPIO_Init+0xd0>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	60bb      	str	r3, [r7, #8]
 80008b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	607b      	str	r3, [r7, #4]
 80008b6:	4b18      	ldr	r3, [pc, #96]	; (8000918 <MX_GPIO_Init+0xd0>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a17      	ldr	r2, [pc, #92]	; (8000918 <MX_GPIO_Init+0xd0>)
 80008bc:	f043 0302 	orr.w	r3, r3, #2
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b15      	ldr	r3, [pc, #84]	; (8000918 <MX_GPIO_Init+0xd0>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0302 	and.w	r3, r3, #2
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2120      	movs	r1, #32
 80008d2:	4812      	ldr	r0, [pc, #72]	; (800091c <MX_GPIO_Init+0xd4>)
 80008d4:	f001 f8b4 	bl	8001a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008de:	4b10      	ldr	r3, [pc, #64]	; (8000920 <MX_GPIO_Init+0xd8>)
 80008e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008e6:	f107 0314 	add.w	r3, r7, #20
 80008ea:	4619      	mov	r1, r3
 80008ec:	480d      	ldr	r0, [pc, #52]	; (8000924 <MX_GPIO_Init+0xdc>)
 80008ee:	f000 ff25 	bl	800173c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008f2:	2320      	movs	r3, #32
 80008f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f6:	2301      	movs	r3, #1
 80008f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fe:	2300      	movs	r3, #0
 8000900:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000902:	f107 0314 	add.w	r3, r7, #20
 8000906:	4619      	mov	r1, r3
 8000908:	4804      	ldr	r0, [pc, #16]	; (800091c <MX_GPIO_Init+0xd4>)
 800090a:	f000 ff17 	bl	800173c <HAL_GPIO_Init>

}
 800090e:	bf00      	nop
 8000910:	3728      	adds	r7, #40	; 0x28
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40023800 	.word	0x40023800
 800091c:	40020000 	.word	0x40020000
 8000920:	10210000 	.word	0x10210000
 8000924:	40020800 	.word	0x40020800

08000928 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]

	if(huart->Instance==USART2){
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a05      	ldr	r2, [pc, #20]	; (800094c <HAL_UART_RxCpltCallback+0x24>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d104      	bne.n	8000944 <HAL_UART_RxCpltCallback+0x1c>
			osSemaphoreRelease(BinarySemaphoteUARTHandle);
 800093a:	4b05      	ldr	r3, [pc, #20]	; (8000950 <HAL_UART_RxCpltCallback+0x28>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4618      	mov	r0, r3
 8000940:	f002 ff10 	bl	8003764 <osSemaphoreRelease>
	}

}
 8000944:	bf00      	nop
 8000946:	3708      	adds	r7, #8
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40004400 	.word	0x40004400
 8000950:	20004070 	.word	0x20004070

08000954 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

     osDelay(1000);
 800095c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000960:	f002 fe6b 	bl	800363a <osDelay>
 8000964:	e7fa      	b.n	800095c <StartDefaultTask+0x8>
	...

08000968 <StartUsartTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUsartTask */
void StartUsartTask(void const * argument)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b0ca      	sub	sp, #296	; 0x128
 800096c:	af00      	add	r7, sp, #0
 800096e:	1d3b      	adds	r3, r7, #4
 8000970:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartUsartTask */
  /* Infinite loop */
  for(;;)
  {
	 uint8_t data[requestSize];
	 osSemaphoreWait(BinarySemaphoteUARTHandle, osWaitForever);
 8000972:	4baf      	ldr	r3, [pc, #700]	; (8000c30 <StartUsartTask+0x2c8>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	f04f 31ff 	mov.w	r1, #4294967295
 800097a:	4618      	mov	r0, r3
 800097c:	f002 fea4 	bl	80036c8 <osSemaphoreWait>
	 HAL_UART_Receive_IT(&huart2, data , requestSize);
 8000980:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8000984:	2204      	movs	r2, #4
 8000986:	4619      	mov	r1, r3
 8000988:	48aa      	ldr	r0, [pc, #680]	; (8000c34 <StartUsartTask+0x2cc>)
 800098a:	f001 ffd1 	bl	8002930 <HAL_UART_Receive_IT>
	 if(data[0] != 0x01){
 800098e:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 8000992:	2b01      	cmp	r3, #1
 8000994:	d028      	beq.n	80009e8 <StartUsartTask+0x80>

			 uint8_t response [5];
			 response[0] = 0x01;
 8000996:	2301      	movs	r3, #1
 8000998:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114
		 	 response[1] = data[1];
 800099c:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 80009a0:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
			 response[2] = 0x01;
 80009a4:	2301      	movs	r3, #1
 80009a6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
	 		 response[3] = NACK;
 80009aa:	2317      	movs	r3, #23
 80009ac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	 		 response[4] = response[0] + response[1] + response[2] + response[3] + response[4];
 80009b0:	f897 2114 	ldrb.w	r2, [r7, #276]	; 0x114
 80009b4:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 80009b8:	4413      	add	r3, r2
 80009ba:	b2da      	uxtb	r2, r3
 80009bc:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 80009c0:	4413      	add	r3, r2
 80009c2:	b2da      	uxtb	r2, r3
 80009c4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80009c8:	4413      	add	r3, r2
 80009ca:	b2da      	uxtb	r2, r3
 80009cc:	f897 3118 	ldrb.w	r3, [r7, #280]	; 0x118
 80009d0:	4413      	add	r3, r2
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118
	 		 HAL_UART_Transmit_IT(&huart2, response, 5);
 80009d8:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80009dc:	2205      	movs	r2, #5
 80009de:	4619      	mov	r1, r3
 80009e0:	4894      	ldr	r0, [pc, #592]	; (8000c34 <StartUsartTask+0x2cc>)
 80009e2:	f001 ff60 	bl	80028a6 <HAL_UART_Transmit_IT>
 80009e6:	e11f      	b.n	8000c28 <StartUsartTask+0x2c0>


	 }else if(data[3] != data[0]+data[1]+data[2]){
 80009e8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80009ec:	461a      	mov	r2, r3
 80009ee:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 80009f2:	4619      	mov	r1, r3
 80009f4:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 80009f8:	440b      	add	r3, r1
 80009fa:	f897 111e 	ldrb.w	r1, [r7, #286]	; 0x11e
 80009fe:	440b      	add	r3, r1
 8000a00:	429a      	cmp	r2, r3
 8000a02:	d028      	beq.n	8000a56 <StartUsartTask+0xee>
		     uint8_t response [5];
		     response[0] = 0x01;
 8000a04:	2301      	movs	r3, #1
 8000a06:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
		 	 response[1] = data[1];
 8000a0a:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8000a0e:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
		 	 response[2] = 0x01;
 8000a12:	2301      	movs	r3, #1
 8000a14:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
		 	 response[3] = NACK;
 8000a18:	2317      	movs	r3, #23
 8000a1a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		 	 response[4] = response[0] + response[1] + response[2] + response[3] + response[4];
 8000a1e:	f897 210c 	ldrb.w	r2, [r7, #268]	; 0x10c
 8000a22:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8000a26:	4413      	add	r3, r2
 8000a28:	b2da      	uxtb	r2, r3
 8000a2a:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8000a2e:	4413      	add	r3, r2
 8000a30:	b2da      	uxtb	r2, r3
 8000a32:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000a36:	4413      	add	r3, r2
 8000a38:	b2da      	uxtb	r2, r3
 8000a3a:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 8000a3e:	4413      	add	r3, r2
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	f887 3110 	strb.w	r3, [r7, #272]	; 0x110
		 	 HAL_UART_Transmit_IT(&huart2, response, 5);
 8000a46:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8000a4a:	2205      	movs	r2, #5
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4879      	ldr	r0, [pc, #484]	; (8000c34 <StartUsartTask+0x2cc>)
 8000a50:	f001 ff29 	bl	80028a6 <HAL_UART_Transmit_IT>
 8000a54:	e0e8      	b.n	8000c28 <StartUsartTask+0x2c0>

	 }else{
		     uint8_t command;
		     uint8_t response[255];
		     uint8_t response_size;
		 	 switch (data[1]){
 8000a56:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8000a5a:	3b01      	subs	r3, #1
 8000a5c:	2b03      	cmp	r3, #3
 8000a5e:	f200 80da 	bhi.w	8000c16 <StartUsartTask+0x2ae>
 8000a62:	a201      	add	r2, pc, #4	; (adr r2, 8000a68 <StartUsartTask+0x100>)
 8000a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a68:	08000a79 	.word	0x08000a79
 8000a6c:	08000aef 	.word	0x08000aef
 8000a70:	08000b65 	.word	0x08000b65
 8000a74:	08000bdb 	.word	0x08000bdb
		 	 	 case 0x01:
		 	 		 //Turn on LED
		 	 		 command= 0x01;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
		 	 		 xQueueSend(LedQueueHandle,&command,osWaitForever);
 8000a7e:	4b6e      	ldr	r3, [pc, #440]	; (8000c38 <StartUsartTask+0x2d0>)
 8000a80:	6818      	ldr	r0, [r3, #0]
 8000a82:	f207 110b 	addw	r1, r7, #267	; 0x10b
 8000a86:	2300      	movs	r3, #0
 8000a88:	f04f 32ff 	mov.w	r2, #4294967295
 8000a8c:	f003 f8b4 	bl	8003bf8 <xQueueGenericSend>
		 	 		 response[0] = 0x01;
 8000a90:	f107 030c 	add.w	r3, r7, #12
 8000a94:	2201      	movs	r2, #1
 8000a96:	701a      	strb	r2, [r3, #0]
		 	 		 response[1] = data[1];
 8000a98:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 8000a9c:	f107 030c 	add.w	r3, r7, #12
 8000aa0:	705a      	strb	r2, [r3, #1]
		 	 		 response[2] = 0x01;
 8000aa2:	f107 030c 	add.w	r3, r7, #12
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	709a      	strb	r2, [r3, #2]
		 	 		 response[3] = ACK;
 8000aaa:	f107 030c 	add.w	r3, r7, #12
 8000aae:	2206      	movs	r2, #6
 8000ab0:	70da      	strb	r2, [r3, #3]
		 	 	     response[4] = response[0] + response[1] + response[2] + response[3] + response[4];
 8000ab2:	f107 030c 	add.w	r3, r7, #12
 8000ab6:	781a      	ldrb	r2, [r3, #0]
 8000ab8:	f107 030c 	add.w	r3, r7, #12
 8000abc:	785b      	ldrb	r3, [r3, #1]
 8000abe:	4413      	add	r3, r2
 8000ac0:	b2da      	uxtb	r2, r3
 8000ac2:	f107 030c 	add.w	r3, r7, #12
 8000ac6:	789b      	ldrb	r3, [r3, #2]
 8000ac8:	4413      	add	r3, r2
 8000aca:	b2da      	uxtb	r2, r3
 8000acc:	f107 030c 	add.w	r3, r7, #12
 8000ad0:	78db      	ldrb	r3, [r3, #3]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	b2da      	uxtb	r2, r3
 8000ad6:	f107 030c 	add.w	r3, r7, #12
 8000ada:	791b      	ldrb	r3, [r3, #4]
 8000adc:	4413      	add	r3, r2
 8000ade:	b2da      	uxtb	r2, r3
 8000ae0:	f107 030c 	add.w	r3, r7, #12
 8000ae4:	711a      	strb	r2, [r3, #4]
		 	 	     response_size= 5;
 8000ae6:	2305      	movs	r3, #5
 8000ae8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
		 	 		 break;
 8000aec:	e093      	b.n	8000c16 <StartUsartTask+0x2ae>
		 	 	 case 0x02:
		 	 		 //Turn off LED
		 	 		 command= 0x02;
 8000aee:	2302      	movs	r3, #2
 8000af0:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
		 	 		 xQueueSend(LedQueueHandle,&command,osWaitForever);
 8000af4:	4b50      	ldr	r3, [pc, #320]	; (8000c38 <StartUsartTask+0x2d0>)
 8000af6:	6818      	ldr	r0, [r3, #0]
 8000af8:	f207 110b 	addw	r1, r7, #267	; 0x10b
 8000afc:	2300      	movs	r3, #0
 8000afe:	f04f 32ff 	mov.w	r2, #4294967295
 8000b02:	f003 f879 	bl	8003bf8 <xQueueGenericSend>
		 	  		 response[0] = 0x01;
 8000b06:	f107 030c 	add.w	r3, r7, #12
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	701a      	strb	r2, [r3, #0]
		 	         response[1] = data[1];
 8000b0e:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 8000b12:	f107 030c 	add.w	r3, r7, #12
 8000b16:	705a      	strb	r2, [r3, #1]
		 	 		 response[2] = 0x01;
 8000b18:	f107 030c 	add.w	r3, r7, #12
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	709a      	strb	r2, [r3, #2]
		 	 	     response[3] = ACK;
 8000b20:	f107 030c 	add.w	r3, r7, #12
 8000b24:	2206      	movs	r2, #6
 8000b26:	70da      	strb	r2, [r3, #3]
		 	 		 response[4] = response[0] + response[1] + response[2] + response[3] + response[4];
 8000b28:	f107 030c 	add.w	r3, r7, #12
 8000b2c:	781a      	ldrb	r2, [r3, #0]
 8000b2e:	f107 030c 	add.w	r3, r7, #12
 8000b32:	785b      	ldrb	r3, [r3, #1]
 8000b34:	4413      	add	r3, r2
 8000b36:	b2da      	uxtb	r2, r3
 8000b38:	f107 030c 	add.w	r3, r7, #12
 8000b3c:	789b      	ldrb	r3, [r3, #2]
 8000b3e:	4413      	add	r3, r2
 8000b40:	b2da      	uxtb	r2, r3
 8000b42:	f107 030c 	add.w	r3, r7, #12
 8000b46:	78db      	ldrb	r3, [r3, #3]
 8000b48:	4413      	add	r3, r2
 8000b4a:	b2da      	uxtb	r2, r3
 8000b4c:	f107 030c 	add.w	r3, r7, #12
 8000b50:	791b      	ldrb	r3, [r3, #4]
 8000b52:	4413      	add	r3, r2
 8000b54:	b2da      	uxtb	r2, r3
 8000b56:	f107 030c 	add.w	r3, r7, #12
 8000b5a:	711a      	strb	r2, [r3, #4]
		 	 		 response_size= 5;
 8000b5c:	2305      	movs	r3, #5
 8000b5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
		 	 	     break;
 8000b62:	e058      	b.n	8000c16 <StartUsartTask+0x2ae>
		 	 	case 0x03:
		 	 		 //Toggle LED
		 	 	     command= 0x03;
 8000b64:	2303      	movs	r3, #3
 8000b66:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
		 	 		 xQueueSend(LedQueueHandle,&command,osWaitForever);
 8000b6a:	4b33      	ldr	r3, [pc, #204]	; (8000c38 <StartUsartTask+0x2d0>)
 8000b6c:	6818      	ldr	r0, [r3, #0]
 8000b6e:	f207 110b 	addw	r1, r7, #267	; 0x10b
 8000b72:	2300      	movs	r3, #0
 8000b74:	f04f 32ff 	mov.w	r2, #4294967295
 8000b78:	f003 f83e 	bl	8003bf8 <xQueueGenericSend>
		 	 	     response[0] = 0x01;
 8000b7c:	f107 030c 	add.w	r3, r7, #12
 8000b80:	2201      	movs	r2, #1
 8000b82:	701a      	strb	r2, [r3, #0]
		 	 	     response[1] = data[1];
 8000b84:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 8000b88:	f107 030c 	add.w	r3, r7, #12
 8000b8c:	705a      	strb	r2, [r3, #1]
		 	 		 response[2] = 0x01;
 8000b8e:	f107 030c 	add.w	r3, r7, #12
 8000b92:	2201      	movs	r2, #1
 8000b94:	709a      	strb	r2, [r3, #2]
		 	 		 response[3] = ACK;
 8000b96:	f107 030c 	add.w	r3, r7, #12
 8000b9a:	2206      	movs	r2, #6
 8000b9c:	70da      	strb	r2, [r3, #3]
		 	 		 response[4] = response[0] + response[1] + response[2] + response[3] + response[4];
 8000b9e:	f107 030c 	add.w	r3, r7, #12
 8000ba2:	781a      	ldrb	r2, [r3, #0]
 8000ba4:	f107 030c 	add.w	r3, r7, #12
 8000ba8:	785b      	ldrb	r3, [r3, #1]
 8000baa:	4413      	add	r3, r2
 8000bac:	b2da      	uxtb	r2, r3
 8000bae:	f107 030c 	add.w	r3, r7, #12
 8000bb2:	789b      	ldrb	r3, [r3, #2]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	b2da      	uxtb	r2, r3
 8000bb8:	f107 030c 	add.w	r3, r7, #12
 8000bbc:	78db      	ldrb	r3, [r3, #3]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	b2da      	uxtb	r2, r3
 8000bc2:	f107 030c 	add.w	r3, r7, #12
 8000bc6:	791b      	ldrb	r3, [r3, #4]
 8000bc8:	4413      	add	r3, r2
 8000bca:	b2da      	uxtb	r2, r3
 8000bcc:	f107 030c 	add.w	r3, r7, #12
 8000bd0:	711a      	strb	r2, [r3, #4]
		 	 		 response_size= 5;
 8000bd2:	2305      	movs	r3, #5
 8000bd4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
		 	 	     break;
 8000bd8:	e01d      	b.n	8000c16 <StartUsartTask+0x2ae>
		 	 	case 0x04:
		 	 		 for(int i = 0; i < requestSize; i++ ){
 8000bda:	2300      	movs	r3, #0
 8000bdc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8000be0:	e011      	b.n	8000c06 <StartUsartTask+0x29e>
		 	 			 	response[i] = data[i];
 8000be2:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 8000be6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000bea:	4413      	add	r3, r2
 8000bec:	7819      	ldrb	r1, [r3, #0]
 8000bee:	f107 020c 	add.w	r2, r7, #12
 8000bf2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000bf6:	4413      	add	r3, r2
 8000bf8:	460a      	mov	r2, r1
 8000bfa:	701a      	strb	r2, [r3, #0]
		 	 		 for(int i = 0; i < requestSize; i++ ){
 8000bfc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000c00:	3301      	adds	r3, #1
 8000c02:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8000c06:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000c0a:	2b03      	cmp	r3, #3
 8000c0c:	dde9      	ble.n	8000be2 <StartUsartTask+0x27a>
		 	 		 }
		 	 		 response_size = 4;
 8000c0e:	2304      	movs	r3, #4
 8000c10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
		 	 		 break;
 8000c14:	bf00      	nop
		 	 }
		     HAL_UART_Transmit_IT(&huart2, response, response_size);
 8000c16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8000c1a:	b29a      	uxth	r2, r3
 8000c1c:	f107 030c 	add.w	r3, r7, #12
 8000c20:	4619      	mov	r1, r3
 8000c22:	4804      	ldr	r0, [pc, #16]	; (8000c34 <StartUsartTask+0x2cc>)
 8000c24:	f001 fe3f 	bl	80028a6 <HAL_UART_Transmit_IT>
	 }



	 osDelay(1);
 8000c28:	2001      	movs	r0, #1
 8000c2a:	f002 fd06 	bl	800363a <osDelay>
  {
 8000c2e:	e6a0      	b.n	8000972 <StartUsartTask+0xa>
 8000c30:	20004070 	.word	0x20004070
 8000c34:	20004030 	.word	0x20004030
 8000c38:	20003fd0 	.word	0x20003fd0

08000c3c <StartLedTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLedTask */
void StartLedTask(void const * argument)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLedTask */
  /* Infinite loop */
  for(;;)
  {
	uint8_t command;
	xQueueReceive(LedQueueHandle, &command, osWaitForever);
 8000c44:	4b12      	ldr	r3, [pc, #72]	; (8000c90 <StartLedTask+0x54>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f107 010f 	add.w	r1, r7, #15
 8000c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c50:	4618      	mov	r0, r3
 8000c52:	f003 f955 	bl	8003f00 <xQueueReceive>
	switch(command){
 8000c56:	7bfb      	ldrb	r3, [r7, #15]
 8000c58:	2b02      	cmp	r3, #2
 8000c5a:	d009      	beq.n	8000c70 <StartLedTask+0x34>
 8000c5c:	2b03      	cmp	r3, #3
 8000c5e:	d00d      	beq.n	8000c7c <StartLedTask+0x40>
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d110      	bne.n	8000c86 <StartLedTask+0x4a>
	   case 0x01:
		   HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8000c64:	2201      	movs	r2, #1
 8000c66:	2120      	movs	r1, #32
 8000c68:	480a      	ldr	r0, [pc, #40]	; (8000c94 <StartLedTask+0x58>)
 8000c6a:	f000 fee9 	bl	8001a40 <HAL_GPIO_WritePin>
		   break;
 8000c6e:	e00a      	b.n	8000c86 <StartLedTask+0x4a>
	   case 0x02:
		   HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 8000c70:	2200      	movs	r2, #0
 8000c72:	2120      	movs	r1, #32
 8000c74:	4807      	ldr	r0, [pc, #28]	; (8000c94 <StartLedTask+0x58>)
 8000c76:	f000 fee3 	bl	8001a40 <HAL_GPIO_WritePin>
		   break;
 8000c7a:	e004      	b.n	8000c86 <StartLedTask+0x4a>
	   case 0x03:
	   	   HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000c7c:	2120      	movs	r1, #32
 8000c7e:	4805      	ldr	r0, [pc, #20]	; (8000c94 <StartLedTask+0x58>)
 8000c80:	f000 fef7 	bl	8001a72 <HAL_GPIO_TogglePin>
	   	   break;
 8000c84:	bf00      	nop

	}
    osDelay(1);
 8000c86:	2001      	movs	r0, #1
 8000c88:	f002 fcd7 	bl	800363a <osDelay>
  {
 8000c8c:	e7da      	b.n	8000c44 <StartLedTask+0x8>
 8000c8e:	bf00      	nop
 8000c90:	20003fd0 	.word	0x20003fd0
 8000c94:	40020000 	.word	0x40020000

08000c98 <StartAdcTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAdcTask */
void StartAdcTask(void const * argument)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAdcTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 8000ca0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ca4:	f002 fcc9 	bl	800363a <osDelay>
 8000ca8:	e7fa      	b.n	8000ca0 <StartAdcTask+0x8>
	...

08000cac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a04      	ldr	r2, [pc, #16]	; (8000ccc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d101      	bne.n	8000cc2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cbe:	f000 f9b7 	bl	8001030 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40010000 	.word	0x40010000

08000cd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
	...

08000ce0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	607b      	str	r3, [r7, #4]
 8000cea:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <HAL_MspInit+0x54>)
 8000cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cee:	4a11      	ldr	r2, [pc, #68]	; (8000d34 <HAL_MspInit+0x54>)
 8000cf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cf4:	6453      	str	r3, [r2, #68]	; 0x44
 8000cf6:	4b0f      	ldr	r3, [pc, #60]	; (8000d34 <HAL_MspInit+0x54>)
 8000cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cfe:	607b      	str	r3, [r7, #4]
 8000d00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	603b      	str	r3, [r7, #0]
 8000d06:	4b0b      	ldr	r3, [pc, #44]	; (8000d34 <HAL_MspInit+0x54>)
 8000d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0a:	4a0a      	ldr	r2, [pc, #40]	; (8000d34 <HAL_MspInit+0x54>)
 8000d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d10:	6413      	str	r3, [r2, #64]	; 0x40
 8000d12:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <HAL_MspInit+0x54>)
 8000d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d1a:	603b      	str	r3, [r7, #0]
 8000d1c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	210f      	movs	r1, #15
 8000d22:	f06f 0001 	mvn.w	r0, #1
 8000d26:	f000 fcbd 	bl	80016a4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40023800 	.word	0x40023800

08000d38 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08a      	sub	sp, #40	; 0x28
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d40:	f107 0314 	add.w	r3, r7, #20
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
 8000d4e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a17      	ldr	r2, [pc, #92]	; (8000db4 <HAL_ADC_MspInit+0x7c>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d127      	bne.n	8000daa <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	613b      	str	r3, [r7, #16]
 8000d5e:	4b16      	ldr	r3, [pc, #88]	; (8000db8 <HAL_ADC_MspInit+0x80>)
 8000d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d62:	4a15      	ldr	r2, [pc, #84]	; (8000db8 <HAL_ADC_MspInit+0x80>)
 8000d64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d68:	6453      	str	r3, [r2, #68]	; 0x44
 8000d6a:	4b13      	ldr	r3, [pc, #76]	; (8000db8 <HAL_ADC_MspInit+0x80>)
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d72:	613b      	str	r3, [r7, #16]
 8000d74:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	60fb      	str	r3, [r7, #12]
 8000d7a:	4b0f      	ldr	r3, [pc, #60]	; (8000db8 <HAL_ADC_MspInit+0x80>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	4a0e      	ldr	r2, [pc, #56]	; (8000db8 <HAL_ADC_MspInit+0x80>)
 8000d80:	f043 0301 	orr.w	r3, r3, #1
 8000d84:	6313      	str	r3, [r2, #48]	; 0x30
 8000d86:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <HAL_ADC_MspInit+0x80>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d92:	2301      	movs	r3, #1
 8000d94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d96:	2303      	movs	r3, #3
 8000d98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9e:	f107 0314 	add.w	r3, r7, #20
 8000da2:	4619      	mov	r1, r3
 8000da4:	4805      	ldr	r0, [pc, #20]	; (8000dbc <HAL_ADC_MspInit+0x84>)
 8000da6:	f000 fcc9 	bl	800173c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000daa:	bf00      	nop
 8000dac:	3728      	adds	r7, #40	; 0x28
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40012000 	.word	0x40012000
 8000db8:	40023800 	.word	0x40023800
 8000dbc:	40020000 	.word	0x40020000

08000dc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08a      	sub	sp, #40	; 0x28
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a1d      	ldr	r2, [pc, #116]	; (8000e54 <HAL_UART_MspInit+0x94>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d133      	bne.n	8000e4a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	613b      	str	r3, [r7, #16]
 8000de6:	4b1c      	ldr	r3, [pc, #112]	; (8000e58 <HAL_UART_MspInit+0x98>)
 8000de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dea:	4a1b      	ldr	r2, [pc, #108]	; (8000e58 <HAL_UART_MspInit+0x98>)
 8000dec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000df0:	6413      	str	r3, [r2, #64]	; 0x40
 8000df2:	4b19      	ldr	r3, [pc, #100]	; (8000e58 <HAL_UART_MspInit+0x98>)
 8000df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dfa:	613b      	str	r3, [r7, #16]
 8000dfc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	4b15      	ldr	r3, [pc, #84]	; (8000e58 <HAL_UART_MspInit+0x98>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	4a14      	ldr	r2, [pc, #80]	; (8000e58 <HAL_UART_MspInit+0x98>)
 8000e08:	f043 0301 	orr.w	r3, r3, #1
 8000e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0e:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <HAL_UART_MspInit+0x98>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e1a:	230c      	movs	r3, #12
 8000e1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e26:	2300      	movs	r3, #0
 8000e28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e2a:	2307      	movs	r3, #7
 8000e2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2e:	f107 0314 	add.w	r3, r7, #20
 8000e32:	4619      	mov	r1, r3
 8000e34:	4809      	ldr	r0, [pc, #36]	; (8000e5c <HAL_UART_MspInit+0x9c>)
 8000e36:	f000 fc81 	bl	800173c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2105      	movs	r1, #5
 8000e3e:	2026      	movs	r0, #38	; 0x26
 8000e40:	f000 fc30 	bl	80016a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e44:	2026      	movs	r0, #38	; 0x26
 8000e46:	f000 fc49 	bl	80016dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e4a:	bf00      	nop
 8000e4c:	3728      	adds	r7, #40	; 0x28
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40004400 	.word	0x40004400
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	40020000 	.word	0x40020000

08000e60 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b08c      	sub	sp, #48	; 0x30
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8000e70:	2200      	movs	r2, #0
 8000e72:	6879      	ldr	r1, [r7, #4]
 8000e74:	2019      	movs	r0, #25
 8000e76:	f000 fc15 	bl	80016a4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8000e7a:	2019      	movs	r0, #25
 8000e7c:	f000 fc2e 	bl	80016dc <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000e80:	2300      	movs	r3, #0
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	4b1e      	ldr	r3, [pc, #120]	; (8000f00 <HAL_InitTick+0xa0>)
 8000e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e88:	4a1d      	ldr	r2, [pc, #116]	; (8000f00 <HAL_InitTick+0xa0>)
 8000e8a:	f043 0301 	orr.w	r3, r3, #1
 8000e8e:	6453      	str	r3, [r2, #68]	; 0x44
 8000e90:	4b1b      	ldr	r3, [pc, #108]	; (8000f00 <HAL_InitTick+0xa0>)
 8000e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e94:	f003 0301 	and.w	r3, r3, #1
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e9c:	f107 0210 	add.w	r2, r7, #16
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	4611      	mov	r1, r2
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f001 fa60 	bl	800236c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000eac:	f001 fa4a 	bl	8002344 <HAL_RCC_GetPCLK2Freq>
 8000eb0:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eb4:	4a13      	ldr	r2, [pc, #76]	; (8000f04 <HAL_InitTick+0xa4>)
 8000eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eba:	0c9b      	lsrs	r3, r3, #18
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000ec0:	4b11      	ldr	r3, [pc, #68]	; (8000f08 <HAL_InitTick+0xa8>)
 8000ec2:	4a12      	ldr	r2, [pc, #72]	; (8000f0c <HAL_InitTick+0xac>)
 8000ec4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000ec6:	4b10      	ldr	r3, [pc, #64]	; (8000f08 <HAL_InitTick+0xa8>)
 8000ec8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ecc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000ece:	4a0e      	ldr	r2, [pc, #56]	; (8000f08 <HAL_InitTick+0xa8>)
 8000ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ed2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000ed4:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <HAL_InitTick+0xa8>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eda:	4b0b      	ldr	r3, [pc, #44]	; (8000f08 <HAL_InitTick+0xa8>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000ee0:	4809      	ldr	r0, [pc, #36]	; (8000f08 <HAL_InitTick+0xa8>)
 8000ee2:	f001 fa75 	bl	80023d0 <HAL_TIM_Base_Init>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d104      	bne.n	8000ef6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000eec:	4806      	ldr	r0, [pc, #24]	; (8000f08 <HAL_InitTick+0xa8>)
 8000eee:	f001 faa4 	bl	800243a <HAL_TIM_Base_Start_IT>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	e000      	b.n	8000ef8 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3730      	adds	r7, #48	; 0x30
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	40023800 	.word	0x40023800
 8000f04:	431bde83 	.word	0x431bde83
 8000f08:	20004074 	.word	0x20004074
 8000f0c:	40010000 	.word	0x40010000

08000f10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr

08000f1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f22:	e7fe      	b.n	8000f22 <HardFault_Handler+0x4>

08000f24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f28:	e7fe      	b.n	8000f28 <MemManage_Handler+0x4>

08000f2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f2e:	e7fe      	b.n	8000f2e <BusFault_Handler+0x4>

08000f30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f34:	e7fe      	b.n	8000f34 <UsageFault_Handler+0x4>

08000f36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f48:	4802      	ldr	r0, [pc, #8]	; (8000f54 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000f4a:	f001 fa9a 	bl	8002482 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20004074 	.word	0x20004074

08000f58 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f5c:	4802      	ldr	r0, [pc, #8]	; (8000f68 <USART2_IRQHandler+0x10>)
 8000f5e:	f001 fd3d 	bl	80029dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20004030 	.word	0x20004030

08000f6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f70:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <SystemInit+0x28>)
 8000f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f76:	4a07      	ldr	r2, [pc, #28]	; (8000f94 <SystemInit+0x28>)
 8000f78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f80:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <SystemInit+0x28>)
 8000f82:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f86:	609a      	str	r2, [r3, #8]
#endif
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fd0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000f9c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000f9e:	e003      	b.n	8000fa8 <LoopCopyDataInit>

08000fa0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000fa0:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000fa2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000fa4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000fa6:	3104      	adds	r1, #4

08000fa8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000fa8:	480b      	ldr	r0, [pc, #44]	; (8000fd8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000faa:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000fac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000fae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000fb0:	d3f6      	bcc.n	8000fa0 <CopyDataInit>
  ldr  r2, =_sbss
 8000fb2:	4a0b      	ldr	r2, [pc, #44]	; (8000fe0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000fb4:	e002      	b.n	8000fbc <LoopFillZerobss>

08000fb6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000fb6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000fb8:	f842 3b04 	str.w	r3, [r2], #4

08000fbc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000fbc:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000fbe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000fc0:	d3f9      	bcc.n	8000fb6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000fc2:	f7ff ffd3 	bl	8000f6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fc6:	f004 ff31 	bl	8005e2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fca:	f7ff faa3 	bl	8000514 <main>
  bx  lr    
 8000fce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fd0:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8000fd4:	08005fa8 	.word	0x08005fa8
  ldr  r0, =_sdata
 8000fd8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000fdc:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000fe0:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000fe4:	200040b8 	.word	0x200040b8

08000fe8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fe8:	e7fe      	b.n	8000fe8 <ADC_IRQHandler>
	...

08000fec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ff0:	4b0e      	ldr	r3, [pc, #56]	; (800102c <HAL_Init+0x40>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a0d      	ldr	r2, [pc, #52]	; (800102c <HAL_Init+0x40>)
 8000ff6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ffa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ffc:	4b0b      	ldr	r3, [pc, #44]	; (800102c <HAL_Init+0x40>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a0a      	ldr	r2, [pc, #40]	; (800102c <HAL_Init+0x40>)
 8001002:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001006:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001008:	4b08      	ldr	r3, [pc, #32]	; (800102c <HAL_Init+0x40>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a07      	ldr	r2, [pc, #28]	; (800102c <HAL_Init+0x40>)
 800100e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001012:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001014:	2003      	movs	r0, #3
 8001016:	f000 fb3a 	bl	800168e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800101a:	2000      	movs	r0, #0
 800101c:	f7ff ff20 	bl	8000e60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001020:	f7ff fe5e 	bl	8000ce0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001024:	2300      	movs	r3, #0
}
 8001026:	4618      	mov	r0, r3
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40023c00 	.word	0x40023c00

08001030 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001034:	4b06      	ldr	r3, [pc, #24]	; (8001050 <HAL_IncTick+0x20>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	461a      	mov	r2, r3
 800103a:	4b06      	ldr	r3, [pc, #24]	; (8001054 <HAL_IncTick+0x24>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4413      	add	r3, r2
 8001040:	4a04      	ldr	r2, [pc, #16]	; (8001054 <HAL_IncTick+0x24>)
 8001042:	6013      	str	r3, [r2, #0]
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	20000008 	.word	0x20000008
 8001054:	200040b4 	.word	0x200040b4

08001058 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  return uwTick;
 800105c:	4b03      	ldr	r3, [pc, #12]	; (800106c <HAL_GetTick+0x14>)
 800105e:	681b      	ldr	r3, [r3, #0]
}
 8001060:	4618      	mov	r0, r3
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	200040b4 	.word	0x200040b4

08001070 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001078:	2300      	movs	r3, #0
 800107a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d101      	bne.n	8001086 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e033      	b.n	80010ee <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108a:	2b00      	cmp	r3, #0
 800108c:	d109      	bne.n	80010a2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f7ff fe52 	bl	8000d38 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2200      	movs	r2, #0
 800109e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	f003 0310 	and.w	r3, r3, #16
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d118      	bne.n	80010e0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010b6:	f023 0302 	bic.w	r3, r3, #2
 80010ba:	f043 0202 	orr.w	r2, r3, #2
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f000 f93a 	bl	800133c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2200      	movs	r2, #0
 80010cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d2:	f023 0303 	bic.w	r3, r3, #3
 80010d6:	f043 0201 	orr.w	r2, r3, #1
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	641a      	str	r2, [r3, #64]	; 0x40
 80010de:	e001      	b.n	80010e4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2200      	movs	r2, #0
 80010e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
	...

080010f8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001102:	2300      	movs	r3, #0
 8001104:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800110c:	2b01      	cmp	r3, #1
 800110e:	d101      	bne.n	8001114 <HAL_ADC_ConfigChannel+0x1c>
 8001110:	2302      	movs	r3, #2
 8001112:	e105      	b.n	8001320 <HAL_ADC_ConfigChannel+0x228>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2201      	movs	r2, #1
 8001118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2b09      	cmp	r3, #9
 8001122:	d925      	bls.n	8001170 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	68d9      	ldr	r1, [r3, #12]
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	b29b      	uxth	r3, r3
 8001130:	461a      	mov	r2, r3
 8001132:	4613      	mov	r3, r2
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	4413      	add	r3, r2
 8001138:	3b1e      	subs	r3, #30
 800113a:	2207      	movs	r2, #7
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	43da      	mvns	r2, r3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	400a      	ands	r2, r1
 8001148:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	68d9      	ldr	r1, [r3, #12]
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	689a      	ldr	r2, [r3, #8]
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	b29b      	uxth	r3, r3
 800115a:	4618      	mov	r0, r3
 800115c:	4603      	mov	r3, r0
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	4403      	add	r3, r0
 8001162:	3b1e      	subs	r3, #30
 8001164:	409a      	lsls	r2, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	430a      	orrs	r2, r1
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	e022      	b.n	80011b6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	6919      	ldr	r1, [r3, #16]
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	b29b      	uxth	r3, r3
 800117c:	461a      	mov	r2, r3
 800117e:	4613      	mov	r3, r2
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	4413      	add	r3, r2
 8001184:	2207      	movs	r2, #7
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	43da      	mvns	r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	400a      	ands	r2, r1
 8001192:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	6919      	ldr	r1, [r3, #16]
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	689a      	ldr	r2, [r3, #8]
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	4618      	mov	r0, r3
 80011a6:	4603      	mov	r3, r0
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	4403      	add	r3, r0
 80011ac:	409a      	lsls	r2, r3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	430a      	orrs	r2, r1
 80011b4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	2b06      	cmp	r3, #6
 80011bc:	d824      	bhi.n	8001208 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685a      	ldr	r2, [r3, #4]
 80011c8:	4613      	mov	r3, r2
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	4413      	add	r3, r2
 80011ce:	3b05      	subs	r3, #5
 80011d0:	221f      	movs	r2, #31
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	43da      	mvns	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	400a      	ands	r2, r1
 80011de:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	4618      	mov	r0, r3
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685a      	ldr	r2, [r3, #4]
 80011f2:	4613      	mov	r3, r2
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	4413      	add	r3, r2
 80011f8:	3b05      	subs	r3, #5
 80011fa:	fa00 f203 	lsl.w	r2, r0, r3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	430a      	orrs	r2, r1
 8001204:	635a      	str	r2, [r3, #52]	; 0x34
 8001206:	e04c      	b.n	80012a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	2b0c      	cmp	r3, #12
 800120e:	d824      	bhi.n	800125a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685a      	ldr	r2, [r3, #4]
 800121a:	4613      	mov	r3, r2
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	4413      	add	r3, r2
 8001220:	3b23      	subs	r3, #35	; 0x23
 8001222:	221f      	movs	r2, #31
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	43da      	mvns	r2, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	400a      	ands	r2, r1
 8001230:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	b29b      	uxth	r3, r3
 800123e:	4618      	mov	r0, r3
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685a      	ldr	r2, [r3, #4]
 8001244:	4613      	mov	r3, r2
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	4413      	add	r3, r2
 800124a:	3b23      	subs	r3, #35	; 0x23
 800124c:	fa00 f203 	lsl.w	r2, r0, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	430a      	orrs	r2, r1
 8001256:	631a      	str	r2, [r3, #48]	; 0x30
 8001258:	e023      	b.n	80012a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685a      	ldr	r2, [r3, #4]
 8001264:	4613      	mov	r3, r2
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	4413      	add	r3, r2
 800126a:	3b41      	subs	r3, #65	; 0x41
 800126c:	221f      	movs	r2, #31
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	43da      	mvns	r2, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	400a      	ands	r2, r1
 800127a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	b29b      	uxth	r3, r3
 8001288:	4618      	mov	r0, r3
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685a      	ldr	r2, [r3, #4]
 800128e:	4613      	mov	r3, r2
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	4413      	add	r3, r2
 8001294:	3b41      	subs	r3, #65	; 0x41
 8001296:	fa00 f203 	lsl.w	r2, r0, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	430a      	orrs	r2, r1
 80012a0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012a2:	4b22      	ldr	r3, [pc, #136]	; (800132c <HAL_ADC_ConfigChannel+0x234>)
 80012a4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a21      	ldr	r2, [pc, #132]	; (8001330 <HAL_ADC_ConfigChannel+0x238>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d109      	bne.n	80012c4 <HAL_ADC_ConfigChannel+0x1cc>
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2b12      	cmp	r3, #18
 80012b6:	d105      	bne.n	80012c4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a19      	ldr	r2, [pc, #100]	; (8001330 <HAL_ADC_ConfigChannel+0x238>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d123      	bne.n	8001316 <HAL_ADC_ConfigChannel+0x21e>
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2b10      	cmp	r3, #16
 80012d4:	d003      	beq.n	80012de <HAL_ADC_ConfigChannel+0x1e6>
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2b11      	cmp	r3, #17
 80012dc:	d11b      	bne.n	8001316 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	2b10      	cmp	r3, #16
 80012f0:	d111      	bne.n	8001316 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012f2:	4b10      	ldr	r3, [pc, #64]	; (8001334 <HAL_ADC_ConfigChannel+0x23c>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a10      	ldr	r2, [pc, #64]	; (8001338 <HAL_ADC_ConfigChannel+0x240>)
 80012f8:	fba2 2303 	umull	r2, r3, r2, r3
 80012fc:	0c9a      	lsrs	r2, r3, #18
 80012fe:	4613      	mov	r3, r2
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	4413      	add	r3, r2
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001308:	e002      	b.n	8001310 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	3b01      	subs	r3, #1
 800130e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d1f9      	bne.n	800130a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2200      	movs	r2, #0
 800131a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800131e:	2300      	movs	r3, #0
}
 8001320:	4618      	mov	r0, r3
 8001322:	3714      	adds	r7, #20
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	40012300 	.word	0x40012300
 8001330:	40012000 	.word	0x40012000
 8001334:	20000000 	.word	0x20000000
 8001338:	431bde83 	.word	0x431bde83

0800133c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001344:	4b79      	ldr	r3, [pc, #484]	; (800152c <ADC_Init+0x1f0>)
 8001346:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	685a      	ldr	r2, [r3, #4]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	431a      	orrs	r2, r3
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	685a      	ldr	r2, [r3, #4]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001370:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	6859      	ldr	r1, [r3, #4]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	691b      	ldr	r3, [r3, #16]
 800137c:	021a      	lsls	r2, r3, #8
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	430a      	orrs	r2, r1
 8001384:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	685a      	ldr	r2, [r3, #4]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001394:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	6859      	ldr	r1, [r3, #4]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	689a      	ldr	r2, [r3, #8]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	430a      	orrs	r2, r1
 80013a6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	689a      	ldr	r2, [r3, #8]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	6899      	ldr	r1, [r3, #8]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	68da      	ldr	r2, [r3, #12]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	430a      	orrs	r2, r1
 80013c8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ce:	4a58      	ldr	r2, [pc, #352]	; (8001530 <ADC_Init+0x1f4>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d022      	beq.n	800141a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	689a      	ldr	r2, [r3, #8]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80013e2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	6899      	ldr	r1, [r3, #8]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	430a      	orrs	r2, r1
 80013f4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	689a      	ldr	r2, [r3, #8]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001404:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	6899      	ldr	r1, [r3, #8]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	430a      	orrs	r2, r1
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	e00f      	b.n	800143a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	689a      	ldr	r2, [r3, #8]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001428:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	689a      	ldr	r2, [r3, #8]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001438:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	689a      	ldr	r2, [r3, #8]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f022 0202 	bic.w	r2, r2, #2
 8001448:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	6899      	ldr	r1, [r3, #8]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	7e1b      	ldrb	r3, [r3, #24]
 8001454:	005a      	lsls	r2, r3, #1
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	430a      	orrs	r2, r1
 800145c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d01b      	beq.n	80014a0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	685a      	ldr	r2, [r3, #4]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001476:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	685a      	ldr	r2, [r3, #4]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001486:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	6859      	ldr	r1, [r3, #4]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001492:	3b01      	subs	r3, #1
 8001494:	035a      	lsls	r2, r3, #13
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	430a      	orrs	r2, r1
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	e007      	b.n	80014b0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	685a      	ldr	r2, [r3, #4]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014ae:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80014be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	69db      	ldr	r3, [r3, #28]
 80014ca:	3b01      	subs	r3, #1
 80014cc:	051a      	lsls	r2, r3, #20
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	430a      	orrs	r2, r1
 80014d4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	689a      	ldr	r2, [r3, #8]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80014e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	6899      	ldr	r1, [r3, #8]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014f2:	025a      	lsls	r2, r3, #9
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	430a      	orrs	r2, r1
 80014fa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	689a      	ldr	r2, [r3, #8]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800150a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	6899      	ldr	r1, [r3, #8]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	695b      	ldr	r3, [r3, #20]
 8001516:	029a      	lsls	r2, r3, #10
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	430a      	orrs	r2, r1
 800151e:	609a      	str	r2, [r3, #8]
}
 8001520:	bf00      	nop
 8001522:	3714      	adds	r7, #20
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	40012300 	.word	0x40012300
 8001530:	0f000001 	.word	0x0f000001

08001534 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001544:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <__NVIC_SetPriorityGrouping+0x44>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800154a:	68ba      	ldr	r2, [r7, #8]
 800154c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001550:	4013      	ands	r3, r2
 8001552:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800155c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001564:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001566:	4a04      	ldr	r2, [pc, #16]	; (8001578 <__NVIC_SetPriorityGrouping+0x44>)
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	60d3      	str	r3, [r2, #12]
}
 800156c:	bf00      	nop
 800156e:	3714      	adds	r7, #20
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	e000ed00 	.word	0xe000ed00

0800157c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001580:	4b04      	ldr	r3, [pc, #16]	; (8001594 <__NVIC_GetPriorityGrouping+0x18>)
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	0a1b      	lsrs	r3, r3, #8
 8001586:	f003 0307 	and.w	r3, r3, #7
}
 800158a:	4618      	mov	r0, r3
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr
 8001594:	e000ed00 	.word	0xe000ed00

08001598 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	db0b      	blt.n	80015c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015aa:	79fb      	ldrb	r3, [r7, #7]
 80015ac:	f003 021f 	and.w	r2, r3, #31
 80015b0:	4907      	ldr	r1, [pc, #28]	; (80015d0 <__NVIC_EnableIRQ+0x38>)
 80015b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b6:	095b      	lsrs	r3, r3, #5
 80015b8:	2001      	movs	r0, #1
 80015ba:	fa00 f202 	lsl.w	r2, r0, r2
 80015be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015c2:	bf00      	nop
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	e000e100 	.word	0xe000e100

080015d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	6039      	str	r1, [r7, #0]
 80015de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	db0a      	blt.n	80015fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	b2da      	uxtb	r2, r3
 80015ec:	490c      	ldr	r1, [pc, #48]	; (8001620 <__NVIC_SetPriority+0x4c>)
 80015ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f2:	0112      	lsls	r2, r2, #4
 80015f4:	b2d2      	uxtb	r2, r2
 80015f6:	440b      	add	r3, r1
 80015f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015fc:	e00a      	b.n	8001614 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	b2da      	uxtb	r2, r3
 8001602:	4908      	ldr	r1, [pc, #32]	; (8001624 <__NVIC_SetPriority+0x50>)
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	f003 030f 	and.w	r3, r3, #15
 800160a:	3b04      	subs	r3, #4
 800160c:	0112      	lsls	r2, r2, #4
 800160e:	b2d2      	uxtb	r2, r2
 8001610:	440b      	add	r3, r1
 8001612:	761a      	strb	r2, [r3, #24]
}
 8001614:	bf00      	nop
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	e000e100 	.word	0xe000e100
 8001624:	e000ed00 	.word	0xe000ed00

08001628 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001628:	b480      	push	{r7}
 800162a:	b089      	sub	sp, #36	; 0x24
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f003 0307 	and.w	r3, r3, #7
 800163a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	f1c3 0307 	rsb	r3, r3, #7
 8001642:	2b04      	cmp	r3, #4
 8001644:	bf28      	it	cs
 8001646:	2304      	movcs	r3, #4
 8001648:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	3304      	adds	r3, #4
 800164e:	2b06      	cmp	r3, #6
 8001650:	d902      	bls.n	8001658 <NVIC_EncodePriority+0x30>
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	3b03      	subs	r3, #3
 8001656:	e000      	b.n	800165a <NVIC_EncodePriority+0x32>
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800165c:	f04f 32ff 	mov.w	r2, #4294967295
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	43da      	mvns	r2, r3
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	401a      	ands	r2, r3
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001670:	f04f 31ff 	mov.w	r1, #4294967295
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	fa01 f303 	lsl.w	r3, r1, r3
 800167a:	43d9      	mvns	r1, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001680:	4313      	orrs	r3, r2
         );
}
 8001682:	4618      	mov	r0, r3
 8001684:	3724      	adds	r7, #36	; 0x24
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b082      	sub	sp, #8
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f7ff ff4c 	bl	8001534 <__NVIC_SetPriorityGrouping>
}
 800169c:	bf00      	nop
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]
 80016b0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016b2:	2300      	movs	r3, #0
 80016b4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016b6:	f7ff ff61 	bl	800157c <__NVIC_GetPriorityGrouping>
 80016ba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	68b9      	ldr	r1, [r7, #8]
 80016c0:	6978      	ldr	r0, [r7, #20]
 80016c2:	f7ff ffb1 	bl	8001628 <NVIC_EncodePriority>
 80016c6:	4602      	mov	r2, r0
 80016c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016cc:	4611      	mov	r1, r2
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff ff80 	bl	80015d4 <__NVIC_SetPriority>
}
 80016d4:	bf00      	nop
 80016d6:	3718      	adds	r7, #24
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff ff54 	bl	8001598 <__NVIC_EnableIRQ>
}
 80016f0:	bf00      	nop
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001706:	b2db      	uxtb	r3, r3
 8001708:	2b02      	cmp	r3, #2
 800170a:	d004      	beq.n	8001716 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2280      	movs	r2, #128	; 0x80
 8001710:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e00c      	b.n	8001730 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2205      	movs	r2, #5
 800171a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f022 0201 	bic.w	r2, r2, #1
 800172c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800172e:	2300      	movs	r3, #0
}
 8001730:	4618      	mov	r0, r3
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800173c:	b480      	push	{r7}
 800173e:	b089      	sub	sp, #36	; 0x24
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001746:	2300      	movs	r3, #0
 8001748:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800174a:	2300      	movs	r3, #0
 800174c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800174e:	2300      	movs	r3, #0
 8001750:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001752:	2300      	movs	r3, #0
 8001754:	61fb      	str	r3, [r7, #28]
 8001756:	e159      	b.n	8001a0c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001758:	2201      	movs	r2, #1
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	697a      	ldr	r2, [r7, #20]
 8001768:	4013      	ands	r3, r2
 800176a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800176c:	693a      	ldr	r2, [r7, #16]
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	429a      	cmp	r2, r3
 8001772:	f040 8148 	bne.w	8001a06 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d00b      	beq.n	8001796 <HAL_GPIO_Init+0x5a>
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	2b02      	cmp	r3, #2
 8001784:	d007      	beq.n	8001796 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800178a:	2b11      	cmp	r3, #17
 800178c:	d003      	beq.n	8001796 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	2b12      	cmp	r3, #18
 8001794:	d130      	bne.n	80017f8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	2203      	movs	r2, #3
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	43db      	mvns	r3, r3
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	4013      	ands	r3, r2
 80017ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	68da      	ldr	r2, [r3, #12]
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	4313      	orrs	r3, r2
 80017be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017cc:	2201      	movs	r2, #1
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	43db      	mvns	r3, r3
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	4013      	ands	r3, r2
 80017da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	091b      	lsrs	r3, r3, #4
 80017e2:	f003 0201 	and.w	r2, r3, #1
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	2203      	movs	r2, #3
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	43db      	mvns	r3, r3
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	4013      	ands	r3, r2
 800180e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	689a      	ldr	r2, [r3, #8]
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	4313      	orrs	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	2b02      	cmp	r3, #2
 800182e:	d003      	beq.n	8001838 <HAL_GPIO_Init+0xfc>
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	2b12      	cmp	r3, #18
 8001836:	d123      	bne.n	8001880 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	08da      	lsrs	r2, r3, #3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	3208      	adds	r2, #8
 8001840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001844:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	f003 0307 	and.w	r3, r3, #7
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	220f      	movs	r2, #15
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	43db      	mvns	r3, r3
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	4013      	ands	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	691a      	ldr	r2, [r3, #16]
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	f003 0307 	and.w	r3, r3, #7
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	4313      	orrs	r3, r2
 8001870:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	08da      	lsrs	r2, r3, #3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	3208      	adds	r2, #8
 800187a:	69b9      	ldr	r1, [r7, #24]
 800187c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	2203      	movs	r2, #3
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	43db      	mvns	r3, r3
 8001892:	69ba      	ldr	r2, [r7, #24]
 8001894:	4013      	ands	r3, r2
 8001896:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f003 0203 	and.w	r2, r3, #3
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	f000 80a2 	beq.w	8001a06 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	60fb      	str	r3, [r7, #12]
 80018c6:	4b56      	ldr	r3, [pc, #344]	; (8001a20 <HAL_GPIO_Init+0x2e4>)
 80018c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ca:	4a55      	ldr	r2, [pc, #340]	; (8001a20 <HAL_GPIO_Init+0x2e4>)
 80018cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018d0:	6453      	str	r3, [r2, #68]	; 0x44
 80018d2:	4b53      	ldr	r3, [pc, #332]	; (8001a20 <HAL_GPIO_Init+0x2e4>)
 80018d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018de:	4a51      	ldr	r2, [pc, #324]	; (8001a24 <HAL_GPIO_Init+0x2e8>)
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	089b      	lsrs	r3, r3, #2
 80018e4:	3302      	adds	r3, #2
 80018e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	f003 0303 	and.w	r3, r3, #3
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	220f      	movs	r2, #15
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	43db      	mvns	r3, r3
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	4013      	ands	r3, r2
 8001900:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a48      	ldr	r2, [pc, #288]	; (8001a28 <HAL_GPIO_Init+0x2ec>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d019      	beq.n	800193e <HAL_GPIO_Init+0x202>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a47      	ldr	r2, [pc, #284]	; (8001a2c <HAL_GPIO_Init+0x2f0>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d013      	beq.n	800193a <HAL_GPIO_Init+0x1fe>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a46      	ldr	r2, [pc, #280]	; (8001a30 <HAL_GPIO_Init+0x2f4>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d00d      	beq.n	8001936 <HAL_GPIO_Init+0x1fa>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a45      	ldr	r2, [pc, #276]	; (8001a34 <HAL_GPIO_Init+0x2f8>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d007      	beq.n	8001932 <HAL_GPIO_Init+0x1f6>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a44      	ldr	r2, [pc, #272]	; (8001a38 <HAL_GPIO_Init+0x2fc>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d101      	bne.n	800192e <HAL_GPIO_Init+0x1f2>
 800192a:	2304      	movs	r3, #4
 800192c:	e008      	b.n	8001940 <HAL_GPIO_Init+0x204>
 800192e:	2307      	movs	r3, #7
 8001930:	e006      	b.n	8001940 <HAL_GPIO_Init+0x204>
 8001932:	2303      	movs	r3, #3
 8001934:	e004      	b.n	8001940 <HAL_GPIO_Init+0x204>
 8001936:	2302      	movs	r3, #2
 8001938:	e002      	b.n	8001940 <HAL_GPIO_Init+0x204>
 800193a:	2301      	movs	r3, #1
 800193c:	e000      	b.n	8001940 <HAL_GPIO_Init+0x204>
 800193e:	2300      	movs	r3, #0
 8001940:	69fa      	ldr	r2, [r7, #28]
 8001942:	f002 0203 	and.w	r2, r2, #3
 8001946:	0092      	lsls	r2, r2, #2
 8001948:	4093      	lsls	r3, r2
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	4313      	orrs	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001950:	4934      	ldr	r1, [pc, #208]	; (8001a24 <HAL_GPIO_Init+0x2e8>)
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	089b      	lsrs	r3, r3, #2
 8001956:	3302      	adds	r3, #2
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800195e:	4b37      	ldr	r3, [pc, #220]	; (8001a3c <HAL_GPIO_Init+0x300>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	43db      	mvns	r3, r3
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	4013      	ands	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d003      	beq.n	8001982 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	4313      	orrs	r3, r2
 8001980:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001982:	4a2e      	ldr	r2, [pc, #184]	; (8001a3c <HAL_GPIO_Init+0x300>)
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001988:	4b2c      	ldr	r3, [pc, #176]	; (8001a3c <HAL_GPIO_Init+0x300>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	43db      	mvns	r3, r3
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	4013      	ands	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d003      	beq.n	80019ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019ac:	4a23      	ldr	r2, [pc, #140]	; (8001a3c <HAL_GPIO_Init+0x300>)
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019b2:	4b22      	ldr	r3, [pc, #136]	; (8001a3c <HAL_GPIO_Init+0x300>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	43db      	mvns	r3, r3
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	4013      	ands	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d003      	beq.n	80019d6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019d6:	4a19      	ldr	r2, [pc, #100]	; (8001a3c <HAL_GPIO_Init+0x300>)
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019dc:	4b17      	ldr	r3, [pc, #92]	; (8001a3c <HAL_GPIO_Init+0x300>)
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	43db      	mvns	r3, r3
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	4013      	ands	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d003      	beq.n	8001a00 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a00:	4a0e      	ldr	r2, [pc, #56]	; (8001a3c <HAL_GPIO_Init+0x300>)
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	61fb      	str	r3, [r7, #28]
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	2b0f      	cmp	r3, #15
 8001a10:	f67f aea2 	bls.w	8001758 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a14:	bf00      	nop
 8001a16:	3724      	adds	r7, #36	; 0x24
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	40023800 	.word	0x40023800
 8001a24:	40013800 	.word	0x40013800
 8001a28:	40020000 	.word	0x40020000
 8001a2c:	40020400 	.word	0x40020400
 8001a30:	40020800 	.word	0x40020800
 8001a34:	40020c00 	.word	0x40020c00
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	40013c00 	.word	0x40013c00

08001a40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	460b      	mov	r3, r1
 8001a4a:	807b      	strh	r3, [r7, #2]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a50:	787b      	ldrb	r3, [r7, #1]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d003      	beq.n	8001a5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a56:	887a      	ldrh	r2, [r7, #2]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a5c:	e003      	b.n	8001a66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a5e:	887b      	ldrh	r3, [r7, #2]
 8001a60:	041a      	lsls	r2, r3, #16
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	619a      	str	r2, [r3, #24]
}
 8001a66:	bf00      	nop
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr

08001a72 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a72:	b480      	push	{r7}
 8001a74:	b083      	sub	sp, #12
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	695a      	ldr	r2, [r3, #20]
 8001a82:	887b      	ldrh	r3, [r7, #2]
 8001a84:	401a      	ands	r2, r3
 8001a86:	887b      	ldrh	r3, [r7, #2]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d104      	bne.n	8001a96 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001a8c:	887b      	ldrh	r3, [r7, #2]
 8001a8e:	041a      	lsls	r2, r3, #16
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001a94:	e002      	b.n	8001a9c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001a96:	887a      	ldrh	r2, [r7, #2]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	619a      	str	r2, [r3, #24]
}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d101      	bne.n	8001aba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e25b      	b.n	8001f72 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d075      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ac6:	4ba3      	ldr	r3, [pc, #652]	; (8001d54 <HAL_RCC_OscConfig+0x2ac>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f003 030c 	and.w	r3, r3, #12
 8001ace:	2b04      	cmp	r3, #4
 8001ad0:	d00c      	beq.n	8001aec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ad2:	4ba0      	ldr	r3, [pc, #640]	; (8001d54 <HAL_RCC_OscConfig+0x2ac>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ada:	2b08      	cmp	r3, #8
 8001adc:	d112      	bne.n	8001b04 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ade:	4b9d      	ldr	r3, [pc, #628]	; (8001d54 <HAL_RCC_OscConfig+0x2ac>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ae6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001aea:	d10b      	bne.n	8001b04 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aec:	4b99      	ldr	r3, [pc, #612]	; (8001d54 <HAL_RCC_OscConfig+0x2ac>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d05b      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x108>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d157      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e236      	b.n	8001f72 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b0c:	d106      	bne.n	8001b1c <HAL_RCC_OscConfig+0x74>
 8001b0e:	4b91      	ldr	r3, [pc, #580]	; (8001d54 <HAL_RCC_OscConfig+0x2ac>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a90      	ldr	r2, [pc, #576]	; (8001d54 <HAL_RCC_OscConfig+0x2ac>)
 8001b14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b18:	6013      	str	r3, [r2, #0]
 8001b1a:	e01d      	b.n	8001b58 <HAL_RCC_OscConfig+0xb0>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b24:	d10c      	bne.n	8001b40 <HAL_RCC_OscConfig+0x98>
 8001b26:	4b8b      	ldr	r3, [pc, #556]	; (8001d54 <HAL_RCC_OscConfig+0x2ac>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a8a      	ldr	r2, [pc, #552]	; (8001d54 <HAL_RCC_OscConfig+0x2ac>)
 8001b2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b30:	6013      	str	r3, [r2, #0]
 8001b32:	4b88      	ldr	r3, [pc, #544]	; (8001d54 <HAL_RCC_OscConfig+0x2ac>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a87      	ldr	r2, [pc, #540]	; (8001d54 <HAL_RCC_OscConfig+0x2ac>)
 8001b38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b3c:	6013      	str	r3, [r2, #0]
 8001b3e:	e00b      	b.n	8001b58 <HAL_RCC_OscConfig+0xb0>
 8001b40:	4b84      	ldr	r3, [pc, #528]	; (8001d54 <HAL_RCC_OscConfig+0x2ac>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a83      	ldr	r2, [pc, #524]	; (8001d54 <HAL_RCC_OscConfig+0x2ac>)
 8001b46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b4a:	6013      	str	r3, [r2, #0]
 8001b4c:	4b81      	ldr	r3, [pc, #516]	; (8001d54 <HAL_RCC_OscConfig+0x2ac>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a80      	ldr	r2, [pc, #512]	; (8001d54 <HAL_RCC_OscConfig+0x2ac>)
 8001b52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d013      	beq.n	8001b88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b60:	f7ff fa7a 	bl	8001058 <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b68:	f7ff fa76 	bl	8001058 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b64      	cmp	r3, #100	; 0x64
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e1fb      	b.n	8001f72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b7a:	4b76      	ldr	r3, [pc, #472]	; (8001d54 <HAL_RCC_OscConfig+0x2ac>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d0f0      	beq.n	8001b68 <HAL_RCC_OscConfig+0xc0>
 8001b86:	e014      	b.n	8001bb2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b88:	f7ff fa66 	bl	8001058 <HAL_GetTick>
 8001b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b8e:	e008      	b.n	8001ba2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b90:	f7ff fa62 	bl	8001058 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b64      	cmp	r3, #100	; 0x64
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e1e7      	b.n	8001f72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ba2:	4b6c      	ldr	r3, [pc, #432]	; (8001d54 <HAL_RCC_OscConfig+0x2ac>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d1f0      	bne.n	8001b90 <HAL_RCC_OscConfig+0xe8>
 8001bae:	e000      	b.n	8001bb2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d063      	beq.n	8001c86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001bbe:	4b65      	ldr	r3, [pc, #404]	; (8001d54 <HAL_RCC_OscConfig+0x2ac>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	f003 030c 	and.w	r3, r3, #12
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d00b      	beq.n	8001be2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bca:	4b62      	ldr	r3, [pc, #392]	; (8001d54 <HAL_RCC_OscConfig+0x2ac>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001bd2:	2b08      	cmp	r3, #8
 8001bd4:	d11c      	bne.n	8001c10 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bd6:	4b5f      	ldr	r3, [pc, #380]	; (8001d54 <HAL_RCC_OscConfig+0x2ac>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d116      	bne.n	8001c10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001be2:	4b5c      	ldr	r3, [pc, #368]	; (8001d54 <HAL_RCC_OscConfig+0x2ac>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d005      	beq.n	8001bfa <HAL_RCC_OscConfig+0x152>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d001      	beq.n	8001bfa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e1bb      	b.n	8001f72 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bfa:	4b56      	ldr	r3, [pc, #344]	; (8001d54 <HAL_RCC_OscConfig+0x2ac>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	4952      	ldr	r1, [pc, #328]	; (8001d54 <HAL_RCC_OscConfig+0x2ac>)
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c0e:	e03a      	b.n	8001c86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d020      	beq.n	8001c5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c18:	4b4f      	ldr	r3, [pc, #316]	; (8001d58 <HAL_RCC_OscConfig+0x2b0>)
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c1e:	f7ff fa1b 	bl	8001058 <HAL_GetTick>
 8001c22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c24:	e008      	b.n	8001c38 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c26:	f7ff fa17 	bl	8001058 <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d901      	bls.n	8001c38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e19c      	b.n	8001f72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c38:	4b46      	ldr	r3, [pc, #280]	; (8001d54 <HAL_RCC_OscConfig+0x2ac>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0302 	and.w	r3, r3, #2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d0f0      	beq.n	8001c26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c44:	4b43      	ldr	r3, [pc, #268]	; (8001d54 <HAL_RCC_OscConfig+0x2ac>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	691b      	ldr	r3, [r3, #16]
 8001c50:	00db      	lsls	r3, r3, #3
 8001c52:	4940      	ldr	r1, [pc, #256]	; (8001d54 <HAL_RCC_OscConfig+0x2ac>)
 8001c54:	4313      	orrs	r3, r2
 8001c56:	600b      	str	r3, [r1, #0]
 8001c58:	e015      	b.n	8001c86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c5a:	4b3f      	ldr	r3, [pc, #252]	; (8001d58 <HAL_RCC_OscConfig+0x2b0>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c60:	f7ff f9fa 	bl	8001058 <HAL_GetTick>
 8001c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c66:	e008      	b.n	8001c7a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c68:	f7ff f9f6 	bl	8001058 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e17b      	b.n	8001f72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c7a:	4b36      	ldr	r3, [pc, #216]	; (8001d54 <HAL_RCC_OscConfig+0x2ac>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1f0      	bne.n	8001c68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0308 	and.w	r3, r3, #8
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d030      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	695b      	ldr	r3, [r3, #20]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d016      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c9a:	4b30      	ldr	r3, [pc, #192]	; (8001d5c <HAL_RCC_OscConfig+0x2b4>)
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ca0:	f7ff f9da 	bl	8001058 <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ca8:	f7ff f9d6 	bl	8001058 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e15b      	b.n	8001f72 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cba:	4b26      	ldr	r3, [pc, #152]	; (8001d54 <HAL_RCC_OscConfig+0x2ac>)
 8001cbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d0f0      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x200>
 8001cc6:	e015      	b.n	8001cf4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cc8:	4b24      	ldr	r3, [pc, #144]	; (8001d5c <HAL_RCC_OscConfig+0x2b4>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cce:	f7ff f9c3 	bl	8001058 <HAL_GetTick>
 8001cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cd4:	e008      	b.n	8001ce8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cd6:	f7ff f9bf 	bl	8001058 <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e144      	b.n	8001f72 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ce8:	4b1a      	ldr	r3, [pc, #104]	; (8001d54 <HAL_RCC_OscConfig+0x2ac>)
 8001cea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1f0      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0304 	and.w	r3, r3, #4
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	f000 80a0 	beq.w	8001e42 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d02:	2300      	movs	r3, #0
 8001d04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d06:	4b13      	ldr	r3, [pc, #76]	; (8001d54 <HAL_RCC_OscConfig+0x2ac>)
 8001d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d10f      	bne.n	8001d32 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	60bb      	str	r3, [r7, #8]
 8001d16:	4b0f      	ldr	r3, [pc, #60]	; (8001d54 <HAL_RCC_OscConfig+0x2ac>)
 8001d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1a:	4a0e      	ldr	r2, [pc, #56]	; (8001d54 <HAL_RCC_OscConfig+0x2ac>)
 8001d1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d20:	6413      	str	r3, [r2, #64]	; 0x40
 8001d22:	4b0c      	ldr	r3, [pc, #48]	; (8001d54 <HAL_RCC_OscConfig+0x2ac>)
 8001d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d2a:	60bb      	str	r3, [r7, #8]
 8001d2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d32:	4b0b      	ldr	r3, [pc, #44]	; (8001d60 <HAL_RCC_OscConfig+0x2b8>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d121      	bne.n	8001d82 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d3e:	4b08      	ldr	r3, [pc, #32]	; (8001d60 <HAL_RCC_OscConfig+0x2b8>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a07      	ldr	r2, [pc, #28]	; (8001d60 <HAL_RCC_OscConfig+0x2b8>)
 8001d44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d4a:	f7ff f985 	bl	8001058 <HAL_GetTick>
 8001d4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d50:	e011      	b.n	8001d76 <HAL_RCC_OscConfig+0x2ce>
 8001d52:	bf00      	nop
 8001d54:	40023800 	.word	0x40023800
 8001d58:	42470000 	.word	0x42470000
 8001d5c:	42470e80 	.word	0x42470e80
 8001d60:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d64:	f7ff f978 	bl	8001058 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e0fd      	b.n	8001f72 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d76:	4b81      	ldr	r3, [pc, #516]	; (8001f7c <HAL_RCC_OscConfig+0x4d4>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d0f0      	beq.n	8001d64 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d106      	bne.n	8001d98 <HAL_RCC_OscConfig+0x2f0>
 8001d8a:	4b7d      	ldr	r3, [pc, #500]	; (8001f80 <HAL_RCC_OscConfig+0x4d8>)
 8001d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d8e:	4a7c      	ldr	r2, [pc, #496]	; (8001f80 <HAL_RCC_OscConfig+0x4d8>)
 8001d90:	f043 0301 	orr.w	r3, r3, #1
 8001d94:	6713      	str	r3, [r2, #112]	; 0x70
 8001d96:	e01c      	b.n	8001dd2 <HAL_RCC_OscConfig+0x32a>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	2b05      	cmp	r3, #5
 8001d9e:	d10c      	bne.n	8001dba <HAL_RCC_OscConfig+0x312>
 8001da0:	4b77      	ldr	r3, [pc, #476]	; (8001f80 <HAL_RCC_OscConfig+0x4d8>)
 8001da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da4:	4a76      	ldr	r2, [pc, #472]	; (8001f80 <HAL_RCC_OscConfig+0x4d8>)
 8001da6:	f043 0304 	orr.w	r3, r3, #4
 8001daa:	6713      	str	r3, [r2, #112]	; 0x70
 8001dac:	4b74      	ldr	r3, [pc, #464]	; (8001f80 <HAL_RCC_OscConfig+0x4d8>)
 8001dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001db0:	4a73      	ldr	r2, [pc, #460]	; (8001f80 <HAL_RCC_OscConfig+0x4d8>)
 8001db2:	f043 0301 	orr.w	r3, r3, #1
 8001db6:	6713      	str	r3, [r2, #112]	; 0x70
 8001db8:	e00b      	b.n	8001dd2 <HAL_RCC_OscConfig+0x32a>
 8001dba:	4b71      	ldr	r3, [pc, #452]	; (8001f80 <HAL_RCC_OscConfig+0x4d8>)
 8001dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dbe:	4a70      	ldr	r2, [pc, #448]	; (8001f80 <HAL_RCC_OscConfig+0x4d8>)
 8001dc0:	f023 0301 	bic.w	r3, r3, #1
 8001dc4:	6713      	str	r3, [r2, #112]	; 0x70
 8001dc6:	4b6e      	ldr	r3, [pc, #440]	; (8001f80 <HAL_RCC_OscConfig+0x4d8>)
 8001dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dca:	4a6d      	ldr	r2, [pc, #436]	; (8001f80 <HAL_RCC_OscConfig+0x4d8>)
 8001dcc:	f023 0304 	bic.w	r3, r3, #4
 8001dd0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d015      	beq.n	8001e06 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dda:	f7ff f93d 	bl	8001058 <HAL_GetTick>
 8001dde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001de0:	e00a      	b.n	8001df8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001de2:	f7ff f939 	bl	8001058 <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d901      	bls.n	8001df8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e0bc      	b.n	8001f72 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001df8:	4b61      	ldr	r3, [pc, #388]	; (8001f80 <HAL_RCC_OscConfig+0x4d8>)
 8001dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d0ee      	beq.n	8001de2 <HAL_RCC_OscConfig+0x33a>
 8001e04:	e014      	b.n	8001e30 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e06:	f7ff f927 	bl	8001058 <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e0c:	e00a      	b.n	8001e24 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e0e:	f7ff f923 	bl	8001058 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e0a6      	b.n	8001f72 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e24:	4b56      	ldr	r3, [pc, #344]	; (8001f80 <HAL_RCC_OscConfig+0x4d8>)
 8001e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d1ee      	bne.n	8001e0e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e30:	7dfb      	ldrb	r3, [r7, #23]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d105      	bne.n	8001e42 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e36:	4b52      	ldr	r3, [pc, #328]	; (8001f80 <HAL_RCC_OscConfig+0x4d8>)
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	4a51      	ldr	r2, [pc, #324]	; (8001f80 <HAL_RCC_OscConfig+0x4d8>)
 8001e3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e40:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	699b      	ldr	r3, [r3, #24]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f000 8092 	beq.w	8001f70 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e4c:	4b4c      	ldr	r3, [pc, #304]	; (8001f80 <HAL_RCC_OscConfig+0x4d8>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f003 030c 	and.w	r3, r3, #12
 8001e54:	2b08      	cmp	r3, #8
 8001e56:	d05c      	beq.n	8001f12 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d141      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e60:	4b48      	ldr	r3, [pc, #288]	; (8001f84 <HAL_RCC_OscConfig+0x4dc>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e66:	f7ff f8f7 	bl	8001058 <HAL_GetTick>
 8001e6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e6c:	e008      	b.n	8001e80 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e6e:	f7ff f8f3 	bl	8001058 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e078      	b.n	8001f72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e80:	4b3f      	ldr	r3, [pc, #252]	; (8001f80 <HAL_RCC_OscConfig+0x4d8>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d1f0      	bne.n	8001e6e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	69da      	ldr	r2, [r3, #28]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a1b      	ldr	r3, [r3, #32]
 8001e94:	431a      	orrs	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9a:	019b      	lsls	r3, r3, #6
 8001e9c:	431a      	orrs	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea2:	085b      	lsrs	r3, r3, #1
 8001ea4:	3b01      	subs	r3, #1
 8001ea6:	041b      	lsls	r3, r3, #16
 8001ea8:	431a      	orrs	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eae:	061b      	lsls	r3, r3, #24
 8001eb0:	4933      	ldr	r1, [pc, #204]	; (8001f80 <HAL_RCC_OscConfig+0x4d8>)
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001eb6:	4b33      	ldr	r3, [pc, #204]	; (8001f84 <HAL_RCC_OscConfig+0x4dc>)
 8001eb8:	2201      	movs	r2, #1
 8001eba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ebc:	f7ff f8cc 	bl	8001058 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ec2:	e008      	b.n	8001ed6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ec4:	f7ff f8c8 	bl	8001058 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e04d      	b.n	8001f72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ed6:	4b2a      	ldr	r3, [pc, #168]	; (8001f80 <HAL_RCC_OscConfig+0x4d8>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d0f0      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x41c>
 8001ee2:	e045      	b.n	8001f70 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ee4:	4b27      	ldr	r3, [pc, #156]	; (8001f84 <HAL_RCC_OscConfig+0x4dc>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eea:	f7ff f8b5 	bl	8001058 <HAL_GetTick>
 8001eee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ef0:	e008      	b.n	8001f04 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ef2:	f7ff f8b1 	bl	8001058 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e036      	b.n	8001f72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f04:	4b1e      	ldr	r3, [pc, #120]	; (8001f80 <HAL_RCC_OscConfig+0x4d8>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d1f0      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x44a>
 8001f10:	e02e      	b.n	8001f70 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d101      	bne.n	8001f1e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e029      	b.n	8001f72 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f1e:	4b18      	ldr	r3, [pc, #96]	; (8001f80 <HAL_RCC_OscConfig+0x4d8>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	69db      	ldr	r3, [r3, #28]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d11c      	bne.n	8001f6c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d115      	bne.n	8001f6c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f46:	4013      	ands	r3, r2
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d10d      	bne.n	8001f6c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d106      	bne.n	8001f6c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d001      	beq.n	8001f70 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e000      	b.n	8001f72 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3718      	adds	r7, #24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	40007000 	.word	0x40007000
 8001f80:	40023800 	.word	0x40023800
 8001f84:	42470060 	.word	0x42470060

08001f88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d101      	bne.n	8001f9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e0cc      	b.n	8002136 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f9c:	4b68      	ldr	r3, [pc, #416]	; (8002140 <HAL_RCC_ClockConfig+0x1b8>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 030f 	and.w	r3, r3, #15
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d90c      	bls.n	8001fc4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001faa:	4b65      	ldr	r3, [pc, #404]	; (8002140 <HAL_RCC_ClockConfig+0x1b8>)
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	b2d2      	uxtb	r2, r2
 8001fb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb2:	4b63      	ldr	r3, [pc, #396]	; (8002140 <HAL_RCC_ClockConfig+0x1b8>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d001      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e0b8      	b.n	8002136 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0302 	and.w	r3, r3, #2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d020      	beq.n	8002012 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0304 	and.w	r3, r3, #4
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d005      	beq.n	8001fe8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fdc:	4b59      	ldr	r3, [pc, #356]	; (8002144 <HAL_RCC_ClockConfig+0x1bc>)
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	4a58      	ldr	r2, [pc, #352]	; (8002144 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001fe6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0308 	and.w	r3, r3, #8
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d005      	beq.n	8002000 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ff4:	4b53      	ldr	r3, [pc, #332]	; (8002144 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	4a52      	ldr	r2, [pc, #328]	; (8002144 <HAL_RCC_ClockConfig+0x1bc>)
 8001ffa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ffe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002000:	4b50      	ldr	r3, [pc, #320]	; (8002144 <HAL_RCC_ClockConfig+0x1bc>)
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	494d      	ldr	r1, [pc, #308]	; (8002144 <HAL_RCC_ClockConfig+0x1bc>)
 800200e:	4313      	orrs	r3, r2
 8002010:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	2b00      	cmp	r3, #0
 800201c:	d044      	beq.n	80020a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d107      	bne.n	8002036 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002026:	4b47      	ldr	r3, [pc, #284]	; (8002144 <HAL_RCC_ClockConfig+0x1bc>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d119      	bne.n	8002066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e07f      	b.n	8002136 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	2b02      	cmp	r3, #2
 800203c:	d003      	beq.n	8002046 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002042:	2b03      	cmp	r3, #3
 8002044:	d107      	bne.n	8002056 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002046:	4b3f      	ldr	r3, [pc, #252]	; (8002144 <HAL_RCC_ClockConfig+0x1bc>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d109      	bne.n	8002066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e06f      	b.n	8002136 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002056:	4b3b      	ldr	r3, [pc, #236]	; (8002144 <HAL_RCC_ClockConfig+0x1bc>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d101      	bne.n	8002066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e067      	b.n	8002136 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002066:	4b37      	ldr	r3, [pc, #220]	; (8002144 <HAL_RCC_ClockConfig+0x1bc>)
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f023 0203 	bic.w	r2, r3, #3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	4934      	ldr	r1, [pc, #208]	; (8002144 <HAL_RCC_ClockConfig+0x1bc>)
 8002074:	4313      	orrs	r3, r2
 8002076:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002078:	f7fe ffee 	bl	8001058 <HAL_GetTick>
 800207c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800207e:	e00a      	b.n	8002096 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002080:	f7fe ffea 	bl	8001058 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	f241 3288 	movw	r2, #5000	; 0x1388
 800208e:	4293      	cmp	r3, r2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e04f      	b.n	8002136 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002096:	4b2b      	ldr	r3, [pc, #172]	; (8002144 <HAL_RCC_ClockConfig+0x1bc>)
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f003 020c 	and.w	r2, r3, #12
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d1eb      	bne.n	8002080 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020a8:	4b25      	ldr	r3, [pc, #148]	; (8002140 <HAL_RCC_ClockConfig+0x1b8>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 030f 	and.w	r3, r3, #15
 80020b0:	683a      	ldr	r2, [r7, #0]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d20c      	bcs.n	80020d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020b6:	4b22      	ldr	r3, [pc, #136]	; (8002140 <HAL_RCC_ClockConfig+0x1b8>)
 80020b8:	683a      	ldr	r2, [r7, #0]
 80020ba:	b2d2      	uxtb	r2, r2
 80020bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020be:	4b20      	ldr	r3, [pc, #128]	; (8002140 <HAL_RCC_ClockConfig+0x1b8>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 030f 	and.w	r3, r3, #15
 80020c6:	683a      	ldr	r2, [r7, #0]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d001      	beq.n	80020d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e032      	b.n	8002136 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0304 	and.w	r3, r3, #4
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d008      	beq.n	80020ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020dc:	4b19      	ldr	r3, [pc, #100]	; (8002144 <HAL_RCC_ClockConfig+0x1bc>)
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	4916      	ldr	r1, [pc, #88]	; (8002144 <HAL_RCC_ClockConfig+0x1bc>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0308 	and.w	r3, r3, #8
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d009      	beq.n	800210e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020fa:	4b12      	ldr	r3, [pc, #72]	; (8002144 <HAL_RCC_ClockConfig+0x1bc>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	490e      	ldr	r1, [pc, #56]	; (8002144 <HAL_RCC_ClockConfig+0x1bc>)
 800210a:	4313      	orrs	r3, r2
 800210c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800210e:	f000 f821 	bl	8002154 <HAL_RCC_GetSysClockFreq>
 8002112:	4601      	mov	r1, r0
 8002114:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <HAL_RCC_ClockConfig+0x1bc>)
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	091b      	lsrs	r3, r3, #4
 800211a:	f003 030f 	and.w	r3, r3, #15
 800211e:	4a0a      	ldr	r2, [pc, #40]	; (8002148 <HAL_RCC_ClockConfig+0x1c0>)
 8002120:	5cd3      	ldrb	r3, [r2, r3]
 8002122:	fa21 f303 	lsr.w	r3, r1, r3
 8002126:	4a09      	ldr	r2, [pc, #36]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 8002128:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800212a:	4b09      	ldr	r3, [pc, #36]	; (8002150 <HAL_RCC_ClockConfig+0x1c8>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4618      	mov	r0, r3
 8002130:	f7fe fe96 	bl	8000e60 <HAL_InitTick>

  return HAL_OK;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	40023c00 	.word	0x40023c00
 8002144:	40023800 	.word	0x40023800
 8002148:	08005f80 	.word	0x08005f80
 800214c:	20000000 	.word	0x20000000
 8002150:	20000004 	.word	0x20000004

08002154 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002154:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800215a:	2300      	movs	r3, #0
 800215c:	607b      	str	r3, [r7, #4]
 800215e:	2300      	movs	r3, #0
 8002160:	60fb      	str	r3, [r7, #12]
 8002162:	2300      	movs	r3, #0
 8002164:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002166:	2300      	movs	r3, #0
 8002168:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800216a:	4b63      	ldr	r3, [pc, #396]	; (80022f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f003 030c 	and.w	r3, r3, #12
 8002172:	2b04      	cmp	r3, #4
 8002174:	d007      	beq.n	8002186 <HAL_RCC_GetSysClockFreq+0x32>
 8002176:	2b08      	cmp	r3, #8
 8002178:	d008      	beq.n	800218c <HAL_RCC_GetSysClockFreq+0x38>
 800217a:	2b00      	cmp	r3, #0
 800217c:	f040 80b4 	bne.w	80022e8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002180:	4b5e      	ldr	r3, [pc, #376]	; (80022fc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002182:	60bb      	str	r3, [r7, #8]
       break;
 8002184:	e0b3      	b.n	80022ee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002186:	4b5e      	ldr	r3, [pc, #376]	; (8002300 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002188:	60bb      	str	r3, [r7, #8]
      break;
 800218a:	e0b0      	b.n	80022ee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800218c:	4b5a      	ldr	r3, [pc, #360]	; (80022f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002194:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002196:	4b58      	ldr	r3, [pc, #352]	; (80022f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d04a      	beq.n	8002238 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021a2:	4b55      	ldr	r3, [pc, #340]	; (80022f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	099b      	lsrs	r3, r3, #6
 80021a8:	f04f 0400 	mov.w	r4, #0
 80021ac:	f240 11ff 	movw	r1, #511	; 0x1ff
 80021b0:	f04f 0200 	mov.w	r2, #0
 80021b4:	ea03 0501 	and.w	r5, r3, r1
 80021b8:	ea04 0602 	and.w	r6, r4, r2
 80021bc:	4629      	mov	r1, r5
 80021be:	4632      	mov	r2, r6
 80021c0:	f04f 0300 	mov.w	r3, #0
 80021c4:	f04f 0400 	mov.w	r4, #0
 80021c8:	0154      	lsls	r4, r2, #5
 80021ca:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80021ce:	014b      	lsls	r3, r1, #5
 80021d0:	4619      	mov	r1, r3
 80021d2:	4622      	mov	r2, r4
 80021d4:	1b49      	subs	r1, r1, r5
 80021d6:	eb62 0206 	sbc.w	r2, r2, r6
 80021da:	f04f 0300 	mov.w	r3, #0
 80021de:	f04f 0400 	mov.w	r4, #0
 80021e2:	0194      	lsls	r4, r2, #6
 80021e4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80021e8:	018b      	lsls	r3, r1, #6
 80021ea:	1a5b      	subs	r3, r3, r1
 80021ec:	eb64 0402 	sbc.w	r4, r4, r2
 80021f0:	f04f 0100 	mov.w	r1, #0
 80021f4:	f04f 0200 	mov.w	r2, #0
 80021f8:	00e2      	lsls	r2, r4, #3
 80021fa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80021fe:	00d9      	lsls	r1, r3, #3
 8002200:	460b      	mov	r3, r1
 8002202:	4614      	mov	r4, r2
 8002204:	195b      	adds	r3, r3, r5
 8002206:	eb44 0406 	adc.w	r4, r4, r6
 800220a:	f04f 0100 	mov.w	r1, #0
 800220e:	f04f 0200 	mov.w	r2, #0
 8002212:	0262      	lsls	r2, r4, #9
 8002214:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002218:	0259      	lsls	r1, r3, #9
 800221a:	460b      	mov	r3, r1
 800221c:	4614      	mov	r4, r2
 800221e:	4618      	mov	r0, r3
 8002220:	4621      	mov	r1, r4
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f04f 0400 	mov.w	r4, #0
 8002228:	461a      	mov	r2, r3
 800222a:	4623      	mov	r3, r4
 800222c:	f7fd ffd8 	bl	80001e0 <__aeabi_uldivmod>
 8002230:	4603      	mov	r3, r0
 8002232:	460c      	mov	r4, r1
 8002234:	60fb      	str	r3, [r7, #12]
 8002236:	e049      	b.n	80022cc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002238:	4b2f      	ldr	r3, [pc, #188]	; (80022f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	099b      	lsrs	r3, r3, #6
 800223e:	f04f 0400 	mov.w	r4, #0
 8002242:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002246:	f04f 0200 	mov.w	r2, #0
 800224a:	ea03 0501 	and.w	r5, r3, r1
 800224e:	ea04 0602 	and.w	r6, r4, r2
 8002252:	4629      	mov	r1, r5
 8002254:	4632      	mov	r2, r6
 8002256:	f04f 0300 	mov.w	r3, #0
 800225a:	f04f 0400 	mov.w	r4, #0
 800225e:	0154      	lsls	r4, r2, #5
 8002260:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002264:	014b      	lsls	r3, r1, #5
 8002266:	4619      	mov	r1, r3
 8002268:	4622      	mov	r2, r4
 800226a:	1b49      	subs	r1, r1, r5
 800226c:	eb62 0206 	sbc.w	r2, r2, r6
 8002270:	f04f 0300 	mov.w	r3, #0
 8002274:	f04f 0400 	mov.w	r4, #0
 8002278:	0194      	lsls	r4, r2, #6
 800227a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800227e:	018b      	lsls	r3, r1, #6
 8002280:	1a5b      	subs	r3, r3, r1
 8002282:	eb64 0402 	sbc.w	r4, r4, r2
 8002286:	f04f 0100 	mov.w	r1, #0
 800228a:	f04f 0200 	mov.w	r2, #0
 800228e:	00e2      	lsls	r2, r4, #3
 8002290:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002294:	00d9      	lsls	r1, r3, #3
 8002296:	460b      	mov	r3, r1
 8002298:	4614      	mov	r4, r2
 800229a:	195b      	adds	r3, r3, r5
 800229c:	eb44 0406 	adc.w	r4, r4, r6
 80022a0:	f04f 0100 	mov.w	r1, #0
 80022a4:	f04f 0200 	mov.w	r2, #0
 80022a8:	02a2      	lsls	r2, r4, #10
 80022aa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80022ae:	0299      	lsls	r1, r3, #10
 80022b0:	460b      	mov	r3, r1
 80022b2:	4614      	mov	r4, r2
 80022b4:	4618      	mov	r0, r3
 80022b6:	4621      	mov	r1, r4
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f04f 0400 	mov.w	r4, #0
 80022be:	461a      	mov	r2, r3
 80022c0:	4623      	mov	r3, r4
 80022c2:	f7fd ff8d 	bl	80001e0 <__aeabi_uldivmod>
 80022c6:	4603      	mov	r3, r0
 80022c8:	460c      	mov	r4, r1
 80022ca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80022cc:	4b0a      	ldr	r3, [pc, #40]	; (80022f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	0c1b      	lsrs	r3, r3, #16
 80022d2:	f003 0303 	and.w	r3, r3, #3
 80022d6:	3301      	adds	r3, #1
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80022dc:	68fa      	ldr	r2, [r7, #12]
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e4:	60bb      	str	r3, [r7, #8]
      break;
 80022e6:	e002      	b.n	80022ee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022e8:	4b04      	ldr	r3, [pc, #16]	; (80022fc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80022ea:	60bb      	str	r3, [r7, #8]
      break;
 80022ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022ee:	68bb      	ldr	r3, [r7, #8]
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3714      	adds	r7, #20
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022f8:	40023800 	.word	0x40023800
 80022fc:	00f42400 	.word	0x00f42400
 8002300:	007a1200 	.word	0x007a1200

08002304 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002308:	4b03      	ldr	r3, [pc, #12]	; (8002318 <HAL_RCC_GetHCLKFreq+0x14>)
 800230a:	681b      	ldr	r3, [r3, #0]
}
 800230c:	4618      	mov	r0, r3
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	20000000 	.word	0x20000000

0800231c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002320:	f7ff fff0 	bl	8002304 <HAL_RCC_GetHCLKFreq>
 8002324:	4601      	mov	r1, r0
 8002326:	4b05      	ldr	r3, [pc, #20]	; (800233c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	0a9b      	lsrs	r3, r3, #10
 800232c:	f003 0307 	and.w	r3, r3, #7
 8002330:	4a03      	ldr	r2, [pc, #12]	; (8002340 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002332:	5cd3      	ldrb	r3, [r2, r3]
 8002334:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002338:	4618      	mov	r0, r3
 800233a:	bd80      	pop	{r7, pc}
 800233c:	40023800 	.word	0x40023800
 8002340:	08005f90 	.word	0x08005f90

08002344 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002348:	f7ff ffdc 	bl	8002304 <HAL_RCC_GetHCLKFreq>
 800234c:	4601      	mov	r1, r0
 800234e:	4b05      	ldr	r3, [pc, #20]	; (8002364 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	0b5b      	lsrs	r3, r3, #13
 8002354:	f003 0307 	and.w	r3, r3, #7
 8002358:	4a03      	ldr	r2, [pc, #12]	; (8002368 <HAL_RCC_GetPCLK2Freq+0x24>)
 800235a:	5cd3      	ldrb	r3, [r2, r3]
 800235c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002360:	4618      	mov	r0, r3
 8002362:	bd80      	pop	{r7, pc}
 8002364:	40023800 	.word	0x40023800
 8002368:	08005f90 	.word	0x08005f90

0800236c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	220f      	movs	r2, #15
 800237a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800237c:	4b12      	ldr	r3, [pc, #72]	; (80023c8 <HAL_RCC_GetClockConfig+0x5c>)
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f003 0203 	and.w	r2, r3, #3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002388:	4b0f      	ldr	r3, [pc, #60]	; (80023c8 <HAL_RCC_GetClockConfig+0x5c>)
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002394:	4b0c      	ldr	r3, [pc, #48]	; (80023c8 <HAL_RCC_GetClockConfig+0x5c>)
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80023a0:	4b09      	ldr	r3, [pc, #36]	; (80023c8 <HAL_RCC_GetClockConfig+0x5c>)
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	08db      	lsrs	r3, r3, #3
 80023a6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80023ae:	4b07      	ldr	r3, [pc, #28]	; (80023cc <HAL_RCC_GetClockConfig+0x60>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 020f 	and.w	r2, r3, #15
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	601a      	str	r2, [r3, #0]
}
 80023ba:	bf00      	nop
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	40023800 	.word	0x40023800
 80023cc:	40023c00 	.word	0x40023c00

080023d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e01d      	b.n	800241e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d106      	bne.n	80023fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 f815 	bl	8002426 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2202      	movs	r2, #2
 8002400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	3304      	adds	r3, #4
 800240c:	4619      	mov	r1, r3
 800240e:	4610      	mov	r0, r2
 8002410:	f000 f968 	bl	80026e4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002426:	b480      	push	{r7}
 8002428:	b083      	sub	sp, #12
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr

0800243a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800243a:	b480      	push	{r7}
 800243c:	b085      	sub	sp, #20
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	68da      	ldr	r2, [r3, #12]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f042 0201 	orr.w	r2, r2, #1
 8002450:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f003 0307 	and.w	r3, r3, #7
 800245c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2b06      	cmp	r3, #6
 8002462:	d007      	beq.n	8002474 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f042 0201 	orr.w	r2, r2, #1
 8002472:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3714      	adds	r7, #20
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr

08002482 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b082      	sub	sp, #8
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	f003 0302 	and.w	r3, r3, #2
 8002494:	2b02      	cmp	r3, #2
 8002496:	d122      	bne.n	80024de <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d11b      	bne.n	80024de <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f06f 0202 	mvn.w	r2, #2
 80024ae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	f003 0303 	and.w	r3, r3, #3
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d003      	beq.n	80024cc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f000 f8ee 	bl	80026a6 <HAL_TIM_IC_CaptureCallback>
 80024ca:	e005      	b.n	80024d8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f000 f8e0 	bl	8002692 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 f8f1 	bl	80026ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	f003 0304 	and.w	r3, r3, #4
 80024e8:	2b04      	cmp	r3, #4
 80024ea:	d122      	bne.n	8002532 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	f003 0304 	and.w	r3, r3, #4
 80024f6:	2b04      	cmp	r3, #4
 80024f8:	d11b      	bne.n	8002532 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f06f 0204 	mvn.w	r2, #4
 8002502:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2202      	movs	r2, #2
 8002508:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	699b      	ldr	r3, [r3, #24]
 8002510:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002514:	2b00      	cmp	r3, #0
 8002516:	d003      	beq.n	8002520 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f000 f8c4 	bl	80026a6 <HAL_TIM_IC_CaptureCallback>
 800251e:	e005      	b.n	800252c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f000 f8b6 	bl	8002692 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f000 f8c7 	bl	80026ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	691b      	ldr	r3, [r3, #16]
 8002538:	f003 0308 	and.w	r3, r3, #8
 800253c:	2b08      	cmp	r3, #8
 800253e:	d122      	bne.n	8002586 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	f003 0308 	and.w	r3, r3, #8
 800254a:	2b08      	cmp	r3, #8
 800254c:	d11b      	bne.n	8002586 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f06f 0208 	mvn.w	r2, #8
 8002556:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2204      	movs	r2, #4
 800255c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	69db      	ldr	r3, [r3, #28]
 8002564:	f003 0303 	and.w	r3, r3, #3
 8002568:	2b00      	cmp	r3, #0
 800256a:	d003      	beq.n	8002574 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f000 f89a 	bl	80026a6 <HAL_TIM_IC_CaptureCallback>
 8002572:	e005      	b.n	8002580 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f000 f88c 	bl	8002692 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 f89d 	bl	80026ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	691b      	ldr	r3, [r3, #16]
 800258c:	f003 0310 	and.w	r3, r3, #16
 8002590:	2b10      	cmp	r3, #16
 8002592:	d122      	bne.n	80025da <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	f003 0310 	and.w	r3, r3, #16
 800259e:	2b10      	cmp	r3, #16
 80025a0:	d11b      	bne.n	80025da <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f06f 0210 	mvn.w	r2, #16
 80025aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2208      	movs	r2, #8
 80025b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	69db      	ldr	r3, [r3, #28]
 80025b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d003      	beq.n	80025c8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f000 f870 	bl	80026a6 <HAL_TIM_IC_CaptureCallback>
 80025c6:	e005      	b.n	80025d4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f000 f862 	bl	8002692 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 f873 	bl	80026ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	691b      	ldr	r3, [r3, #16]
 80025e0:	f003 0301 	and.w	r3, r3, #1
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d10e      	bne.n	8002606 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d107      	bne.n	8002606 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f06f 0201 	mvn.w	r2, #1
 80025fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f7fe fb53 	bl	8000cac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002610:	2b80      	cmp	r3, #128	; 0x80
 8002612:	d10e      	bne.n	8002632 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800261e:	2b80      	cmp	r3, #128	; 0x80
 8002620:	d107      	bne.n	8002632 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800262a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f000 f8e3 	bl	80027f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800263c:	2b40      	cmp	r3, #64	; 0x40
 800263e:	d10e      	bne.n	800265e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800264a:	2b40      	cmp	r3, #64	; 0x40
 800264c:	d107      	bne.n	800265e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002656:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f000 f838 	bl	80026ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	691b      	ldr	r3, [r3, #16]
 8002664:	f003 0320 	and.w	r3, r3, #32
 8002668:	2b20      	cmp	r3, #32
 800266a:	d10e      	bne.n	800268a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	f003 0320 	and.w	r3, r3, #32
 8002676:	2b20      	cmp	r3, #32
 8002678:	d107      	bne.n	800268a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f06f 0220 	mvn.w	r2, #32
 8002682:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f000 f8ad 	bl	80027e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800268a:	bf00      	nop
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002692:	b480      	push	{r7}
 8002694:	b083      	sub	sp, #12
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800269a:	bf00      	nop
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr

080026a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026a6:	b480      	push	{r7}
 80026a8:	b083      	sub	sp, #12
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026ae:	bf00      	nop
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr

080026ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026ba:	b480      	push	{r7}
 80026bc:	b083      	sub	sp, #12
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026c2:	bf00      	nop
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr

080026ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026ce:	b480      	push	{r7}
 80026d0:	b083      	sub	sp, #12
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026d6:	bf00      	nop
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
	...

080026e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	4a34      	ldr	r2, [pc, #208]	; (80027c8 <TIM_Base_SetConfig+0xe4>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d00f      	beq.n	800271c <TIM_Base_SetConfig+0x38>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002702:	d00b      	beq.n	800271c <TIM_Base_SetConfig+0x38>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a31      	ldr	r2, [pc, #196]	; (80027cc <TIM_Base_SetConfig+0xe8>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d007      	beq.n	800271c <TIM_Base_SetConfig+0x38>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4a30      	ldr	r2, [pc, #192]	; (80027d0 <TIM_Base_SetConfig+0xec>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d003      	beq.n	800271c <TIM_Base_SetConfig+0x38>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4a2f      	ldr	r2, [pc, #188]	; (80027d4 <TIM_Base_SetConfig+0xf0>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d108      	bne.n	800272e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002722:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	4313      	orrs	r3, r2
 800272c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a25      	ldr	r2, [pc, #148]	; (80027c8 <TIM_Base_SetConfig+0xe4>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d01b      	beq.n	800276e <TIM_Base_SetConfig+0x8a>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800273c:	d017      	beq.n	800276e <TIM_Base_SetConfig+0x8a>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a22      	ldr	r2, [pc, #136]	; (80027cc <TIM_Base_SetConfig+0xe8>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d013      	beq.n	800276e <TIM_Base_SetConfig+0x8a>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a21      	ldr	r2, [pc, #132]	; (80027d0 <TIM_Base_SetConfig+0xec>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d00f      	beq.n	800276e <TIM_Base_SetConfig+0x8a>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a20      	ldr	r2, [pc, #128]	; (80027d4 <TIM_Base_SetConfig+0xf0>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d00b      	beq.n	800276e <TIM_Base_SetConfig+0x8a>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a1f      	ldr	r2, [pc, #124]	; (80027d8 <TIM_Base_SetConfig+0xf4>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d007      	beq.n	800276e <TIM_Base_SetConfig+0x8a>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a1e      	ldr	r2, [pc, #120]	; (80027dc <TIM_Base_SetConfig+0xf8>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d003      	beq.n	800276e <TIM_Base_SetConfig+0x8a>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a1d      	ldr	r2, [pc, #116]	; (80027e0 <TIM_Base_SetConfig+0xfc>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d108      	bne.n	8002780 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002774:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	4313      	orrs	r3, r2
 800277e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	4313      	orrs	r3, r2
 800278c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	689a      	ldr	r2, [r3, #8]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a08      	ldr	r2, [pc, #32]	; (80027c8 <TIM_Base_SetConfig+0xe4>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d103      	bne.n	80027b4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	691a      	ldr	r2, [r3, #16]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	615a      	str	r2, [r3, #20]
}
 80027ba:	bf00      	nop
 80027bc:	3714      	adds	r7, #20
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	40010000 	.word	0x40010000
 80027cc:	40000400 	.word	0x40000400
 80027d0:	40000800 	.word	0x40000800
 80027d4:	40000c00 	.word	0x40000c00
 80027d8:	40014000 	.word	0x40014000
 80027dc:	40014400 	.word	0x40014400
 80027e0:	40014800 	.word	0x40014800

080027e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e03f      	b.n	800289e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002824:	b2db      	uxtb	r3, r3
 8002826:	2b00      	cmp	r3, #0
 8002828:	d106      	bne.n	8002838 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f7fe fac4 	bl	8000dc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2224      	movs	r2, #36	; 0x24
 800283c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68da      	ldr	r2, [r3, #12]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800284e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f000 faf9 	bl	8002e48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	691a      	ldr	r2, [r3, #16]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002864:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	695a      	ldr	r2, [r3, #20]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002874:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68da      	ldr	r2, [r3, #12]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002884:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2220      	movs	r2, #32
 8002890:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2220      	movs	r2, #32
 8002898:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80028a6:	b480      	push	{r7}
 80028a8:	b085      	sub	sp, #20
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	60f8      	str	r0, [r7, #12]
 80028ae:	60b9      	str	r1, [r7, #8]
 80028b0:	4613      	mov	r3, r2
 80028b2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	2b20      	cmp	r3, #32
 80028be:	d130      	bne.n	8002922 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d002      	beq.n	80028cc <HAL_UART_Transmit_IT+0x26>
 80028c6:	88fb      	ldrh	r3, [r7, #6]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d101      	bne.n	80028d0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e029      	b.n	8002924 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d101      	bne.n	80028de <HAL_UART_Transmit_IT+0x38>
 80028da:	2302      	movs	r3, #2
 80028dc:	e022      	b.n	8002924 <HAL_UART_Transmit_IT+0x7e>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2201      	movs	r2, #1
 80028e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	68ba      	ldr	r2, [r7, #8]
 80028ea:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	88fa      	ldrh	r2, [r7, #6]
 80028f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	88fa      	ldrh	r2, [r7, #6]
 80028f6:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2200      	movs	r2, #0
 80028fc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2221      	movs	r2, #33	; 0x21
 8002902:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	68da      	ldr	r2, [r3, #12]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800291c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800291e:	2300      	movs	r3, #0
 8002920:	e000      	b.n	8002924 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8002922:	2302      	movs	r3, #2
  }
}
 8002924:	4618      	mov	r0, r3
 8002926:	3714      	adds	r7, #20
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002930:	b480      	push	{r7}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	4613      	mov	r3, r2
 800293c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b20      	cmp	r3, #32
 8002948:	d140      	bne.n	80029cc <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d002      	beq.n	8002956 <HAL_UART_Receive_IT+0x26>
 8002950:	88fb      	ldrh	r3, [r7, #6]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e039      	b.n	80029ce <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002960:	2b01      	cmp	r3, #1
 8002962:	d101      	bne.n	8002968 <HAL_UART_Receive_IT+0x38>
 8002964:	2302      	movs	r3, #2
 8002966:	e032      	b.n	80029ce <HAL_UART_Receive_IT+0x9e>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	68ba      	ldr	r2, [r7, #8]
 8002974:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	88fa      	ldrh	r2, [r7, #6]
 800297a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	88fa      	ldrh	r2, [r7, #6]
 8002980:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2222      	movs	r2, #34	; 0x22
 800298c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	68da      	ldr	r2, [r3, #12]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029a6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	695a      	ldr	r2, [r3, #20]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f042 0201 	orr.w	r2, r2, #1
 80029b6:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68da      	ldr	r2, [r3, #12]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f042 0220 	orr.w	r2, r2, #32
 80029c6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80029c8:	2300      	movs	r3, #0
 80029ca:	e000      	b.n	80029ce <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80029cc:	2302      	movs	r3, #2
  }
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3714      	adds	r7, #20
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
	...

080029dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b088      	sub	sp, #32
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80029fc:	2300      	movs	r3, #0
 80029fe:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002a00:	2300      	movs	r3, #0
 8002a02:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	f003 030f 	and.w	r3, r3, #15
 8002a0a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d10d      	bne.n	8002a2e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	f003 0320 	and.w	r3, r3, #32
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d008      	beq.n	8002a2e <HAL_UART_IRQHandler+0x52>
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	f003 0320 	and.w	r3, r3, #32
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d003      	beq.n	8002a2e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 f98c 	bl	8002d44 <UART_Receive_IT>
      return;
 8002a2c:	e0d1      	b.n	8002bd2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	f000 80b0 	beq.w	8002b96 <HAL_UART_IRQHandler+0x1ba>
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	f003 0301 	and.w	r3, r3, #1
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d105      	bne.n	8002a4c <HAL_UART_IRQHandler+0x70>
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	f000 80a5 	beq.w	8002b96 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00a      	beq.n	8002a6c <HAL_UART_IRQHandler+0x90>
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d005      	beq.n	8002a6c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a64:	f043 0201 	orr.w	r2, r3, #1
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	f003 0304 	and.w	r3, r3, #4
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00a      	beq.n	8002a8c <HAL_UART_IRQHandler+0xb0>
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	f003 0301 	and.w	r3, r3, #1
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d005      	beq.n	8002a8c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a84:	f043 0202 	orr.w	r2, r3, #2
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00a      	beq.n	8002aac <HAL_UART_IRQHandler+0xd0>
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	f003 0301 	and.w	r3, r3, #1
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d005      	beq.n	8002aac <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa4:	f043 0204 	orr.w	r2, r3, #4
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	f003 0308 	and.w	r3, r3, #8
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d00f      	beq.n	8002ad6 <HAL_UART_IRQHandler+0xfa>
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	f003 0320 	and.w	r3, r3, #32
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d104      	bne.n	8002aca <HAL_UART_IRQHandler+0xee>
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d005      	beq.n	8002ad6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ace:	f043 0208 	orr.w	r2, r3, #8
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d078      	beq.n	8002bd0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	f003 0320 	and.w	r3, r3, #32
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d007      	beq.n	8002af8 <HAL_UART_IRQHandler+0x11c>
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	f003 0320 	and.w	r3, r3, #32
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d002      	beq.n	8002af8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 f926 	bl	8002d44 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b02:	2b40      	cmp	r3, #64	; 0x40
 8002b04:	bf0c      	ite	eq
 8002b06:	2301      	moveq	r3, #1
 8002b08:	2300      	movne	r3, #0
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b12:	f003 0308 	and.w	r3, r3, #8
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d102      	bne.n	8002b20 <HAL_UART_IRQHandler+0x144>
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d031      	beq.n	8002b84 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f000 f86f 	bl	8002c04 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b30:	2b40      	cmp	r3, #64	; 0x40
 8002b32:	d123      	bne.n	8002b7c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	695a      	ldr	r2, [r3, #20]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b42:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d013      	beq.n	8002b74 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b50:	4a21      	ldr	r2, [pc, #132]	; (8002bd8 <HAL_UART_IRQHandler+0x1fc>)
 8002b52:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7fe fdcd 	bl	80016f8 <HAL_DMA_Abort_IT>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d016      	beq.n	8002b92 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b6e:	4610      	mov	r0, r2
 8002b70:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b72:	e00e      	b.n	8002b92 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f000 f83b 	bl	8002bf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b7a:	e00a      	b.n	8002b92 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f000 f837 	bl	8002bf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b82:	e006      	b.n	8002b92 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f000 f833 	bl	8002bf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002b90:	e01e      	b.n	8002bd0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b92:	bf00      	nop
    return;
 8002b94:	e01c      	b.n	8002bd0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d008      	beq.n	8002bb2 <HAL_UART_IRQHandler+0x1d6>
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d003      	beq.n	8002bb2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 f85c 	bl	8002c68 <UART_Transmit_IT>
    return;
 8002bb0:	e00f      	b.n	8002bd2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d00a      	beq.n	8002bd2 <HAL_UART_IRQHandler+0x1f6>
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d005      	beq.n	8002bd2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 f8a4 	bl	8002d14 <UART_EndTransmit_IT>
    return;
 8002bcc:	bf00      	nop
 8002bce:	e000      	b.n	8002bd2 <HAL_UART_IRQHandler+0x1f6>
    return;
 8002bd0:	bf00      	nop
  }
}
 8002bd2:	3720      	adds	r7, #32
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	08002c41 	.word	0x08002c41

08002bdc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002bf8:	bf00      	nop
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68da      	ldr	r2, [r3, #12]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002c1a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	695a      	ldr	r2, [r3, #20]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f022 0201 	bic.w	r2, r2, #1
 8002c2a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2220      	movs	r2, #32
 8002c30:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002c34:	bf00      	nop
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c4c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2200      	movs	r2, #0
 8002c52:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	f7ff ffc8 	bl	8002bf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c60:	bf00      	nop
 8002c62:	3710      	adds	r7, #16
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	2b21      	cmp	r3, #33	; 0x21
 8002c7a:	d144      	bne.n	8002d06 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c84:	d11a      	bne.n	8002cbc <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a1b      	ldr	r3, [r3, #32]
 8002c8a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	881b      	ldrh	r3, [r3, #0]
 8002c90:	461a      	mov	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c9a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	691b      	ldr	r3, [r3, #16]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d105      	bne.n	8002cb0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6a1b      	ldr	r3, [r3, #32]
 8002ca8:	1c9a      	adds	r2, r3, #2
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	621a      	str	r2, [r3, #32]
 8002cae:	e00e      	b.n	8002cce <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a1b      	ldr	r3, [r3, #32]
 8002cb4:	1c5a      	adds	r2, r3, #1
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	621a      	str	r2, [r3, #32]
 8002cba:	e008      	b.n	8002cce <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a1b      	ldr	r3, [r3, #32]
 8002cc0:	1c59      	adds	r1, r3, #1
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	6211      	str	r1, [r2, #32]
 8002cc6:	781a      	ldrb	r2, [r3, #0]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	4619      	mov	r1, r3
 8002cdc:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d10f      	bne.n	8002d02 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68da      	ldr	r2, [r3, #12]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cf0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68da      	ldr	r2, [r3, #12]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d00:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002d02:	2300      	movs	r3, #0
 8002d04:	e000      	b.n	8002d08 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002d06:	2302      	movs	r3, #2
  }
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3714      	adds	r7, #20
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68da      	ldr	r2, [r3, #12]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d2a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2220      	movs	r2, #32
 8002d30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f7ff ff51 	bl	8002bdc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3708      	adds	r7, #8
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	2b22      	cmp	r3, #34	; 0x22
 8002d56:	d171      	bne.n	8002e3c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d60:	d123      	bne.n	8002daa <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d66:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d10e      	bne.n	8002d8e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d86:	1c9a      	adds	r2, r3, #2
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	629a      	str	r2, [r3, #40]	; 0x28
 8002d8c:	e029      	b.n	8002de2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da2:	1c5a      	adds	r2, r3, #1
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	629a      	str	r2, [r3, #40]	; 0x28
 8002da8:	e01b      	b.n	8002de2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d10a      	bne.n	8002dc8 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	6858      	ldr	r0, [r3, #4]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dbc:	1c59      	adds	r1, r3, #1
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	6291      	str	r1, [r2, #40]	; 0x28
 8002dc2:	b2c2      	uxtb	r2, r0
 8002dc4:	701a      	strb	r2, [r3, #0]
 8002dc6:	e00c      	b.n	8002de2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	b2da      	uxtb	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd4:	1c58      	adds	r0, r3, #1
 8002dd6:	6879      	ldr	r1, [r7, #4]
 8002dd8:	6288      	str	r0, [r1, #40]	; 0x28
 8002dda:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002dde:	b2d2      	uxtb	r2, r2
 8002de0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	3b01      	subs	r3, #1
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	4619      	mov	r1, r3
 8002df0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d120      	bne.n	8002e38 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68da      	ldr	r2, [r3, #12]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f022 0220 	bic.w	r2, r2, #32
 8002e04:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68da      	ldr	r2, [r3, #12]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e14:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	695a      	ldr	r2, [r3, #20]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f022 0201 	bic.w	r2, r2, #1
 8002e24:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2220      	movs	r2, #32
 8002e2a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f7fd fd7a 	bl	8000928 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002e34:	2300      	movs	r3, #0
 8002e36:	e002      	b.n	8002e3e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	e000      	b.n	8002e3e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002e3c:	2302      	movs	r3, #2
  }
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3710      	adds	r7, #16
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
	...

08002e48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e4c:	b085      	sub	sp, #20
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	68da      	ldr	r2, [r3, #12]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	430a      	orrs	r2, r1
 8002e66:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689a      	ldr	r2, [r3, #8]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	431a      	orrs	r2, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	695b      	ldr	r3, [r3, #20]
 8002e76:	431a      	orrs	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	69db      	ldr	r3, [r3, #28]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002e8a:	f023 030c 	bic.w	r3, r3, #12
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	6812      	ldr	r2, [r2, #0]
 8002e92:	68f9      	ldr	r1, [r7, #12]
 8002e94:	430b      	orrs	r3, r1
 8002e96:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	699a      	ldr	r2, [r3, #24]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	69db      	ldr	r3, [r3, #28]
 8002eb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002eb6:	f040 818b 	bne.w	80031d0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4ac1      	ldr	r2, [pc, #772]	; (80031c4 <UART_SetConfig+0x37c>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d005      	beq.n	8002ed0 <UART_SetConfig+0x88>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4abf      	ldr	r2, [pc, #764]	; (80031c8 <UART_SetConfig+0x380>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	f040 80bd 	bne.w	800304a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ed0:	f7ff fa38 	bl	8002344 <HAL_RCC_GetPCLK2Freq>
 8002ed4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	461d      	mov	r5, r3
 8002eda:	f04f 0600 	mov.w	r6, #0
 8002ede:	46a8      	mov	r8, r5
 8002ee0:	46b1      	mov	r9, r6
 8002ee2:	eb18 0308 	adds.w	r3, r8, r8
 8002ee6:	eb49 0409 	adc.w	r4, r9, r9
 8002eea:	4698      	mov	r8, r3
 8002eec:	46a1      	mov	r9, r4
 8002eee:	eb18 0805 	adds.w	r8, r8, r5
 8002ef2:	eb49 0906 	adc.w	r9, r9, r6
 8002ef6:	f04f 0100 	mov.w	r1, #0
 8002efa:	f04f 0200 	mov.w	r2, #0
 8002efe:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002f02:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002f06:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002f0a:	4688      	mov	r8, r1
 8002f0c:	4691      	mov	r9, r2
 8002f0e:	eb18 0005 	adds.w	r0, r8, r5
 8002f12:	eb49 0106 	adc.w	r1, r9, r6
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	461d      	mov	r5, r3
 8002f1c:	f04f 0600 	mov.w	r6, #0
 8002f20:	196b      	adds	r3, r5, r5
 8002f22:	eb46 0406 	adc.w	r4, r6, r6
 8002f26:	461a      	mov	r2, r3
 8002f28:	4623      	mov	r3, r4
 8002f2a:	f7fd f959 	bl	80001e0 <__aeabi_uldivmod>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	460c      	mov	r4, r1
 8002f32:	461a      	mov	r2, r3
 8002f34:	4ba5      	ldr	r3, [pc, #660]	; (80031cc <UART_SetConfig+0x384>)
 8002f36:	fba3 2302 	umull	r2, r3, r3, r2
 8002f3a:	095b      	lsrs	r3, r3, #5
 8002f3c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	461d      	mov	r5, r3
 8002f44:	f04f 0600 	mov.w	r6, #0
 8002f48:	46a9      	mov	r9, r5
 8002f4a:	46b2      	mov	sl, r6
 8002f4c:	eb19 0309 	adds.w	r3, r9, r9
 8002f50:	eb4a 040a 	adc.w	r4, sl, sl
 8002f54:	4699      	mov	r9, r3
 8002f56:	46a2      	mov	sl, r4
 8002f58:	eb19 0905 	adds.w	r9, r9, r5
 8002f5c:	eb4a 0a06 	adc.w	sl, sl, r6
 8002f60:	f04f 0100 	mov.w	r1, #0
 8002f64:	f04f 0200 	mov.w	r2, #0
 8002f68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f6c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002f70:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002f74:	4689      	mov	r9, r1
 8002f76:	4692      	mov	sl, r2
 8002f78:	eb19 0005 	adds.w	r0, r9, r5
 8002f7c:	eb4a 0106 	adc.w	r1, sl, r6
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	461d      	mov	r5, r3
 8002f86:	f04f 0600 	mov.w	r6, #0
 8002f8a:	196b      	adds	r3, r5, r5
 8002f8c:	eb46 0406 	adc.w	r4, r6, r6
 8002f90:	461a      	mov	r2, r3
 8002f92:	4623      	mov	r3, r4
 8002f94:	f7fd f924 	bl	80001e0 <__aeabi_uldivmod>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	460c      	mov	r4, r1
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	4b8b      	ldr	r3, [pc, #556]	; (80031cc <UART_SetConfig+0x384>)
 8002fa0:	fba3 1302 	umull	r1, r3, r3, r2
 8002fa4:	095b      	lsrs	r3, r3, #5
 8002fa6:	2164      	movs	r1, #100	; 0x64
 8002fa8:	fb01 f303 	mul.w	r3, r1, r3
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	3332      	adds	r3, #50	; 0x32
 8002fb2:	4a86      	ldr	r2, [pc, #536]	; (80031cc <UART_SetConfig+0x384>)
 8002fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb8:	095b      	lsrs	r3, r3, #5
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002fc0:	4498      	add	r8, r3
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	461d      	mov	r5, r3
 8002fc6:	f04f 0600 	mov.w	r6, #0
 8002fca:	46a9      	mov	r9, r5
 8002fcc:	46b2      	mov	sl, r6
 8002fce:	eb19 0309 	adds.w	r3, r9, r9
 8002fd2:	eb4a 040a 	adc.w	r4, sl, sl
 8002fd6:	4699      	mov	r9, r3
 8002fd8:	46a2      	mov	sl, r4
 8002fda:	eb19 0905 	adds.w	r9, r9, r5
 8002fde:	eb4a 0a06 	adc.w	sl, sl, r6
 8002fe2:	f04f 0100 	mov.w	r1, #0
 8002fe6:	f04f 0200 	mov.w	r2, #0
 8002fea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002fee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002ff2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002ff6:	4689      	mov	r9, r1
 8002ff8:	4692      	mov	sl, r2
 8002ffa:	eb19 0005 	adds.w	r0, r9, r5
 8002ffe:	eb4a 0106 	adc.w	r1, sl, r6
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	461d      	mov	r5, r3
 8003008:	f04f 0600 	mov.w	r6, #0
 800300c:	196b      	adds	r3, r5, r5
 800300e:	eb46 0406 	adc.w	r4, r6, r6
 8003012:	461a      	mov	r2, r3
 8003014:	4623      	mov	r3, r4
 8003016:	f7fd f8e3 	bl	80001e0 <__aeabi_uldivmod>
 800301a:	4603      	mov	r3, r0
 800301c:	460c      	mov	r4, r1
 800301e:	461a      	mov	r2, r3
 8003020:	4b6a      	ldr	r3, [pc, #424]	; (80031cc <UART_SetConfig+0x384>)
 8003022:	fba3 1302 	umull	r1, r3, r3, r2
 8003026:	095b      	lsrs	r3, r3, #5
 8003028:	2164      	movs	r1, #100	; 0x64
 800302a:	fb01 f303 	mul.w	r3, r1, r3
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	00db      	lsls	r3, r3, #3
 8003032:	3332      	adds	r3, #50	; 0x32
 8003034:	4a65      	ldr	r2, [pc, #404]	; (80031cc <UART_SetConfig+0x384>)
 8003036:	fba2 2303 	umull	r2, r3, r2, r3
 800303a:	095b      	lsrs	r3, r3, #5
 800303c:	f003 0207 	and.w	r2, r3, #7
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4442      	add	r2, r8
 8003046:	609a      	str	r2, [r3, #8]
 8003048:	e26f      	b.n	800352a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800304a:	f7ff f967 	bl	800231c <HAL_RCC_GetPCLK1Freq>
 800304e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	461d      	mov	r5, r3
 8003054:	f04f 0600 	mov.w	r6, #0
 8003058:	46a8      	mov	r8, r5
 800305a:	46b1      	mov	r9, r6
 800305c:	eb18 0308 	adds.w	r3, r8, r8
 8003060:	eb49 0409 	adc.w	r4, r9, r9
 8003064:	4698      	mov	r8, r3
 8003066:	46a1      	mov	r9, r4
 8003068:	eb18 0805 	adds.w	r8, r8, r5
 800306c:	eb49 0906 	adc.w	r9, r9, r6
 8003070:	f04f 0100 	mov.w	r1, #0
 8003074:	f04f 0200 	mov.w	r2, #0
 8003078:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800307c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003080:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003084:	4688      	mov	r8, r1
 8003086:	4691      	mov	r9, r2
 8003088:	eb18 0005 	adds.w	r0, r8, r5
 800308c:	eb49 0106 	adc.w	r1, r9, r6
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	461d      	mov	r5, r3
 8003096:	f04f 0600 	mov.w	r6, #0
 800309a:	196b      	adds	r3, r5, r5
 800309c:	eb46 0406 	adc.w	r4, r6, r6
 80030a0:	461a      	mov	r2, r3
 80030a2:	4623      	mov	r3, r4
 80030a4:	f7fd f89c 	bl	80001e0 <__aeabi_uldivmod>
 80030a8:	4603      	mov	r3, r0
 80030aa:	460c      	mov	r4, r1
 80030ac:	461a      	mov	r2, r3
 80030ae:	4b47      	ldr	r3, [pc, #284]	; (80031cc <UART_SetConfig+0x384>)
 80030b0:	fba3 2302 	umull	r2, r3, r3, r2
 80030b4:	095b      	lsrs	r3, r3, #5
 80030b6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	461d      	mov	r5, r3
 80030be:	f04f 0600 	mov.w	r6, #0
 80030c2:	46a9      	mov	r9, r5
 80030c4:	46b2      	mov	sl, r6
 80030c6:	eb19 0309 	adds.w	r3, r9, r9
 80030ca:	eb4a 040a 	adc.w	r4, sl, sl
 80030ce:	4699      	mov	r9, r3
 80030d0:	46a2      	mov	sl, r4
 80030d2:	eb19 0905 	adds.w	r9, r9, r5
 80030d6:	eb4a 0a06 	adc.w	sl, sl, r6
 80030da:	f04f 0100 	mov.w	r1, #0
 80030de:	f04f 0200 	mov.w	r2, #0
 80030e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030e6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80030ea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80030ee:	4689      	mov	r9, r1
 80030f0:	4692      	mov	sl, r2
 80030f2:	eb19 0005 	adds.w	r0, r9, r5
 80030f6:	eb4a 0106 	adc.w	r1, sl, r6
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	461d      	mov	r5, r3
 8003100:	f04f 0600 	mov.w	r6, #0
 8003104:	196b      	adds	r3, r5, r5
 8003106:	eb46 0406 	adc.w	r4, r6, r6
 800310a:	461a      	mov	r2, r3
 800310c:	4623      	mov	r3, r4
 800310e:	f7fd f867 	bl	80001e0 <__aeabi_uldivmod>
 8003112:	4603      	mov	r3, r0
 8003114:	460c      	mov	r4, r1
 8003116:	461a      	mov	r2, r3
 8003118:	4b2c      	ldr	r3, [pc, #176]	; (80031cc <UART_SetConfig+0x384>)
 800311a:	fba3 1302 	umull	r1, r3, r3, r2
 800311e:	095b      	lsrs	r3, r3, #5
 8003120:	2164      	movs	r1, #100	; 0x64
 8003122:	fb01 f303 	mul.w	r3, r1, r3
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	00db      	lsls	r3, r3, #3
 800312a:	3332      	adds	r3, #50	; 0x32
 800312c:	4a27      	ldr	r2, [pc, #156]	; (80031cc <UART_SetConfig+0x384>)
 800312e:	fba2 2303 	umull	r2, r3, r2, r3
 8003132:	095b      	lsrs	r3, r3, #5
 8003134:	005b      	lsls	r3, r3, #1
 8003136:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800313a:	4498      	add	r8, r3
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	461d      	mov	r5, r3
 8003140:	f04f 0600 	mov.w	r6, #0
 8003144:	46a9      	mov	r9, r5
 8003146:	46b2      	mov	sl, r6
 8003148:	eb19 0309 	adds.w	r3, r9, r9
 800314c:	eb4a 040a 	adc.w	r4, sl, sl
 8003150:	4699      	mov	r9, r3
 8003152:	46a2      	mov	sl, r4
 8003154:	eb19 0905 	adds.w	r9, r9, r5
 8003158:	eb4a 0a06 	adc.w	sl, sl, r6
 800315c:	f04f 0100 	mov.w	r1, #0
 8003160:	f04f 0200 	mov.w	r2, #0
 8003164:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003168:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800316c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003170:	4689      	mov	r9, r1
 8003172:	4692      	mov	sl, r2
 8003174:	eb19 0005 	adds.w	r0, r9, r5
 8003178:	eb4a 0106 	adc.w	r1, sl, r6
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	461d      	mov	r5, r3
 8003182:	f04f 0600 	mov.w	r6, #0
 8003186:	196b      	adds	r3, r5, r5
 8003188:	eb46 0406 	adc.w	r4, r6, r6
 800318c:	461a      	mov	r2, r3
 800318e:	4623      	mov	r3, r4
 8003190:	f7fd f826 	bl	80001e0 <__aeabi_uldivmod>
 8003194:	4603      	mov	r3, r0
 8003196:	460c      	mov	r4, r1
 8003198:	461a      	mov	r2, r3
 800319a:	4b0c      	ldr	r3, [pc, #48]	; (80031cc <UART_SetConfig+0x384>)
 800319c:	fba3 1302 	umull	r1, r3, r3, r2
 80031a0:	095b      	lsrs	r3, r3, #5
 80031a2:	2164      	movs	r1, #100	; 0x64
 80031a4:	fb01 f303 	mul.w	r3, r1, r3
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	00db      	lsls	r3, r3, #3
 80031ac:	3332      	adds	r3, #50	; 0x32
 80031ae:	4a07      	ldr	r2, [pc, #28]	; (80031cc <UART_SetConfig+0x384>)
 80031b0:	fba2 2303 	umull	r2, r3, r2, r3
 80031b4:	095b      	lsrs	r3, r3, #5
 80031b6:	f003 0207 	and.w	r2, r3, #7
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4442      	add	r2, r8
 80031c0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80031c2:	e1b2      	b.n	800352a <UART_SetConfig+0x6e2>
 80031c4:	40011000 	.word	0x40011000
 80031c8:	40011400 	.word	0x40011400
 80031cc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4ad7      	ldr	r2, [pc, #860]	; (8003534 <UART_SetConfig+0x6ec>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d005      	beq.n	80031e6 <UART_SetConfig+0x39e>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4ad6      	ldr	r2, [pc, #856]	; (8003538 <UART_SetConfig+0x6f0>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	f040 80d1 	bne.w	8003388 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80031e6:	f7ff f8ad 	bl	8002344 <HAL_RCC_GetPCLK2Freq>
 80031ea:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	469a      	mov	sl, r3
 80031f0:	f04f 0b00 	mov.w	fp, #0
 80031f4:	46d0      	mov	r8, sl
 80031f6:	46d9      	mov	r9, fp
 80031f8:	eb18 0308 	adds.w	r3, r8, r8
 80031fc:	eb49 0409 	adc.w	r4, r9, r9
 8003200:	4698      	mov	r8, r3
 8003202:	46a1      	mov	r9, r4
 8003204:	eb18 080a 	adds.w	r8, r8, sl
 8003208:	eb49 090b 	adc.w	r9, r9, fp
 800320c:	f04f 0100 	mov.w	r1, #0
 8003210:	f04f 0200 	mov.w	r2, #0
 8003214:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003218:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800321c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003220:	4688      	mov	r8, r1
 8003222:	4691      	mov	r9, r2
 8003224:	eb1a 0508 	adds.w	r5, sl, r8
 8003228:	eb4b 0609 	adc.w	r6, fp, r9
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	4619      	mov	r1, r3
 8003232:	f04f 0200 	mov.w	r2, #0
 8003236:	f04f 0300 	mov.w	r3, #0
 800323a:	f04f 0400 	mov.w	r4, #0
 800323e:	0094      	lsls	r4, r2, #2
 8003240:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003244:	008b      	lsls	r3, r1, #2
 8003246:	461a      	mov	r2, r3
 8003248:	4623      	mov	r3, r4
 800324a:	4628      	mov	r0, r5
 800324c:	4631      	mov	r1, r6
 800324e:	f7fc ffc7 	bl	80001e0 <__aeabi_uldivmod>
 8003252:	4603      	mov	r3, r0
 8003254:	460c      	mov	r4, r1
 8003256:	461a      	mov	r2, r3
 8003258:	4bb8      	ldr	r3, [pc, #736]	; (800353c <UART_SetConfig+0x6f4>)
 800325a:	fba3 2302 	umull	r2, r3, r3, r2
 800325e:	095b      	lsrs	r3, r3, #5
 8003260:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	469b      	mov	fp, r3
 8003268:	f04f 0c00 	mov.w	ip, #0
 800326c:	46d9      	mov	r9, fp
 800326e:	46e2      	mov	sl, ip
 8003270:	eb19 0309 	adds.w	r3, r9, r9
 8003274:	eb4a 040a 	adc.w	r4, sl, sl
 8003278:	4699      	mov	r9, r3
 800327a:	46a2      	mov	sl, r4
 800327c:	eb19 090b 	adds.w	r9, r9, fp
 8003280:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003284:	f04f 0100 	mov.w	r1, #0
 8003288:	f04f 0200 	mov.w	r2, #0
 800328c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003290:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003294:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003298:	4689      	mov	r9, r1
 800329a:	4692      	mov	sl, r2
 800329c:	eb1b 0509 	adds.w	r5, fp, r9
 80032a0:	eb4c 060a 	adc.w	r6, ip, sl
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	4619      	mov	r1, r3
 80032aa:	f04f 0200 	mov.w	r2, #0
 80032ae:	f04f 0300 	mov.w	r3, #0
 80032b2:	f04f 0400 	mov.w	r4, #0
 80032b6:	0094      	lsls	r4, r2, #2
 80032b8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80032bc:	008b      	lsls	r3, r1, #2
 80032be:	461a      	mov	r2, r3
 80032c0:	4623      	mov	r3, r4
 80032c2:	4628      	mov	r0, r5
 80032c4:	4631      	mov	r1, r6
 80032c6:	f7fc ff8b 	bl	80001e0 <__aeabi_uldivmod>
 80032ca:	4603      	mov	r3, r0
 80032cc:	460c      	mov	r4, r1
 80032ce:	461a      	mov	r2, r3
 80032d0:	4b9a      	ldr	r3, [pc, #616]	; (800353c <UART_SetConfig+0x6f4>)
 80032d2:	fba3 1302 	umull	r1, r3, r3, r2
 80032d6:	095b      	lsrs	r3, r3, #5
 80032d8:	2164      	movs	r1, #100	; 0x64
 80032da:	fb01 f303 	mul.w	r3, r1, r3
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	011b      	lsls	r3, r3, #4
 80032e2:	3332      	adds	r3, #50	; 0x32
 80032e4:	4a95      	ldr	r2, [pc, #596]	; (800353c <UART_SetConfig+0x6f4>)
 80032e6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ea:	095b      	lsrs	r3, r3, #5
 80032ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032f0:	4498      	add	r8, r3
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	469b      	mov	fp, r3
 80032f6:	f04f 0c00 	mov.w	ip, #0
 80032fa:	46d9      	mov	r9, fp
 80032fc:	46e2      	mov	sl, ip
 80032fe:	eb19 0309 	adds.w	r3, r9, r9
 8003302:	eb4a 040a 	adc.w	r4, sl, sl
 8003306:	4699      	mov	r9, r3
 8003308:	46a2      	mov	sl, r4
 800330a:	eb19 090b 	adds.w	r9, r9, fp
 800330e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003312:	f04f 0100 	mov.w	r1, #0
 8003316:	f04f 0200 	mov.w	r2, #0
 800331a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800331e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003322:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003326:	4689      	mov	r9, r1
 8003328:	4692      	mov	sl, r2
 800332a:	eb1b 0509 	adds.w	r5, fp, r9
 800332e:	eb4c 060a 	adc.w	r6, ip, sl
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	4619      	mov	r1, r3
 8003338:	f04f 0200 	mov.w	r2, #0
 800333c:	f04f 0300 	mov.w	r3, #0
 8003340:	f04f 0400 	mov.w	r4, #0
 8003344:	0094      	lsls	r4, r2, #2
 8003346:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800334a:	008b      	lsls	r3, r1, #2
 800334c:	461a      	mov	r2, r3
 800334e:	4623      	mov	r3, r4
 8003350:	4628      	mov	r0, r5
 8003352:	4631      	mov	r1, r6
 8003354:	f7fc ff44 	bl	80001e0 <__aeabi_uldivmod>
 8003358:	4603      	mov	r3, r0
 800335a:	460c      	mov	r4, r1
 800335c:	461a      	mov	r2, r3
 800335e:	4b77      	ldr	r3, [pc, #476]	; (800353c <UART_SetConfig+0x6f4>)
 8003360:	fba3 1302 	umull	r1, r3, r3, r2
 8003364:	095b      	lsrs	r3, r3, #5
 8003366:	2164      	movs	r1, #100	; 0x64
 8003368:	fb01 f303 	mul.w	r3, r1, r3
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	011b      	lsls	r3, r3, #4
 8003370:	3332      	adds	r3, #50	; 0x32
 8003372:	4a72      	ldr	r2, [pc, #456]	; (800353c <UART_SetConfig+0x6f4>)
 8003374:	fba2 2303 	umull	r2, r3, r2, r3
 8003378:	095b      	lsrs	r3, r3, #5
 800337a:	f003 020f 	and.w	r2, r3, #15
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4442      	add	r2, r8
 8003384:	609a      	str	r2, [r3, #8]
 8003386:	e0d0      	b.n	800352a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003388:	f7fe ffc8 	bl	800231c <HAL_RCC_GetPCLK1Freq>
 800338c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	469a      	mov	sl, r3
 8003392:	f04f 0b00 	mov.w	fp, #0
 8003396:	46d0      	mov	r8, sl
 8003398:	46d9      	mov	r9, fp
 800339a:	eb18 0308 	adds.w	r3, r8, r8
 800339e:	eb49 0409 	adc.w	r4, r9, r9
 80033a2:	4698      	mov	r8, r3
 80033a4:	46a1      	mov	r9, r4
 80033a6:	eb18 080a 	adds.w	r8, r8, sl
 80033aa:	eb49 090b 	adc.w	r9, r9, fp
 80033ae:	f04f 0100 	mov.w	r1, #0
 80033b2:	f04f 0200 	mov.w	r2, #0
 80033b6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80033ba:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80033be:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80033c2:	4688      	mov	r8, r1
 80033c4:	4691      	mov	r9, r2
 80033c6:	eb1a 0508 	adds.w	r5, sl, r8
 80033ca:	eb4b 0609 	adc.w	r6, fp, r9
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	4619      	mov	r1, r3
 80033d4:	f04f 0200 	mov.w	r2, #0
 80033d8:	f04f 0300 	mov.w	r3, #0
 80033dc:	f04f 0400 	mov.w	r4, #0
 80033e0:	0094      	lsls	r4, r2, #2
 80033e2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80033e6:	008b      	lsls	r3, r1, #2
 80033e8:	461a      	mov	r2, r3
 80033ea:	4623      	mov	r3, r4
 80033ec:	4628      	mov	r0, r5
 80033ee:	4631      	mov	r1, r6
 80033f0:	f7fc fef6 	bl	80001e0 <__aeabi_uldivmod>
 80033f4:	4603      	mov	r3, r0
 80033f6:	460c      	mov	r4, r1
 80033f8:	461a      	mov	r2, r3
 80033fa:	4b50      	ldr	r3, [pc, #320]	; (800353c <UART_SetConfig+0x6f4>)
 80033fc:	fba3 2302 	umull	r2, r3, r3, r2
 8003400:	095b      	lsrs	r3, r3, #5
 8003402:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	469b      	mov	fp, r3
 800340a:	f04f 0c00 	mov.w	ip, #0
 800340e:	46d9      	mov	r9, fp
 8003410:	46e2      	mov	sl, ip
 8003412:	eb19 0309 	adds.w	r3, r9, r9
 8003416:	eb4a 040a 	adc.w	r4, sl, sl
 800341a:	4699      	mov	r9, r3
 800341c:	46a2      	mov	sl, r4
 800341e:	eb19 090b 	adds.w	r9, r9, fp
 8003422:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003426:	f04f 0100 	mov.w	r1, #0
 800342a:	f04f 0200 	mov.w	r2, #0
 800342e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003432:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003436:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800343a:	4689      	mov	r9, r1
 800343c:	4692      	mov	sl, r2
 800343e:	eb1b 0509 	adds.w	r5, fp, r9
 8003442:	eb4c 060a 	adc.w	r6, ip, sl
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	4619      	mov	r1, r3
 800344c:	f04f 0200 	mov.w	r2, #0
 8003450:	f04f 0300 	mov.w	r3, #0
 8003454:	f04f 0400 	mov.w	r4, #0
 8003458:	0094      	lsls	r4, r2, #2
 800345a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800345e:	008b      	lsls	r3, r1, #2
 8003460:	461a      	mov	r2, r3
 8003462:	4623      	mov	r3, r4
 8003464:	4628      	mov	r0, r5
 8003466:	4631      	mov	r1, r6
 8003468:	f7fc feba 	bl	80001e0 <__aeabi_uldivmod>
 800346c:	4603      	mov	r3, r0
 800346e:	460c      	mov	r4, r1
 8003470:	461a      	mov	r2, r3
 8003472:	4b32      	ldr	r3, [pc, #200]	; (800353c <UART_SetConfig+0x6f4>)
 8003474:	fba3 1302 	umull	r1, r3, r3, r2
 8003478:	095b      	lsrs	r3, r3, #5
 800347a:	2164      	movs	r1, #100	; 0x64
 800347c:	fb01 f303 	mul.w	r3, r1, r3
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	011b      	lsls	r3, r3, #4
 8003484:	3332      	adds	r3, #50	; 0x32
 8003486:	4a2d      	ldr	r2, [pc, #180]	; (800353c <UART_SetConfig+0x6f4>)
 8003488:	fba2 2303 	umull	r2, r3, r2, r3
 800348c:	095b      	lsrs	r3, r3, #5
 800348e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003492:	4498      	add	r8, r3
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	469b      	mov	fp, r3
 8003498:	f04f 0c00 	mov.w	ip, #0
 800349c:	46d9      	mov	r9, fp
 800349e:	46e2      	mov	sl, ip
 80034a0:	eb19 0309 	adds.w	r3, r9, r9
 80034a4:	eb4a 040a 	adc.w	r4, sl, sl
 80034a8:	4699      	mov	r9, r3
 80034aa:	46a2      	mov	sl, r4
 80034ac:	eb19 090b 	adds.w	r9, r9, fp
 80034b0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80034b4:	f04f 0100 	mov.w	r1, #0
 80034b8:	f04f 0200 	mov.w	r2, #0
 80034bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034c0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80034c4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80034c8:	4689      	mov	r9, r1
 80034ca:	4692      	mov	sl, r2
 80034cc:	eb1b 0509 	adds.w	r5, fp, r9
 80034d0:	eb4c 060a 	adc.w	r6, ip, sl
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	4619      	mov	r1, r3
 80034da:	f04f 0200 	mov.w	r2, #0
 80034de:	f04f 0300 	mov.w	r3, #0
 80034e2:	f04f 0400 	mov.w	r4, #0
 80034e6:	0094      	lsls	r4, r2, #2
 80034e8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80034ec:	008b      	lsls	r3, r1, #2
 80034ee:	461a      	mov	r2, r3
 80034f0:	4623      	mov	r3, r4
 80034f2:	4628      	mov	r0, r5
 80034f4:	4631      	mov	r1, r6
 80034f6:	f7fc fe73 	bl	80001e0 <__aeabi_uldivmod>
 80034fa:	4603      	mov	r3, r0
 80034fc:	460c      	mov	r4, r1
 80034fe:	461a      	mov	r2, r3
 8003500:	4b0e      	ldr	r3, [pc, #56]	; (800353c <UART_SetConfig+0x6f4>)
 8003502:	fba3 1302 	umull	r1, r3, r3, r2
 8003506:	095b      	lsrs	r3, r3, #5
 8003508:	2164      	movs	r1, #100	; 0x64
 800350a:	fb01 f303 	mul.w	r3, r1, r3
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	011b      	lsls	r3, r3, #4
 8003512:	3332      	adds	r3, #50	; 0x32
 8003514:	4a09      	ldr	r2, [pc, #36]	; (800353c <UART_SetConfig+0x6f4>)
 8003516:	fba2 2303 	umull	r2, r3, r2, r3
 800351a:	095b      	lsrs	r3, r3, #5
 800351c:	f003 020f 	and.w	r2, r3, #15
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4442      	add	r2, r8
 8003526:	609a      	str	r2, [r3, #8]
}
 8003528:	e7ff      	b.n	800352a <UART_SetConfig+0x6e2>
 800352a:	bf00      	nop
 800352c:	3714      	adds	r7, #20
 800352e:	46bd      	mov	sp, r7
 8003530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003534:	40011000 	.word	0x40011000
 8003538:	40011400 	.word	0x40011400
 800353c:	51eb851f 	.word	0x51eb851f

08003540 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003540:	b480      	push	{r7}
 8003542:	b085      	sub	sp, #20
 8003544:	af00      	add	r7, sp, #0
 8003546:	4603      	mov	r3, r0
 8003548:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800354a:	2300      	movs	r3, #0
 800354c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800354e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003552:	2b84      	cmp	r3, #132	; 0x84
 8003554:	d005      	beq.n	8003562 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003556:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	4413      	add	r3, r2
 800355e:	3303      	adds	r3, #3
 8003560:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003562:	68fb      	ldr	r3, [r7, #12]
}
 8003564:	4618      	mov	r0, r3
 8003566:	3714      	adds	r7, #20
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003576:	f3ef 8305 	mrs	r3, IPSR
 800357a:	607b      	str	r3, [r7, #4]
  return(result);
 800357c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800357e:	2b00      	cmp	r3, #0
 8003580:	bf14      	ite	ne
 8003582:	2301      	movne	r3, #1
 8003584:	2300      	moveq	r3, #0
 8003586:	b2db      	uxtb	r3, r3
}
 8003588:	4618      	mov	r0, r3
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003598:	f001 f9f6 	bl	8004988 <vTaskStartScheduler>
  
  return osOK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80035a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035a4:	b089      	sub	sp, #36	; 0x24
 80035a6:	af04      	add	r7, sp, #16
 80035a8:	6078      	str	r0, [r7, #4]
 80035aa:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	695b      	ldr	r3, [r3, #20]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d020      	beq.n	80035f6 <osThreadCreate+0x54>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d01c      	beq.n	80035f6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685c      	ldr	r4, [r3, #4]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681d      	ldr	r5, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	691e      	ldr	r6, [r3, #16]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7ff ffb6 	bl	8003540 <makeFreeRtosPriority>
 80035d4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	695b      	ldr	r3, [r3, #20]
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80035de:	9202      	str	r2, [sp, #8]
 80035e0:	9301      	str	r3, [sp, #4]
 80035e2:	9100      	str	r1, [sp, #0]
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	4632      	mov	r2, r6
 80035e8:	4629      	mov	r1, r5
 80035ea:	4620      	mov	r0, r4
 80035ec:	f001 f811 	bl	8004612 <xTaskCreateStatic>
 80035f0:	4603      	mov	r3, r0
 80035f2:	60fb      	str	r3, [r7, #12]
 80035f4:	e01c      	b.n	8003630 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685c      	ldr	r4, [r3, #4]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003602:	b29e      	uxth	r6, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800360a:	4618      	mov	r0, r3
 800360c:	f7ff ff98 	bl	8003540 <makeFreeRtosPriority>
 8003610:	4602      	mov	r2, r0
 8003612:	f107 030c 	add.w	r3, r7, #12
 8003616:	9301      	str	r3, [sp, #4]
 8003618:	9200      	str	r2, [sp, #0]
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	4632      	mov	r2, r6
 800361e:	4629      	mov	r1, r5
 8003620:	4620      	mov	r0, r4
 8003622:	f001 f84f 	bl	80046c4 <xTaskCreate>
 8003626:	4603      	mov	r3, r0
 8003628:	2b01      	cmp	r3, #1
 800362a:	d001      	beq.n	8003630 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800362c:	2300      	movs	r3, #0
 800362e:	e000      	b.n	8003632 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003630:	68fb      	ldr	r3, [r7, #12]
}
 8003632:	4618      	mov	r0, r3
 8003634:	3714      	adds	r7, #20
 8003636:	46bd      	mov	sp, r7
 8003638:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800363a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800363a:	b580      	push	{r7, lr}
 800363c:	b084      	sub	sp, #16
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d001      	beq.n	8003650 <osDelay+0x16>
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	e000      	b.n	8003652 <osDelay+0x18>
 8003650:	2301      	movs	r3, #1
 8003652:	4618      	mov	r0, r3
 8003654:	f001 f964 	bl	8004920 <vTaskDelay>
  
  return osOK;
 8003658:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800365a:	4618      	mov	r0, r3
 800365c:	3710      	adds	r7, #16
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}

08003662 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8003662:	b580      	push	{r7, lr}
 8003664:	b086      	sub	sp, #24
 8003666:	af02      	add	r7, sp, #8
 8003668:	6078      	str	r0, [r7, #4]
 800366a:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d010      	beq.n	8003696 <osSemaphoreCreate+0x34>
    if (count == 1) {
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	2b01      	cmp	r3, #1
 8003678:	d10b      	bne.n	8003692 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685a      	ldr	r2, [r3, #4]
 800367e:	2303      	movs	r3, #3
 8003680:	9300      	str	r3, [sp, #0]
 8003682:	4613      	mov	r3, r2
 8003684:	2200      	movs	r2, #0
 8003686:	2100      	movs	r1, #0
 8003688:	2001      	movs	r0, #1
 800368a:	f000 f9e7 	bl	8003a5c <xQueueGenericCreateStatic>
 800368e:	4603      	mov	r3, r0
 8003690:	e016      	b.n	80036c0 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8003692:	2300      	movs	r3, #0
 8003694:	e014      	b.n	80036c0 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	2b01      	cmp	r3, #1
 800369a:	d110      	bne.n	80036be <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 800369c:	2203      	movs	r2, #3
 800369e:	2100      	movs	r1, #0
 80036a0:	2001      	movs	r0, #1
 80036a2:	f000 fa4d 	bl	8003b40 <xQueueGenericCreate>
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d005      	beq.n	80036ba <osSemaphoreCreate+0x58>
 80036ae:	2300      	movs	r3, #0
 80036b0:	2200      	movs	r2, #0
 80036b2:	2100      	movs	r1, #0
 80036b4:	68f8      	ldr	r0, [r7, #12]
 80036b6:	f000 fa9f 	bl	8003bf8 <xQueueGenericSend>
      return sema;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	e000      	b.n	80036c0 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80036be:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3710      	adds	r7, #16
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80036d2:	2300      	movs	r3, #0
 80036d4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d101      	bne.n	80036e0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80036dc:	2380      	movs	r3, #128	; 0x80
 80036de:	e03a      	b.n	8003756 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80036e0:	2300      	movs	r3, #0
 80036e2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ea:	d103      	bne.n	80036f4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80036ec:	f04f 33ff 	mov.w	r3, #4294967295
 80036f0:	60fb      	str	r3, [r7, #12]
 80036f2:	e009      	b.n	8003708 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d006      	beq.n	8003708 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d101      	bne.n	8003708 <osSemaphoreWait+0x40>
      ticks = 1;
 8003704:	2301      	movs	r3, #1
 8003706:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8003708:	f7ff ff32 	bl	8003570 <inHandlerMode>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d017      	beq.n	8003742 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8003712:	f107 0308 	add.w	r3, r7, #8
 8003716:	461a      	mov	r2, r3
 8003718:	2100      	movs	r1, #0
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 fdd4 	bl	80042c8 <xQueueReceiveFromISR>
 8003720:	4603      	mov	r3, r0
 8003722:	2b01      	cmp	r3, #1
 8003724:	d001      	beq.n	800372a <osSemaphoreWait+0x62>
      return osErrorOS;
 8003726:	23ff      	movs	r3, #255	; 0xff
 8003728:	e015      	b.n	8003756 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d011      	beq.n	8003754 <osSemaphoreWait+0x8c>
 8003730:	4b0b      	ldr	r3, [pc, #44]	; (8003760 <osSemaphoreWait+0x98>)
 8003732:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003736:	601a      	str	r2, [r3, #0]
 8003738:	f3bf 8f4f 	dsb	sy
 800373c:	f3bf 8f6f 	isb	sy
 8003740:	e008      	b.n	8003754 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8003742:	68f9      	ldr	r1, [r7, #12]
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f000 fcb7 	bl	80040b8 <xQueueSemaphoreTake>
 800374a:	4603      	mov	r3, r0
 800374c:	2b01      	cmp	r3, #1
 800374e:	d001      	beq.n	8003754 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8003750:	23ff      	movs	r3, #255	; 0xff
 8003752:	e000      	b.n	8003756 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	e000ed04 	.word	0xe000ed04

08003764 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800376c:	2300      	movs	r3, #0
 800376e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8003770:	2300      	movs	r3, #0
 8003772:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8003774:	f7ff fefc 	bl	8003570 <inHandlerMode>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d016      	beq.n	80037ac <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800377e:	f107 0308 	add.w	r3, r7, #8
 8003782:	4619      	mov	r1, r3
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f000 fb31 	bl	8003dec <xQueueGiveFromISR>
 800378a:	4603      	mov	r3, r0
 800378c:	2b01      	cmp	r3, #1
 800378e:	d001      	beq.n	8003794 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8003790:	23ff      	movs	r3, #255	; 0xff
 8003792:	e017      	b.n	80037c4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d013      	beq.n	80037c2 <osSemaphoreRelease+0x5e>
 800379a:	4b0c      	ldr	r3, [pc, #48]	; (80037cc <osSemaphoreRelease+0x68>)
 800379c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037a0:	601a      	str	r2, [r3, #0]
 80037a2:	f3bf 8f4f 	dsb	sy
 80037a6:	f3bf 8f6f 	isb	sy
 80037aa:	e00a      	b.n	80037c2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80037ac:	2300      	movs	r3, #0
 80037ae:	2200      	movs	r2, #0
 80037b0:	2100      	movs	r1, #0
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 fa20 	bl	8003bf8 <xQueueGenericSend>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d001      	beq.n	80037c2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80037be:	23ff      	movs	r3, #255	; 0xff
 80037c0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80037c2:	68fb      	ldr	r3, [r7, #12]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3710      	adds	r7, #16
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	e000ed04 	.word	0xe000ed04

080037d0 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80037d0:	b590      	push	{r4, r7, lr}
 80037d2:	b085      	sub	sp, #20
 80037d4:	af02      	add	r7, sp, #8
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d012      	beq.n	8003808 <osMessageCreate+0x38>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00e      	beq.n	8003808 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6818      	ldr	r0, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6859      	ldr	r1, [r3, #4]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	689a      	ldr	r2, [r3, #8]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	68dc      	ldr	r4, [r3, #12]
 80037fa:	2300      	movs	r3, #0
 80037fc:	9300      	str	r3, [sp, #0]
 80037fe:	4623      	mov	r3, r4
 8003800:	f000 f92c 	bl	8003a5c <xQueueGenericCreateStatic>
 8003804:	4603      	mov	r3, r0
 8003806:	e008      	b.n	800381a <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6818      	ldr	r0, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	4619      	mov	r1, r3
 8003814:	f000 f994 	bl	8003b40 <xQueueGenericCreate>
 8003818:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800381a:	4618      	mov	r0, r3
 800381c:	370c      	adds	r7, #12
 800381e:	46bd      	mov	sp, r7
 8003820:	bd90      	pop	{r4, r7, pc}

08003822 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003822:	b480      	push	{r7}
 8003824:	b083      	sub	sp, #12
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f103 0208 	add.w	r2, r3, #8
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f04f 32ff 	mov.w	r2, #4294967295
 800383a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f103 0208 	add.w	r2, r3, #8
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f103 0208 	add.w	r2, r3, #8
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003856:	bf00      	nop
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr

08003862 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003862:	b480      	push	{r7}
 8003864:	b083      	sub	sp, #12
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	689a      	ldr	r2, [r3, #8]
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	683a      	ldr	r2, [r7, #0]
 80038a0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	683a      	ldr	r2, [r7, #0]
 80038a6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	1c5a      	adds	r2, r3, #1
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	601a      	str	r2, [r3, #0]
}
 80038b8:	bf00      	nop
 80038ba:	3714      	adds	r7, #20
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80038c4:	b480      	push	{r7}
 80038c6:	b085      	sub	sp, #20
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038da:	d103      	bne.n	80038e4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	60fb      	str	r3, [r7, #12]
 80038e2:	e00c      	b.n	80038fe <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	3308      	adds	r3, #8
 80038e8:	60fb      	str	r3, [r7, #12]
 80038ea:	e002      	b.n	80038f2 <vListInsert+0x2e>
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	60fb      	str	r3, [r7, #12]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68ba      	ldr	r2, [r7, #8]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d2f6      	bcs.n	80038ec <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	685a      	ldr	r2, [r3, #4]
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	683a      	ldr	r2, [r7, #0]
 800390c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	683a      	ldr	r2, [r7, #0]
 8003918:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	1c5a      	adds	r2, r3, #1
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	601a      	str	r2, [r3, #0]
}
 800392a:	bf00      	nop
 800392c:	3714      	adds	r7, #20
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr

08003936 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003936:	b480      	push	{r7}
 8003938:	b085      	sub	sp, #20
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	6892      	ldr	r2, [r2, #8]
 800394c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	6852      	ldr	r2, [r2, #4]
 8003956:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	429a      	cmp	r2, r3
 8003960:	d103      	bne.n	800396a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	689a      	ldr	r2, [r3, #8]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	1e5a      	subs	r2, r3, #1
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
}
 800397e:	4618      	mov	r0, r3
 8003980:	3714      	adds	r7, #20
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
	...

0800398c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d109      	bne.n	80039b4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80039a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a4:	f383 8811 	msr	BASEPRI, r3
 80039a8:	f3bf 8f6f 	isb	sy
 80039ac:	f3bf 8f4f 	dsb	sy
 80039b0:	60bb      	str	r3, [r7, #8]
 80039b2:	e7fe      	b.n	80039b2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80039b4:	f001 ff4a 	bl	800584c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039c0:	68f9      	ldr	r1, [r7, #12]
 80039c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80039c4:	fb01 f303 	mul.w	r3, r1, r3
 80039c8:	441a      	add	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039e4:	3b01      	subs	r3, #1
 80039e6:	68f9      	ldr	r1, [r7, #12]
 80039e8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80039ea:	fb01 f303 	mul.w	r3, r1, r3
 80039ee:	441a      	add	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	22ff      	movs	r2, #255	; 0xff
 80039f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	22ff      	movs	r2, #255	; 0xff
 8003a00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d114      	bne.n	8003a34 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d01a      	beq.n	8003a48 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	3310      	adds	r3, #16
 8003a16:	4618      	mov	r0, r3
 8003a18:	f001 f9f8 	bl	8004e0c <xTaskRemoveFromEventList>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d012      	beq.n	8003a48 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003a22:	4b0d      	ldr	r3, [pc, #52]	; (8003a58 <xQueueGenericReset+0xcc>)
 8003a24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a28:	601a      	str	r2, [r3, #0]
 8003a2a:	f3bf 8f4f 	dsb	sy
 8003a2e:	f3bf 8f6f 	isb	sy
 8003a32:	e009      	b.n	8003a48 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	3310      	adds	r3, #16
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7ff fef2 	bl	8003822 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	3324      	adds	r3, #36	; 0x24
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7ff feed 	bl	8003822 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003a48:	f001 ff2e 	bl	80058a8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003a4c:	2301      	movs	r3, #1
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	e000ed04 	.word	0xe000ed04

08003a5c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b08e      	sub	sp, #56	; 0x38
 8003a60:	af02      	add	r7, sp, #8
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]
 8003a68:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d109      	bne.n	8003a84 <xQueueGenericCreateStatic+0x28>
 8003a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a74:	f383 8811 	msr	BASEPRI, r3
 8003a78:	f3bf 8f6f 	isb	sy
 8003a7c:	f3bf 8f4f 	dsb	sy
 8003a80:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a82:	e7fe      	b.n	8003a82 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d109      	bne.n	8003a9e <xQueueGenericCreateStatic+0x42>
 8003a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a8e:	f383 8811 	msr	BASEPRI, r3
 8003a92:	f3bf 8f6f 	isb	sy
 8003a96:	f3bf 8f4f 	dsb	sy
 8003a9a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a9c:	e7fe      	b.n	8003a9c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d002      	beq.n	8003aaa <xQueueGenericCreateStatic+0x4e>
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d001      	beq.n	8003aae <xQueueGenericCreateStatic+0x52>
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e000      	b.n	8003ab0 <xQueueGenericCreateStatic+0x54>
 8003aae:	2300      	movs	r3, #0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d109      	bne.n	8003ac8 <xQueueGenericCreateStatic+0x6c>
 8003ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab8:	f383 8811 	msr	BASEPRI, r3
 8003abc:	f3bf 8f6f 	isb	sy
 8003ac0:	f3bf 8f4f 	dsb	sy
 8003ac4:	623b      	str	r3, [r7, #32]
 8003ac6:	e7fe      	b.n	8003ac6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d102      	bne.n	8003ad4 <xQueueGenericCreateStatic+0x78>
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d101      	bne.n	8003ad8 <xQueueGenericCreateStatic+0x7c>
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e000      	b.n	8003ada <xQueueGenericCreateStatic+0x7e>
 8003ad8:	2300      	movs	r3, #0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d109      	bne.n	8003af2 <xQueueGenericCreateStatic+0x96>
 8003ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae2:	f383 8811 	msr	BASEPRI, r3
 8003ae6:	f3bf 8f6f 	isb	sy
 8003aea:	f3bf 8f4f 	dsb	sy
 8003aee:	61fb      	str	r3, [r7, #28]
 8003af0:	e7fe      	b.n	8003af0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003af2:	2348      	movs	r3, #72	; 0x48
 8003af4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	2b48      	cmp	r3, #72	; 0x48
 8003afa:	d009      	beq.n	8003b10 <xQueueGenericCreateStatic+0xb4>
 8003afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b00:	f383 8811 	msr	BASEPRI, r3
 8003b04:	f3bf 8f6f 	isb	sy
 8003b08:	f3bf 8f4f 	dsb	sy
 8003b0c:	61bb      	str	r3, [r7, #24]
 8003b0e:	e7fe      	b.n	8003b0e <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00d      	beq.n	8003b36 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003b22:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b28:	9300      	str	r3, [sp, #0]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	68b9      	ldr	r1, [r7, #8]
 8003b30:	68f8      	ldr	r0, [r7, #12]
 8003b32:	f000 f842 	bl	8003bba <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3730      	adds	r7, #48	; 0x30
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b08a      	sub	sp, #40	; 0x28
 8003b44:	af02      	add	r7, sp, #8
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d109      	bne.n	8003b68 <xQueueGenericCreate+0x28>
 8003b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b58:	f383 8811 	msr	BASEPRI, r3
 8003b5c:	f3bf 8f6f 	isb	sy
 8003b60:	f3bf 8f4f 	dsb	sy
 8003b64:	613b      	str	r3, [r7, #16]
 8003b66:	e7fe      	b.n	8003b66 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d102      	bne.n	8003b74 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	61fb      	str	r3, [r7, #28]
 8003b72:	e004      	b.n	8003b7e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	68ba      	ldr	r2, [r7, #8]
 8003b78:	fb02 f303 	mul.w	r3, r2, r3
 8003b7c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	3348      	adds	r3, #72	; 0x48
 8003b82:	4618      	mov	r0, r3
 8003b84:	f001 ff7c 	bl	8005a80 <pvPortMalloc>
 8003b88:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00f      	beq.n	8003bb0 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	3348      	adds	r3, #72	; 0x48
 8003b94:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003b9e:	79fa      	ldrb	r2, [r7, #7]
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	9300      	str	r3, [sp, #0]
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	697a      	ldr	r2, [r7, #20]
 8003ba8:	68b9      	ldr	r1, [r7, #8]
 8003baa:	68f8      	ldr	r0, [r7, #12]
 8003bac:	f000 f805 	bl	8003bba <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003bb0:	69bb      	ldr	r3, [r7, #24]
	}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3720      	adds	r7, #32
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	b084      	sub	sp, #16
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	60f8      	str	r0, [r7, #12]
 8003bc2:	60b9      	str	r1, [r7, #8]
 8003bc4:	607a      	str	r2, [r7, #4]
 8003bc6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d103      	bne.n	8003bd6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	69ba      	ldr	r2, [r7, #24]
 8003bd2:	601a      	str	r2, [r3, #0]
 8003bd4:	e002      	b.n	8003bdc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	68fa      	ldr	r2, [r7, #12]
 8003be0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	68ba      	ldr	r2, [r7, #8]
 8003be6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003be8:	2101      	movs	r1, #1
 8003bea:	69b8      	ldr	r0, [r7, #24]
 8003bec:	f7ff fece 	bl	800398c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003bf0:	bf00      	nop
 8003bf2:	3710      	adds	r7, #16
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b08e      	sub	sp, #56	; 0x38
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]
 8003c04:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003c06:	2300      	movs	r3, #0
 8003c08:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d109      	bne.n	8003c28 <xQueueGenericSend+0x30>
 8003c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c18:	f383 8811 	msr	BASEPRI, r3
 8003c1c:	f3bf 8f6f 	isb	sy
 8003c20:	f3bf 8f4f 	dsb	sy
 8003c24:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c26:	e7fe      	b.n	8003c26 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d103      	bne.n	8003c36 <xQueueGenericSend+0x3e>
 8003c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d101      	bne.n	8003c3a <xQueueGenericSend+0x42>
 8003c36:	2301      	movs	r3, #1
 8003c38:	e000      	b.n	8003c3c <xQueueGenericSend+0x44>
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d109      	bne.n	8003c54 <xQueueGenericSend+0x5c>
 8003c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c44:	f383 8811 	msr	BASEPRI, r3
 8003c48:	f3bf 8f6f 	isb	sy
 8003c4c:	f3bf 8f4f 	dsb	sy
 8003c50:	627b      	str	r3, [r7, #36]	; 0x24
 8003c52:	e7fe      	b.n	8003c52 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d103      	bne.n	8003c62 <xQueueGenericSend+0x6a>
 8003c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d101      	bne.n	8003c66 <xQueueGenericSend+0x6e>
 8003c62:	2301      	movs	r3, #1
 8003c64:	e000      	b.n	8003c68 <xQueueGenericSend+0x70>
 8003c66:	2300      	movs	r3, #0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d109      	bne.n	8003c80 <xQueueGenericSend+0x88>
 8003c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c70:	f383 8811 	msr	BASEPRI, r3
 8003c74:	f3bf 8f6f 	isb	sy
 8003c78:	f3bf 8f4f 	dsb	sy
 8003c7c:	623b      	str	r3, [r7, #32]
 8003c7e:	e7fe      	b.n	8003c7e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c80:	f001 fa80 	bl	8005184 <xTaskGetSchedulerState>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d102      	bne.n	8003c90 <xQueueGenericSend+0x98>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d101      	bne.n	8003c94 <xQueueGenericSend+0x9c>
 8003c90:	2301      	movs	r3, #1
 8003c92:	e000      	b.n	8003c96 <xQueueGenericSend+0x9e>
 8003c94:	2300      	movs	r3, #0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d109      	bne.n	8003cae <xQueueGenericSend+0xb6>
 8003c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c9e:	f383 8811 	msr	BASEPRI, r3
 8003ca2:	f3bf 8f6f 	isb	sy
 8003ca6:	f3bf 8f4f 	dsb	sy
 8003caa:	61fb      	str	r3, [r7, #28]
 8003cac:	e7fe      	b.n	8003cac <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003cae:	f001 fdcd 	bl	800584c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d302      	bcc.n	8003cc4 <xQueueGenericSend+0xcc>
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d129      	bne.n	8003d18 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003cc4:	683a      	ldr	r2, [r7, #0]
 8003cc6:	68b9      	ldr	r1, [r7, #8]
 8003cc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003cca:	f000 fb92 	bl	80043f2 <prvCopyDataToQueue>
 8003cce:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d010      	beq.n	8003cfa <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cda:	3324      	adds	r3, #36	; 0x24
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f001 f895 	bl	8004e0c <xTaskRemoveFromEventList>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d013      	beq.n	8003d10 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003ce8:	4b3f      	ldr	r3, [pc, #252]	; (8003de8 <xQueueGenericSend+0x1f0>)
 8003cea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cee:	601a      	str	r2, [r3, #0]
 8003cf0:	f3bf 8f4f 	dsb	sy
 8003cf4:	f3bf 8f6f 	isb	sy
 8003cf8:	e00a      	b.n	8003d10 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d007      	beq.n	8003d10 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003d00:	4b39      	ldr	r3, [pc, #228]	; (8003de8 <xQueueGenericSend+0x1f0>)
 8003d02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d06:	601a      	str	r2, [r3, #0]
 8003d08:	f3bf 8f4f 	dsb	sy
 8003d0c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003d10:	f001 fdca 	bl	80058a8 <vPortExitCritical>
				return pdPASS;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e063      	b.n	8003de0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d103      	bne.n	8003d26 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003d1e:	f001 fdc3 	bl	80058a8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003d22:	2300      	movs	r3, #0
 8003d24:	e05c      	b.n	8003de0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d106      	bne.n	8003d3a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003d2c:	f107 0314 	add.w	r3, r7, #20
 8003d30:	4618      	mov	r0, r3
 8003d32:	f001 f8cd 	bl	8004ed0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d36:	2301      	movs	r3, #1
 8003d38:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003d3a:	f001 fdb5 	bl	80058a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003d3e:	f000 fe81 	bl	8004a44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d42:	f001 fd83 	bl	800584c <vPortEnterCritical>
 8003d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d4c:	b25b      	sxtb	r3, r3
 8003d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d52:	d103      	bne.n	8003d5c <xQueueGenericSend+0x164>
 8003d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d62:	b25b      	sxtb	r3, r3
 8003d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d68:	d103      	bne.n	8003d72 <xQueueGenericSend+0x17a>
 8003d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d72:	f001 fd99 	bl	80058a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d76:	1d3a      	adds	r2, r7, #4
 8003d78:	f107 0314 	add.w	r3, r7, #20
 8003d7c:	4611      	mov	r1, r2
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f001 f8bc 	bl	8004efc <xTaskCheckForTimeOut>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d124      	bne.n	8003dd4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003d8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d8c:	f000 fc29 	bl	80045e2 <prvIsQueueFull>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d018      	beq.n	8003dc8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d98:	3310      	adds	r3, #16
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	4611      	mov	r1, r2
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f001 f810 	bl	8004dc4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003da4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003da6:	f000 fbb4 	bl	8004512 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003daa:	f000 fe59 	bl	8004a60 <xTaskResumeAll>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f47f af7c 	bne.w	8003cae <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003db6:	4b0c      	ldr	r3, [pc, #48]	; (8003de8 <xQueueGenericSend+0x1f0>)
 8003db8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dbc:	601a      	str	r2, [r3, #0]
 8003dbe:	f3bf 8f4f 	dsb	sy
 8003dc2:	f3bf 8f6f 	isb	sy
 8003dc6:	e772      	b.n	8003cae <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003dc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003dca:	f000 fba2 	bl	8004512 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003dce:	f000 fe47 	bl	8004a60 <xTaskResumeAll>
 8003dd2:	e76c      	b.n	8003cae <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003dd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003dd6:	f000 fb9c 	bl	8004512 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003dda:	f000 fe41 	bl	8004a60 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003dde:	2300      	movs	r3, #0
		}
	}
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3738      	adds	r7, #56	; 0x38
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	e000ed04 	.word	0xe000ed04

08003dec <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b08e      	sub	sp, #56	; 0x38
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d109      	bne.n	8003e14 <xQueueGiveFromISR+0x28>
 8003e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e04:	f383 8811 	msr	BASEPRI, r3
 8003e08:	f3bf 8f6f 	isb	sy
 8003e0c:	f3bf 8f4f 	dsb	sy
 8003e10:	623b      	str	r3, [r7, #32]
 8003e12:	e7fe      	b.n	8003e12 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d009      	beq.n	8003e30 <xQueueGiveFromISR+0x44>
 8003e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e20:	f383 8811 	msr	BASEPRI, r3
 8003e24:	f3bf 8f6f 	isb	sy
 8003e28:	f3bf 8f4f 	dsb	sy
 8003e2c:	61fb      	str	r3, [r7, #28]
 8003e2e:	e7fe      	b.n	8003e2e <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8003e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d103      	bne.n	8003e40 <xQueueGiveFromISR+0x54>
 8003e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d101      	bne.n	8003e44 <xQueueGiveFromISR+0x58>
 8003e40:	2301      	movs	r3, #1
 8003e42:	e000      	b.n	8003e46 <xQueueGiveFromISR+0x5a>
 8003e44:	2300      	movs	r3, #0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d109      	bne.n	8003e5e <xQueueGiveFromISR+0x72>
 8003e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e4e:	f383 8811 	msr	BASEPRI, r3
 8003e52:	f3bf 8f6f 	isb	sy
 8003e56:	f3bf 8f4f 	dsb	sy
 8003e5a:	61bb      	str	r3, [r7, #24]
 8003e5c:	e7fe      	b.n	8003e5c <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003e5e:	f001 fdd1 	bl	8005a04 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003e62:	f3ef 8211 	mrs	r2, BASEPRI
 8003e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e6a:	f383 8811 	msr	BASEPRI, r3
 8003e6e:	f3bf 8f6f 	isb	sy
 8003e72:	f3bf 8f4f 	dsb	sy
 8003e76:	617a      	str	r2, [r7, #20]
 8003e78:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003e7a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e82:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d22b      	bcs.n	8003ee6 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e9a:	1c5a      	adds	r2, r3, #1
 8003e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e9e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003ea0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea8:	d112      	bne.n	8003ed0 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d016      	beq.n	8003ee0 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb4:	3324      	adds	r3, #36	; 0x24
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f000 ffa8 	bl	8004e0c <xTaskRemoveFromEventList>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00e      	beq.n	8003ee0 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d00b      	beq.n	8003ee0 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	601a      	str	r2, [r3, #0]
 8003ece:	e007      	b.n	8003ee0 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003ed0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	b25a      	sxtb	r2, r3
 8003eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003edc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	637b      	str	r3, [r7, #52]	; 0x34
 8003ee4:	e001      	b.n	8003eea <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	637b      	str	r3, [r7, #52]	; 0x34
 8003eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eec:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3738      	adds	r7, #56	; 0x38
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
	...

08003f00 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b08c      	sub	sp, #48	; 0x30
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d109      	bne.n	8003f2e <xQueueReceive+0x2e>
	__asm volatile
 8003f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f1e:	f383 8811 	msr	BASEPRI, r3
 8003f22:	f3bf 8f6f 	isb	sy
 8003f26:	f3bf 8f4f 	dsb	sy
 8003f2a:	623b      	str	r3, [r7, #32]
 8003f2c:	e7fe      	b.n	8003f2c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d103      	bne.n	8003f3c <xQueueReceive+0x3c>
 8003f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d101      	bne.n	8003f40 <xQueueReceive+0x40>
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e000      	b.n	8003f42 <xQueueReceive+0x42>
 8003f40:	2300      	movs	r3, #0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d109      	bne.n	8003f5a <xQueueReceive+0x5a>
 8003f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f4a:	f383 8811 	msr	BASEPRI, r3
 8003f4e:	f3bf 8f6f 	isb	sy
 8003f52:	f3bf 8f4f 	dsb	sy
 8003f56:	61fb      	str	r3, [r7, #28]
 8003f58:	e7fe      	b.n	8003f58 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f5a:	f001 f913 	bl	8005184 <xTaskGetSchedulerState>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d102      	bne.n	8003f6a <xQueueReceive+0x6a>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d101      	bne.n	8003f6e <xQueueReceive+0x6e>
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e000      	b.n	8003f70 <xQueueReceive+0x70>
 8003f6e:	2300      	movs	r3, #0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d109      	bne.n	8003f88 <xQueueReceive+0x88>
 8003f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f78:	f383 8811 	msr	BASEPRI, r3
 8003f7c:	f3bf 8f6f 	isb	sy
 8003f80:	f3bf 8f4f 	dsb	sy
 8003f84:	61bb      	str	r3, [r7, #24]
 8003f86:	e7fe      	b.n	8003f86 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003f88:	f001 fc60 	bl	800584c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f90:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d01f      	beq.n	8003fd8 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003f98:	68b9      	ldr	r1, [r7, #8]
 8003f9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f9c:	f000 fa93 	bl	80044c6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa2:	1e5a      	subs	r2, r3, #1
 8003fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003faa:	691b      	ldr	r3, [r3, #16]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d00f      	beq.n	8003fd0 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb2:	3310      	adds	r3, #16
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f000 ff29 	bl	8004e0c <xTaskRemoveFromEventList>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d007      	beq.n	8003fd0 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003fc0:	4b3c      	ldr	r3, [pc, #240]	; (80040b4 <xQueueReceive+0x1b4>)
 8003fc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fc6:	601a      	str	r2, [r3, #0]
 8003fc8:	f3bf 8f4f 	dsb	sy
 8003fcc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003fd0:	f001 fc6a 	bl	80058a8 <vPortExitCritical>
				return pdPASS;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e069      	b.n	80040ac <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d103      	bne.n	8003fe6 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003fde:	f001 fc63 	bl	80058a8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	e062      	b.n	80040ac <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d106      	bne.n	8003ffa <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003fec:	f107 0310 	add.w	r3, r7, #16
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f000 ff6d 	bl	8004ed0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ffa:	f001 fc55 	bl	80058a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ffe:	f000 fd21 	bl	8004a44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004002:	f001 fc23 	bl	800584c <vPortEnterCritical>
 8004006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004008:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800400c:	b25b      	sxtb	r3, r3
 800400e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004012:	d103      	bne.n	800401c <xQueueReceive+0x11c>
 8004014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004016:	2200      	movs	r2, #0
 8004018:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800401c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800401e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004022:	b25b      	sxtb	r3, r3
 8004024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004028:	d103      	bne.n	8004032 <xQueueReceive+0x132>
 800402a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800402c:	2200      	movs	r2, #0
 800402e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004032:	f001 fc39 	bl	80058a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004036:	1d3a      	adds	r2, r7, #4
 8004038:	f107 0310 	add.w	r3, r7, #16
 800403c:	4611      	mov	r1, r2
 800403e:	4618      	mov	r0, r3
 8004040:	f000 ff5c 	bl	8004efc <xTaskCheckForTimeOut>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d123      	bne.n	8004092 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800404a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800404c:	f000 fab3 	bl	80045b6 <prvIsQueueEmpty>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d017      	beq.n	8004086 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004058:	3324      	adds	r3, #36	; 0x24
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	4611      	mov	r1, r2
 800405e:	4618      	mov	r0, r3
 8004060:	f000 feb0 	bl	8004dc4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004064:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004066:	f000 fa54 	bl	8004512 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800406a:	f000 fcf9 	bl	8004a60 <xTaskResumeAll>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d189      	bne.n	8003f88 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004074:	4b0f      	ldr	r3, [pc, #60]	; (80040b4 <xQueueReceive+0x1b4>)
 8004076:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800407a:	601a      	str	r2, [r3, #0]
 800407c:	f3bf 8f4f 	dsb	sy
 8004080:	f3bf 8f6f 	isb	sy
 8004084:	e780      	b.n	8003f88 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004086:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004088:	f000 fa43 	bl	8004512 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800408c:	f000 fce8 	bl	8004a60 <xTaskResumeAll>
 8004090:	e77a      	b.n	8003f88 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004092:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004094:	f000 fa3d 	bl	8004512 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004098:	f000 fce2 	bl	8004a60 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800409c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800409e:	f000 fa8a 	bl	80045b6 <prvIsQueueEmpty>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	f43f af6f 	beq.w	8003f88 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80040aa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3730      	adds	r7, #48	; 0x30
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	e000ed04 	.word	0xe000ed04

080040b8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b08e      	sub	sp, #56	; 0x38
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80040c2:	2300      	movs	r3, #0
 80040c4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80040ca:	2300      	movs	r3, #0
 80040cc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80040ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d109      	bne.n	80040e8 <xQueueSemaphoreTake+0x30>
 80040d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d8:	f383 8811 	msr	BASEPRI, r3
 80040dc:	f3bf 8f6f 	isb	sy
 80040e0:	f3bf 8f4f 	dsb	sy
 80040e4:	623b      	str	r3, [r7, #32]
 80040e6:	e7fe      	b.n	80040e6 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80040e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d009      	beq.n	8004104 <xQueueSemaphoreTake+0x4c>
 80040f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f4:	f383 8811 	msr	BASEPRI, r3
 80040f8:	f3bf 8f6f 	isb	sy
 80040fc:	f3bf 8f4f 	dsb	sy
 8004100:	61fb      	str	r3, [r7, #28]
 8004102:	e7fe      	b.n	8004102 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004104:	f001 f83e 	bl	8005184 <xTaskGetSchedulerState>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d102      	bne.n	8004114 <xQueueSemaphoreTake+0x5c>
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d101      	bne.n	8004118 <xQueueSemaphoreTake+0x60>
 8004114:	2301      	movs	r3, #1
 8004116:	e000      	b.n	800411a <xQueueSemaphoreTake+0x62>
 8004118:	2300      	movs	r3, #0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d109      	bne.n	8004132 <xQueueSemaphoreTake+0x7a>
 800411e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004122:	f383 8811 	msr	BASEPRI, r3
 8004126:	f3bf 8f6f 	isb	sy
 800412a:	f3bf 8f4f 	dsb	sy
 800412e:	61bb      	str	r3, [r7, #24]
 8004130:	e7fe      	b.n	8004130 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004132:	f001 fb8b 	bl	800584c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800413a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800413c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800413e:	2b00      	cmp	r3, #0
 8004140:	d024      	beq.n	800418c <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004144:	1e5a      	subs	r2, r3, #1
 8004146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004148:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800414a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d104      	bne.n	800415c <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8004152:	f001 f9dd 	bl	8005510 <pvTaskIncrementMutexHeldCount>
 8004156:	4602      	mov	r2, r0
 8004158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800415a:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800415c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00f      	beq.n	8004184 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004166:	3310      	adds	r3, #16
 8004168:	4618      	mov	r0, r3
 800416a:	f000 fe4f 	bl	8004e0c <xTaskRemoveFromEventList>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d007      	beq.n	8004184 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004174:	4b53      	ldr	r3, [pc, #332]	; (80042c4 <xQueueSemaphoreTake+0x20c>)
 8004176:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800417a:	601a      	str	r2, [r3, #0]
 800417c:	f3bf 8f4f 	dsb	sy
 8004180:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004184:	f001 fb90 	bl	80058a8 <vPortExitCritical>
				return pdPASS;
 8004188:	2301      	movs	r3, #1
 800418a:	e096      	b.n	80042ba <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d110      	bne.n	80041b4 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004194:	2b00      	cmp	r3, #0
 8004196:	d009      	beq.n	80041ac <xQueueSemaphoreTake+0xf4>
 8004198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800419c:	f383 8811 	msr	BASEPRI, r3
 80041a0:	f3bf 8f6f 	isb	sy
 80041a4:	f3bf 8f4f 	dsb	sy
 80041a8:	617b      	str	r3, [r7, #20]
 80041aa:	e7fe      	b.n	80041aa <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80041ac:	f001 fb7c 	bl	80058a8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80041b0:	2300      	movs	r3, #0
 80041b2:	e082      	b.n	80042ba <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 80041b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d106      	bne.n	80041c8 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80041ba:	f107 030c 	add.w	r3, r7, #12
 80041be:	4618      	mov	r0, r3
 80041c0:	f000 fe86 	bl	8004ed0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80041c4:	2301      	movs	r3, #1
 80041c6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80041c8:	f001 fb6e 	bl	80058a8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80041cc:	f000 fc3a 	bl	8004a44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80041d0:	f001 fb3c 	bl	800584c <vPortEnterCritical>
 80041d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041da:	b25b      	sxtb	r3, r3
 80041dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041e0:	d103      	bne.n	80041ea <xQueueSemaphoreTake+0x132>
 80041e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041f0:	b25b      	sxtb	r3, r3
 80041f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f6:	d103      	bne.n	8004200 <xQueueSemaphoreTake+0x148>
 80041f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004200:	f001 fb52 	bl	80058a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004204:	463a      	mov	r2, r7
 8004206:	f107 030c 	add.w	r3, r7, #12
 800420a:	4611      	mov	r1, r2
 800420c:	4618      	mov	r0, r3
 800420e:	f000 fe75 	bl	8004efc <xTaskCheckForTimeOut>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d132      	bne.n	800427e <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004218:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800421a:	f000 f9cc 	bl	80045b6 <prvIsQueueEmpty>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d026      	beq.n	8004272 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d109      	bne.n	8004240 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800422c:	f001 fb0e 	bl	800584c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8004230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	4618      	mov	r0, r3
 8004236:	f000 ffc3 	bl	80051c0 <xTaskPriorityInherit>
 800423a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800423c:	f001 fb34 	bl	80058a8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004242:	3324      	adds	r3, #36	; 0x24
 8004244:	683a      	ldr	r2, [r7, #0]
 8004246:	4611      	mov	r1, r2
 8004248:	4618      	mov	r0, r3
 800424a:	f000 fdbb 	bl	8004dc4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800424e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004250:	f000 f95f 	bl	8004512 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004254:	f000 fc04 	bl	8004a60 <xTaskResumeAll>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	f47f af69 	bne.w	8004132 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8004260:	4b18      	ldr	r3, [pc, #96]	; (80042c4 <xQueueSemaphoreTake+0x20c>)
 8004262:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004266:	601a      	str	r2, [r3, #0]
 8004268:	f3bf 8f4f 	dsb	sy
 800426c:	f3bf 8f6f 	isb	sy
 8004270:	e75f      	b.n	8004132 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004272:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004274:	f000 f94d 	bl	8004512 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004278:	f000 fbf2 	bl	8004a60 <xTaskResumeAll>
 800427c:	e759      	b.n	8004132 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800427e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004280:	f000 f947 	bl	8004512 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004284:	f000 fbec 	bl	8004a60 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004288:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800428a:	f000 f994 	bl	80045b6 <prvIsQueueEmpty>
 800428e:	4603      	mov	r3, r0
 8004290:	2b00      	cmp	r3, #0
 8004292:	f43f af4e 	beq.w	8004132 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00d      	beq.n	80042b8 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800429c:	f001 fad6 	bl	800584c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80042a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80042a2:	f000 f88e 	bl	80043c2 <prvGetDisinheritPriorityAfterTimeout>
 80042a6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80042a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80042ae:	4618      	mov	r0, r3
 80042b0:	f001 f890 	bl	80053d4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80042b4:	f001 faf8 	bl	80058a8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80042b8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3738      	adds	r7, #56	; 0x38
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	e000ed04 	.word	0xe000ed04

080042c8 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b08e      	sub	sp, #56	; 0x38
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80042d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d109      	bne.n	80042f2 <xQueueReceiveFromISR+0x2a>
 80042de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e2:	f383 8811 	msr	BASEPRI, r3
 80042e6:	f3bf 8f6f 	isb	sy
 80042ea:	f3bf 8f4f 	dsb	sy
 80042ee:	623b      	str	r3, [r7, #32]
 80042f0:	e7fe      	b.n	80042f0 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d103      	bne.n	8004300 <xQueueReceiveFromISR+0x38>
 80042f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d101      	bne.n	8004304 <xQueueReceiveFromISR+0x3c>
 8004300:	2301      	movs	r3, #1
 8004302:	e000      	b.n	8004306 <xQueueReceiveFromISR+0x3e>
 8004304:	2300      	movs	r3, #0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d109      	bne.n	800431e <xQueueReceiveFromISR+0x56>
 800430a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800430e:	f383 8811 	msr	BASEPRI, r3
 8004312:	f3bf 8f6f 	isb	sy
 8004316:	f3bf 8f4f 	dsb	sy
 800431a:	61fb      	str	r3, [r7, #28]
 800431c:	e7fe      	b.n	800431c <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800431e:	f001 fb71 	bl	8005a04 <vPortValidateInterruptPriority>
	__asm volatile
 8004322:	f3ef 8211 	mrs	r2, BASEPRI
 8004326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800432a:	f383 8811 	msr	BASEPRI, r3
 800432e:	f3bf 8f6f 	isb	sy
 8004332:	f3bf 8f4f 	dsb	sy
 8004336:	61ba      	str	r2, [r7, #24]
 8004338:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800433a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800433c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800433e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004342:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004346:	2b00      	cmp	r3, #0
 8004348:	d02f      	beq.n	80043aa <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800434a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800434c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004350:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004354:	68b9      	ldr	r1, [r7, #8]
 8004356:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004358:	f000 f8b5 	bl	80044c6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800435c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800435e:	1e5a      	subs	r2, r3, #1
 8004360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004362:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004364:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800436c:	d112      	bne.n	8004394 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800436e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d016      	beq.n	80043a4 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004378:	3310      	adds	r3, #16
 800437a:	4618      	mov	r0, r3
 800437c:	f000 fd46 	bl	8004e0c <xTaskRemoveFromEventList>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00e      	beq.n	80043a4 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d00b      	beq.n	80043a4 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	601a      	str	r2, [r3, #0]
 8004392:	e007      	b.n	80043a4 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004394:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004398:	3301      	adds	r3, #1
 800439a:	b2db      	uxtb	r3, r3
 800439c:	b25a      	sxtb	r2, r3
 800439e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80043a4:	2301      	movs	r3, #1
 80043a6:	637b      	str	r3, [r7, #52]	; 0x34
 80043a8:	e001      	b.n	80043ae <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80043aa:	2300      	movs	r3, #0
 80043ac:	637b      	str	r3, [r7, #52]	; 0x34
 80043ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80043b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3738      	adds	r7, #56	; 0x38
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}

080043c2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80043c2:	b480      	push	{r7}
 80043c4:	b085      	sub	sp, #20
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d006      	beq.n	80043e0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f1c3 0307 	rsb	r3, r3, #7
 80043dc:	60fb      	str	r3, [r7, #12]
 80043de:	e001      	b.n	80043e4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80043e0:	2300      	movs	r3, #0
 80043e2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80043e4:	68fb      	ldr	r3, [r7, #12]
	}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3714      	adds	r7, #20
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr

080043f2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80043f2:	b580      	push	{r7, lr}
 80043f4:	b086      	sub	sp, #24
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	60f8      	str	r0, [r7, #12]
 80043fa:	60b9      	str	r1, [r7, #8]
 80043fc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80043fe:	2300      	movs	r3, #0
 8004400:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004406:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440c:	2b00      	cmp	r3, #0
 800440e:	d10d      	bne.n	800442c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d14d      	bne.n	80044b4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	4618      	mov	r0, r3
 800441e:	f000 ff55 	bl	80052cc <xTaskPriorityDisinherit>
 8004422:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2200      	movs	r2, #0
 8004428:	605a      	str	r2, [r3, #4]
 800442a:	e043      	b.n	80044b4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d119      	bne.n	8004466 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6898      	ldr	r0, [r3, #8]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443a:	461a      	mov	r2, r3
 800443c:	68b9      	ldr	r1, [r7, #8]
 800443e:	f001 fd19 	bl	8005e74 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	689a      	ldr	r2, [r3, #8]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444a:	441a      	add	r2, r3
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	689a      	ldr	r2, [r3, #8]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	429a      	cmp	r2, r3
 800445a:	d32b      	bcc.n	80044b4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	609a      	str	r2, [r3, #8]
 8004464:	e026      	b.n	80044b4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	68d8      	ldr	r0, [r3, #12]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446e:	461a      	mov	r2, r3
 8004470:	68b9      	ldr	r1, [r7, #8]
 8004472:	f001 fcff 	bl	8005e74 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	68da      	ldr	r2, [r3, #12]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447e:	425b      	negs	r3, r3
 8004480:	441a      	add	r2, r3
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	68da      	ldr	r2, [r3, #12]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	429a      	cmp	r2, r3
 8004490:	d207      	bcs.n	80044a2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	685a      	ldr	r2, [r3, #4]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449a:	425b      	negs	r3, r3
 800449c:	441a      	add	r2, r3
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d105      	bne.n	80044b4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d002      	beq.n	80044b4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	3b01      	subs	r3, #1
 80044b2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	1c5a      	adds	r2, r3, #1
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80044bc:	697b      	ldr	r3, [r7, #20]
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3718      	adds	r7, #24
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}

080044c6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80044c6:	b580      	push	{r7, lr}
 80044c8:	b082      	sub	sp, #8
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
 80044ce:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d018      	beq.n	800450a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	68da      	ldr	r2, [r3, #12]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e0:	441a      	add	r2, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	68da      	ldr	r2, [r3, #12]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d303      	bcc.n	80044fa <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	68d9      	ldr	r1, [r3, #12]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004502:	461a      	mov	r2, r3
 8004504:	6838      	ldr	r0, [r7, #0]
 8004506:	f001 fcb5 	bl	8005e74 <memcpy>
	}
}
 800450a:	bf00      	nop
 800450c:	3708      	adds	r7, #8
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}

08004512 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004512:	b580      	push	{r7, lr}
 8004514:	b084      	sub	sp, #16
 8004516:	af00      	add	r7, sp, #0
 8004518:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800451a:	f001 f997 	bl	800584c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004524:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004526:	e011      	b.n	800454c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452c:	2b00      	cmp	r3, #0
 800452e:	d012      	beq.n	8004556 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	3324      	adds	r3, #36	; 0x24
 8004534:	4618      	mov	r0, r3
 8004536:	f000 fc69 	bl	8004e0c <xTaskRemoveFromEventList>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d001      	beq.n	8004544 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004540:	f000 fd3c 	bl	8004fbc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004544:	7bfb      	ldrb	r3, [r7, #15]
 8004546:	3b01      	subs	r3, #1
 8004548:	b2db      	uxtb	r3, r3
 800454a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800454c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004550:	2b00      	cmp	r3, #0
 8004552:	dce9      	bgt.n	8004528 <prvUnlockQueue+0x16>
 8004554:	e000      	b.n	8004558 <prvUnlockQueue+0x46>
					break;
 8004556:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	22ff      	movs	r2, #255	; 0xff
 800455c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004560:	f001 f9a2 	bl	80058a8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004564:	f001 f972 	bl	800584c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800456e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004570:	e011      	b.n	8004596 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d012      	beq.n	80045a0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	3310      	adds	r3, #16
 800457e:	4618      	mov	r0, r3
 8004580:	f000 fc44 	bl	8004e0c <xTaskRemoveFromEventList>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d001      	beq.n	800458e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800458a:	f000 fd17 	bl	8004fbc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800458e:	7bbb      	ldrb	r3, [r7, #14]
 8004590:	3b01      	subs	r3, #1
 8004592:	b2db      	uxtb	r3, r3
 8004594:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004596:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800459a:	2b00      	cmp	r3, #0
 800459c:	dce9      	bgt.n	8004572 <prvUnlockQueue+0x60>
 800459e:	e000      	b.n	80045a2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80045a0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	22ff      	movs	r2, #255	; 0xff
 80045a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80045aa:	f001 f97d 	bl	80058a8 <vPortExitCritical>
}
 80045ae:	bf00      	nop
 80045b0:	3710      	adds	r7, #16
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80045b6:	b580      	push	{r7, lr}
 80045b8:	b084      	sub	sp, #16
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80045be:	f001 f945 	bl	800584c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d102      	bne.n	80045d0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80045ca:	2301      	movs	r3, #1
 80045cc:	60fb      	str	r3, [r7, #12]
 80045ce:	e001      	b.n	80045d4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80045d0:	2300      	movs	r3, #0
 80045d2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80045d4:	f001 f968 	bl	80058a8 <vPortExitCritical>

	return xReturn;
 80045d8:	68fb      	ldr	r3, [r7, #12]
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3710      	adds	r7, #16
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80045e2:	b580      	push	{r7, lr}
 80045e4:	b084      	sub	sp, #16
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80045ea:	f001 f92f 	bl	800584c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d102      	bne.n	8004600 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80045fa:	2301      	movs	r3, #1
 80045fc:	60fb      	str	r3, [r7, #12]
 80045fe:	e001      	b.n	8004604 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004600:	2300      	movs	r3, #0
 8004602:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004604:	f001 f950 	bl	80058a8 <vPortExitCritical>

	return xReturn;
 8004608:	68fb      	ldr	r3, [r7, #12]
}
 800460a:	4618      	mov	r0, r3
 800460c:	3710      	adds	r7, #16
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}

08004612 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004612:	b580      	push	{r7, lr}
 8004614:	b08e      	sub	sp, #56	; 0x38
 8004616:	af04      	add	r7, sp, #16
 8004618:	60f8      	str	r0, [r7, #12]
 800461a:	60b9      	str	r1, [r7, #8]
 800461c:	607a      	str	r2, [r7, #4]
 800461e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004622:	2b00      	cmp	r3, #0
 8004624:	d109      	bne.n	800463a <xTaskCreateStatic+0x28>
	__asm volatile
 8004626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462a:	f383 8811 	msr	BASEPRI, r3
 800462e:	f3bf 8f6f 	isb	sy
 8004632:	f3bf 8f4f 	dsb	sy
 8004636:	623b      	str	r3, [r7, #32]
 8004638:	e7fe      	b.n	8004638 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800463a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800463c:	2b00      	cmp	r3, #0
 800463e:	d109      	bne.n	8004654 <xTaskCreateStatic+0x42>
 8004640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004644:	f383 8811 	msr	BASEPRI, r3
 8004648:	f3bf 8f6f 	isb	sy
 800464c:	f3bf 8f4f 	dsb	sy
 8004650:	61fb      	str	r3, [r7, #28]
 8004652:	e7fe      	b.n	8004652 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004654:	2354      	movs	r3, #84	; 0x54
 8004656:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	2b54      	cmp	r3, #84	; 0x54
 800465c:	d009      	beq.n	8004672 <xTaskCreateStatic+0x60>
 800465e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004662:	f383 8811 	msr	BASEPRI, r3
 8004666:	f3bf 8f6f 	isb	sy
 800466a:	f3bf 8f4f 	dsb	sy
 800466e:	61bb      	str	r3, [r7, #24]
 8004670:	e7fe      	b.n	8004670 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004674:	2b00      	cmp	r3, #0
 8004676:	d01e      	beq.n	80046b6 <xTaskCreateStatic+0xa4>
 8004678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800467a:	2b00      	cmp	r3, #0
 800467c:	d01b      	beq.n	80046b6 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800467e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004680:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004684:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004686:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468a:	2202      	movs	r2, #2
 800468c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004690:	2300      	movs	r3, #0
 8004692:	9303      	str	r3, [sp, #12]
 8004694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004696:	9302      	str	r3, [sp, #8]
 8004698:	f107 0314 	add.w	r3, r7, #20
 800469c:	9301      	str	r3, [sp, #4]
 800469e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a0:	9300      	str	r3, [sp, #0]
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	68b9      	ldr	r1, [r7, #8]
 80046a8:	68f8      	ldr	r0, [r7, #12]
 80046aa:	f000 f850 	bl	800474e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80046ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80046b0:	f000 f8cc 	bl	800484c <prvAddNewTaskToReadyList>
 80046b4:	e001      	b.n	80046ba <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80046b6:	2300      	movs	r3, #0
 80046b8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80046ba:	697b      	ldr	r3, [r7, #20]
	}
 80046bc:	4618      	mov	r0, r3
 80046be:	3728      	adds	r7, #40	; 0x28
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b08c      	sub	sp, #48	; 0x30
 80046c8:	af04      	add	r7, sp, #16
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	603b      	str	r3, [r7, #0]
 80046d0:	4613      	mov	r3, r2
 80046d2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046d4:	88fb      	ldrh	r3, [r7, #6]
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	4618      	mov	r0, r3
 80046da:	f001 f9d1 	bl	8005a80 <pvPortMalloc>
 80046de:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00e      	beq.n	8004704 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80046e6:	2054      	movs	r0, #84	; 0x54
 80046e8:	f001 f9ca 	bl	8005a80 <pvPortMalloc>
 80046ec:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d003      	beq.n	80046fc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	697a      	ldr	r2, [r7, #20]
 80046f8:	631a      	str	r2, [r3, #48]	; 0x30
 80046fa:	e005      	b.n	8004708 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80046fc:	6978      	ldr	r0, [r7, #20]
 80046fe:	f001 fa81 	bl	8005c04 <vPortFree>
 8004702:	e001      	b.n	8004708 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004704:	2300      	movs	r3, #0
 8004706:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d017      	beq.n	800473e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004716:	88fa      	ldrh	r2, [r7, #6]
 8004718:	2300      	movs	r3, #0
 800471a:	9303      	str	r3, [sp, #12]
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	9302      	str	r3, [sp, #8]
 8004720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004722:	9301      	str	r3, [sp, #4]
 8004724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004726:	9300      	str	r3, [sp, #0]
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	68b9      	ldr	r1, [r7, #8]
 800472c:	68f8      	ldr	r0, [r7, #12]
 800472e:	f000 f80e 	bl	800474e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004732:	69f8      	ldr	r0, [r7, #28]
 8004734:	f000 f88a 	bl	800484c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004738:	2301      	movs	r3, #1
 800473a:	61bb      	str	r3, [r7, #24]
 800473c:	e002      	b.n	8004744 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800473e:	f04f 33ff 	mov.w	r3, #4294967295
 8004742:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004744:	69bb      	ldr	r3, [r7, #24]
	}
 8004746:	4618      	mov	r0, r3
 8004748:	3720      	adds	r7, #32
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}

0800474e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800474e:	b580      	push	{r7, lr}
 8004750:	b088      	sub	sp, #32
 8004752:	af00      	add	r7, sp, #0
 8004754:	60f8      	str	r0, [r7, #12]
 8004756:	60b9      	str	r1, [r7, #8]
 8004758:	607a      	str	r2, [r7, #4]
 800475a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800475c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800475e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004766:	3b01      	subs	r3, #1
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	4413      	add	r3, r2
 800476c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	f023 0307 	bic.w	r3, r3, #7
 8004774:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	f003 0307 	and.w	r3, r3, #7
 800477c:	2b00      	cmp	r3, #0
 800477e:	d009      	beq.n	8004794 <prvInitialiseNewTask+0x46>
 8004780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004784:	f383 8811 	msr	BASEPRI, r3
 8004788:	f3bf 8f6f 	isb	sy
 800478c:	f3bf 8f4f 	dsb	sy
 8004790:	617b      	str	r3, [r7, #20]
 8004792:	e7fe      	b.n	8004792 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004794:	2300      	movs	r3, #0
 8004796:	61fb      	str	r3, [r7, #28]
 8004798:	e012      	b.n	80047c0 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800479a:	68ba      	ldr	r2, [r7, #8]
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	4413      	add	r3, r2
 80047a0:	7819      	ldrb	r1, [r3, #0]
 80047a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	4413      	add	r3, r2
 80047a8:	3334      	adds	r3, #52	; 0x34
 80047aa:	460a      	mov	r2, r1
 80047ac:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80047ae:	68ba      	ldr	r2, [r7, #8]
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	4413      	add	r3, r2
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d006      	beq.n	80047c8 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	3301      	adds	r3, #1
 80047be:	61fb      	str	r3, [r7, #28]
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	2b0f      	cmp	r3, #15
 80047c4:	d9e9      	bls.n	800479a <prvInitialiseNewTask+0x4c>
 80047c6:	e000      	b.n	80047ca <prvInitialiseNewTask+0x7c>
		{
			break;
 80047c8:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80047ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80047d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d4:	2b06      	cmp	r3, #6
 80047d6:	d901      	bls.n	80047dc <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80047d8:	2306      	movs	r3, #6
 80047da:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80047dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047e0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80047e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047e6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80047e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ea:	2200      	movs	r2, #0
 80047ec:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80047ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f0:	3304      	adds	r3, #4
 80047f2:	4618      	mov	r0, r3
 80047f4:	f7ff f835 	bl	8003862 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80047f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047fa:	3318      	adds	r3, #24
 80047fc:	4618      	mov	r0, r3
 80047fe:	f7ff f830 	bl	8003862 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004804:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004806:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800480a:	f1c3 0207 	rsb	r2, r3, #7
 800480e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004810:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004814:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004816:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800481a:	2200      	movs	r2, #0
 800481c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800481e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004820:	2200      	movs	r2, #0
 8004822:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004826:	683a      	ldr	r2, [r7, #0]
 8004828:	68f9      	ldr	r1, [r7, #12]
 800482a:	69b8      	ldr	r0, [r7, #24]
 800482c:	f000 feea 	bl	8005604 <pxPortInitialiseStack>
 8004830:	4602      	mov	r2, r0
 8004832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004834:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004838:	2b00      	cmp	r3, #0
 800483a:	d002      	beq.n	8004842 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800483c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800483e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004840:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004842:	bf00      	nop
 8004844:	3720      	adds	r7, #32
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
	...

0800484c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004854:	f000 fffa 	bl	800584c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004858:	4b2a      	ldr	r3, [pc, #168]	; (8004904 <prvAddNewTaskToReadyList+0xb8>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	3301      	adds	r3, #1
 800485e:	4a29      	ldr	r2, [pc, #164]	; (8004904 <prvAddNewTaskToReadyList+0xb8>)
 8004860:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004862:	4b29      	ldr	r3, [pc, #164]	; (8004908 <prvAddNewTaskToReadyList+0xbc>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d109      	bne.n	800487e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800486a:	4a27      	ldr	r2, [pc, #156]	; (8004908 <prvAddNewTaskToReadyList+0xbc>)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004870:	4b24      	ldr	r3, [pc, #144]	; (8004904 <prvAddNewTaskToReadyList+0xb8>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2b01      	cmp	r3, #1
 8004876:	d110      	bne.n	800489a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004878:	f000 fbc4 	bl	8005004 <prvInitialiseTaskLists>
 800487c:	e00d      	b.n	800489a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800487e:	4b23      	ldr	r3, [pc, #140]	; (800490c <prvAddNewTaskToReadyList+0xc0>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d109      	bne.n	800489a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004886:	4b20      	ldr	r3, [pc, #128]	; (8004908 <prvAddNewTaskToReadyList+0xbc>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004890:	429a      	cmp	r2, r3
 8004892:	d802      	bhi.n	800489a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004894:	4a1c      	ldr	r2, [pc, #112]	; (8004908 <prvAddNewTaskToReadyList+0xbc>)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800489a:	4b1d      	ldr	r3, [pc, #116]	; (8004910 <prvAddNewTaskToReadyList+0xc4>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	3301      	adds	r3, #1
 80048a0:	4a1b      	ldr	r2, [pc, #108]	; (8004910 <prvAddNewTaskToReadyList+0xc4>)
 80048a2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a8:	2201      	movs	r2, #1
 80048aa:	409a      	lsls	r2, r3
 80048ac:	4b19      	ldr	r3, [pc, #100]	; (8004914 <prvAddNewTaskToReadyList+0xc8>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	4a18      	ldr	r2, [pc, #96]	; (8004914 <prvAddNewTaskToReadyList+0xc8>)
 80048b4:	6013      	str	r3, [r2, #0]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048ba:	4613      	mov	r3, r2
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	4413      	add	r3, r2
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	4a15      	ldr	r2, [pc, #84]	; (8004918 <prvAddNewTaskToReadyList+0xcc>)
 80048c4:	441a      	add	r2, r3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	3304      	adds	r3, #4
 80048ca:	4619      	mov	r1, r3
 80048cc:	4610      	mov	r0, r2
 80048ce:	f7fe ffd5 	bl	800387c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80048d2:	f000 ffe9 	bl	80058a8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80048d6:	4b0d      	ldr	r3, [pc, #52]	; (800490c <prvAddNewTaskToReadyList+0xc0>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00e      	beq.n	80048fc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80048de:	4b0a      	ldr	r3, [pc, #40]	; (8004908 <prvAddNewTaskToReadyList+0xbc>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d207      	bcs.n	80048fc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80048ec:	4b0b      	ldr	r3, [pc, #44]	; (800491c <prvAddNewTaskToReadyList+0xd0>)
 80048ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048f2:	601a      	str	r2, [r3, #0]
 80048f4:	f3bf 8f4f 	dsb	sy
 80048f8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80048fc:	bf00      	nop
 80048fe:	3708      	adds	r7, #8
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}
 8004904:	20000380 	.word	0x20000380
 8004908:	20000280 	.word	0x20000280
 800490c:	2000038c 	.word	0x2000038c
 8004910:	2000039c 	.word	0x2000039c
 8004914:	20000388 	.word	0x20000388
 8004918:	20000284 	.word	0x20000284
 800491c:	e000ed04 	.word	0xe000ed04

08004920 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004928:	2300      	movs	r3, #0
 800492a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d016      	beq.n	8004960 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004932:	4b13      	ldr	r3, [pc, #76]	; (8004980 <vTaskDelay+0x60>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d009      	beq.n	800494e <vTaskDelay+0x2e>
 800493a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800493e:	f383 8811 	msr	BASEPRI, r3
 8004942:	f3bf 8f6f 	isb	sy
 8004946:	f3bf 8f4f 	dsb	sy
 800494a:	60bb      	str	r3, [r7, #8]
 800494c:	e7fe      	b.n	800494c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800494e:	f000 f879 	bl	8004a44 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004952:	2100      	movs	r1, #0
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f000 fdef 	bl	8005538 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800495a:	f000 f881 	bl	8004a60 <xTaskResumeAll>
 800495e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d107      	bne.n	8004976 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004966:	4b07      	ldr	r3, [pc, #28]	; (8004984 <vTaskDelay+0x64>)
 8004968:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800496c:	601a      	str	r2, [r3, #0]
 800496e:	f3bf 8f4f 	dsb	sy
 8004972:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004976:	bf00      	nop
 8004978:	3710      	adds	r7, #16
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	200003a8 	.word	0x200003a8
 8004984:	e000ed04 	.word	0xe000ed04

08004988 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b08a      	sub	sp, #40	; 0x28
 800498c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800498e:	2300      	movs	r3, #0
 8004990:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004992:	2300      	movs	r3, #0
 8004994:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004996:	463a      	mov	r2, r7
 8004998:	1d39      	adds	r1, r7, #4
 800499a:	f107 0308 	add.w	r3, r7, #8
 800499e:	4618      	mov	r0, r3
 80049a0:	f7fb fd9e 	bl	80004e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80049a4:	6839      	ldr	r1, [r7, #0]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	68ba      	ldr	r2, [r7, #8]
 80049aa:	9202      	str	r2, [sp, #8]
 80049ac:	9301      	str	r3, [sp, #4]
 80049ae:	2300      	movs	r3, #0
 80049b0:	9300      	str	r3, [sp, #0]
 80049b2:	2300      	movs	r3, #0
 80049b4:	460a      	mov	r2, r1
 80049b6:	491d      	ldr	r1, [pc, #116]	; (8004a2c <vTaskStartScheduler+0xa4>)
 80049b8:	481d      	ldr	r0, [pc, #116]	; (8004a30 <vTaskStartScheduler+0xa8>)
 80049ba:	f7ff fe2a 	bl	8004612 <xTaskCreateStatic>
 80049be:	4602      	mov	r2, r0
 80049c0:	4b1c      	ldr	r3, [pc, #112]	; (8004a34 <vTaskStartScheduler+0xac>)
 80049c2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80049c4:	4b1b      	ldr	r3, [pc, #108]	; (8004a34 <vTaskStartScheduler+0xac>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d002      	beq.n	80049d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80049cc:	2301      	movs	r3, #1
 80049ce:	617b      	str	r3, [r7, #20]
 80049d0:	e001      	b.n	80049d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80049d2:	2300      	movs	r3, #0
 80049d4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d115      	bne.n	8004a08 <vTaskStartScheduler+0x80>
 80049dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e0:	f383 8811 	msr	BASEPRI, r3
 80049e4:	f3bf 8f6f 	isb	sy
 80049e8:	f3bf 8f4f 	dsb	sy
 80049ec:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80049ee:	4b12      	ldr	r3, [pc, #72]	; (8004a38 <vTaskStartScheduler+0xb0>)
 80049f0:	f04f 32ff 	mov.w	r2, #4294967295
 80049f4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80049f6:	4b11      	ldr	r3, [pc, #68]	; (8004a3c <vTaskStartScheduler+0xb4>)
 80049f8:	2201      	movs	r2, #1
 80049fa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80049fc:	4b10      	ldr	r3, [pc, #64]	; (8004a40 <vTaskStartScheduler+0xb8>)
 80049fe:	2200      	movs	r2, #0
 8004a00:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004a02:	f000 fe85 	bl	8005710 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004a06:	e00d      	b.n	8004a24 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a0e:	d109      	bne.n	8004a24 <vTaskStartScheduler+0x9c>
 8004a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a14:	f383 8811 	msr	BASEPRI, r3
 8004a18:	f3bf 8f6f 	isb	sy
 8004a1c:	f3bf 8f4f 	dsb	sy
 8004a20:	60fb      	str	r3, [r7, #12]
 8004a22:	e7fe      	b.n	8004a22 <vTaskStartScheduler+0x9a>
}
 8004a24:	bf00      	nop
 8004a26:	3718      	adds	r7, #24
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	08005f78 	.word	0x08005f78
 8004a30:	08004fd5 	.word	0x08004fd5
 8004a34:	200003a4 	.word	0x200003a4
 8004a38:	200003a0 	.word	0x200003a0
 8004a3c:	2000038c 	.word	0x2000038c
 8004a40:	20000384 	.word	0x20000384

08004a44 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004a44:	b480      	push	{r7}
 8004a46:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004a48:	4b04      	ldr	r3, [pc, #16]	; (8004a5c <vTaskSuspendAll+0x18>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	3301      	adds	r3, #1
 8004a4e:	4a03      	ldr	r2, [pc, #12]	; (8004a5c <vTaskSuspendAll+0x18>)
 8004a50:	6013      	str	r3, [r2, #0]
}
 8004a52:	bf00      	nop
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr
 8004a5c:	200003a8 	.word	0x200003a8

08004a60 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004a66:	2300      	movs	r3, #0
 8004a68:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004a6e:	4b41      	ldr	r3, [pc, #260]	; (8004b74 <xTaskResumeAll+0x114>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d109      	bne.n	8004a8a <xTaskResumeAll+0x2a>
 8004a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a7a:	f383 8811 	msr	BASEPRI, r3
 8004a7e:	f3bf 8f6f 	isb	sy
 8004a82:	f3bf 8f4f 	dsb	sy
 8004a86:	603b      	str	r3, [r7, #0]
 8004a88:	e7fe      	b.n	8004a88 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004a8a:	f000 fedf 	bl	800584c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004a8e:	4b39      	ldr	r3, [pc, #228]	; (8004b74 <xTaskResumeAll+0x114>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	3b01      	subs	r3, #1
 8004a94:	4a37      	ldr	r2, [pc, #220]	; (8004b74 <xTaskResumeAll+0x114>)
 8004a96:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a98:	4b36      	ldr	r3, [pc, #216]	; (8004b74 <xTaskResumeAll+0x114>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d161      	bne.n	8004b64 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004aa0:	4b35      	ldr	r3, [pc, #212]	; (8004b78 <xTaskResumeAll+0x118>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d05d      	beq.n	8004b64 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004aa8:	e02e      	b.n	8004b08 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004aaa:	4b34      	ldr	r3, [pc, #208]	; (8004b7c <xTaskResumeAll+0x11c>)
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	3318      	adds	r3, #24
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f7fe ff3d 	bl	8003936 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	3304      	adds	r3, #4
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f7fe ff38 	bl	8003936 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aca:	2201      	movs	r2, #1
 8004acc:	409a      	lsls	r2, r3
 8004ace:	4b2c      	ldr	r3, [pc, #176]	; (8004b80 <xTaskResumeAll+0x120>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	4a2a      	ldr	r2, [pc, #168]	; (8004b80 <xTaskResumeAll+0x120>)
 8004ad6:	6013      	str	r3, [r2, #0]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004adc:	4613      	mov	r3, r2
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	4413      	add	r3, r2
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	4a27      	ldr	r2, [pc, #156]	; (8004b84 <xTaskResumeAll+0x124>)
 8004ae6:	441a      	add	r2, r3
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	3304      	adds	r3, #4
 8004aec:	4619      	mov	r1, r3
 8004aee:	4610      	mov	r0, r2
 8004af0:	f7fe fec4 	bl	800387c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004af8:	4b23      	ldr	r3, [pc, #140]	; (8004b88 <xTaskResumeAll+0x128>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d302      	bcc.n	8004b08 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8004b02:	4b22      	ldr	r3, [pc, #136]	; (8004b8c <xTaskResumeAll+0x12c>)
 8004b04:	2201      	movs	r2, #1
 8004b06:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b08:	4b1c      	ldr	r3, [pc, #112]	; (8004b7c <xTaskResumeAll+0x11c>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d1cc      	bne.n	8004aaa <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d001      	beq.n	8004b1a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004b16:	f000 fb0f 	bl	8005138 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004b1a:	4b1d      	ldr	r3, [pc, #116]	; (8004b90 <xTaskResumeAll+0x130>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d010      	beq.n	8004b48 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004b26:	f000 f837 	bl	8004b98 <xTaskIncrementTick>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d002      	beq.n	8004b36 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8004b30:	4b16      	ldr	r3, [pc, #88]	; (8004b8c <xTaskResumeAll+0x12c>)
 8004b32:	2201      	movs	r2, #1
 8004b34:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d1f1      	bne.n	8004b26 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8004b42:	4b13      	ldr	r3, [pc, #76]	; (8004b90 <xTaskResumeAll+0x130>)
 8004b44:	2200      	movs	r2, #0
 8004b46:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004b48:	4b10      	ldr	r3, [pc, #64]	; (8004b8c <xTaskResumeAll+0x12c>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d009      	beq.n	8004b64 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004b50:	2301      	movs	r3, #1
 8004b52:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004b54:	4b0f      	ldr	r3, [pc, #60]	; (8004b94 <xTaskResumeAll+0x134>)
 8004b56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b5a:	601a      	str	r2, [r3, #0]
 8004b5c:	f3bf 8f4f 	dsb	sy
 8004b60:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b64:	f000 fea0 	bl	80058a8 <vPortExitCritical>

	return xAlreadyYielded;
 8004b68:	68bb      	ldr	r3, [r7, #8]
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3710      	adds	r7, #16
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	200003a8 	.word	0x200003a8
 8004b78:	20000380 	.word	0x20000380
 8004b7c:	20000340 	.word	0x20000340
 8004b80:	20000388 	.word	0x20000388
 8004b84:	20000284 	.word	0x20000284
 8004b88:	20000280 	.word	0x20000280
 8004b8c:	20000394 	.word	0x20000394
 8004b90:	20000390 	.word	0x20000390
 8004b94:	e000ed04 	.word	0xe000ed04

08004b98 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b086      	sub	sp, #24
 8004b9c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ba2:	4b50      	ldr	r3, [pc, #320]	; (8004ce4 <xTaskIncrementTick+0x14c>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	f040 808c 	bne.w	8004cc4 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004bac:	4b4e      	ldr	r3, [pc, #312]	; (8004ce8 <xTaskIncrementTick+0x150>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	3301      	adds	r3, #1
 8004bb2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004bb4:	4a4c      	ldr	r2, [pc, #304]	; (8004ce8 <xTaskIncrementTick+0x150>)
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d11f      	bne.n	8004c00 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004bc0:	4b4a      	ldr	r3, [pc, #296]	; (8004cec <xTaskIncrementTick+0x154>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d009      	beq.n	8004bde <xTaskIncrementTick+0x46>
 8004bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bce:	f383 8811 	msr	BASEPRI, r3
 8004bd2:	f3bf 8f6f 	isb	sy
 8004bd6:	f3bf 8f4f 	dsb	sy
 8004bda:	603b      	str	r3, [r7, #0]
 8004bdc:	e7fe      	b.n	8004bdc <xTaskIncrementTick+0x44>
 8004bde:	4b43      	ldr	r3, [pc, #268]	; (8004cec <xTaskIncrementTick+0x154>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	60fb      	str	r3, [r7, #12]
 8004be4:	4b42      	ldr	r3, [pc, #264]	; (8004cf0 <xTaskIncrementTick+0x158>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a40      	ldr	r2, [pc, #256]	; (8004cec <xTaskIncrementTick+0x154>)
 8004bea:	6013      	str	r3, [r2, #0]
 8004bec:	4a40      	ldr	r2, [pc, #256]	; (8004cf0 <xTaskIncrementTick+0x158>)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6013      	str	r3, [r2, #0]
 8004bf2:	4b40      	ldr	r3, [pc, #256]	; (8004cf4 <xTaskIncrementTick+0x15c>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	4a3e      	ldr	r2, [pc, #248]	; (8004cf4 <xTaskIncrementTick+0x15c>)
 8004bfa:	6013      	str	r3, [r2, #0]
 8004bfc:	f000 fa9c 	bl	8005138 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004c00:	4b3d      	ldr	r3, [pc, #244]	; (8004cf8 <xTaskIncrementTick+0x160>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	693a      	ldr	r2, [r7, #16]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d34d      	bcc.n	8004ca6 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c0a:	4b38      	ldr	r3, [pc, #224]	; (8004cec <xTaskIncrementTick+0x154>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d101      	bne.n	8004c18 <xTaskIncrementTick+0x80>
 8004c14:	2301      	movs	r3, #1
 8004c16:	e000      	b.n	8004c1a <xTaskIncrementTick+0x82>
 8004c18:	2300      	movs	r3, #0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d004      	beq.n	8004c28 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c1e:	4b36      	ldr	r3, [pc, #216]	; (8004cf8 <xTaskIncrementTick+0x160>)
 8004c20:	f04f 32ff 	mov.w	r2, #4294967295
 8004c24:	601a      	str	r2, [r3, #0]
					break;
 8004c26:	e03e      	b.n	8004ca6 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004c28:	4b30      	ldr	r3, [pc, #192]	; (8004cec <xTaskIncrementTick+0x154>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004c38:	693a      	ldr	r2, [r7, #16]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d203      	bcs.n	8004c48 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004c40:	4a2d      	ldr	r2, [pc, #180]	; (8004cf8 <xTaskIncrementTick+0x160>)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6013      	str	r3, [r2, #0]
						break;
 8004c46:	e02e      	b.n	8004ca6 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	3304      	adds	r3, #4
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f7fe fe72 	bl	8003936 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d004      	beq.n	8004c64 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	3318      	adds	r3, #24
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f7fe fe69 	bl	8003936 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c68:	2201      	movs	r2, #1
 8004c6a:	409a      	lsls	r2, r3
 8004c6c:	4b23      	ldr	r3, [pc, #140]	; (8004cfc <xTaskIncrementTick+0x164>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	4a22      	ldr	r2, [pc, #136]	; (8004cfc <xTaskIncrementTick+0x164>)
 8004c74:	6013      	str	r3, [r2, #0]
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c7a:	4613      	mov	r3, r2
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	4413      	add	r3, r2
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	4a1f      	ldr	r2, [pc, #124]	; (8004d00 <xTaskIncrementTick+0x168>)
 8004c84:	441a      	add	r2, r3
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	3304      	adds	r3, #4
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	4610      	mov	r0, r2
 8004c8e:	f7fe fdf5 	bl	800387c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c96:	4b1b      	ldr	r3, [pc, #108]	; (8004d04 <xTaskIncrementTick+0x16c>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d3b4      	bcc.n	8004c0a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ca4:	e7b1      	b.n	8004c0a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004ca6:	4b17      	ldr	r3, [pc, #92]	; (8004d04 <xTaskIncrementTick+0x16c>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cac:	4914      	ldr	r1, [pc, #80]	; (8004d00 <xTaskIncrementTick+0x168>)
 8004cae:	4613      	mov	r3, r2
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	4413      	add	r3, r2
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	440b      	add	r3, r1
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d907      	bls.n	8004cce <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	617b      	str	r3, [r7, #20]
 8004cc2:	e004      	b.n	8004cce <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004cc4:	4b10      	ldr	r3, [pc, #64]	; (8004d08 <xTaskIncrementTick+0x170>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	3301      	adds	r3, #1
 8004cca:	4a0f      	ldr	r2, [pc, #60]	; (8004d08 <xTaskIncrementTick+0x170>)
 8004ccc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004cce:	4b0f      	ldr	r3, [pc, #60]	; (8004d0c <xTaskIncrementTick+0x174>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d001      	beq.n	8004cda <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004cda:	697b      	ldr	r3, [r7, #20]
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3718      	adds	r7, #24
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	200003a8 	.word	0x200003a8
 8004ce8:	20000384 	.word	0x20000384
 8004cec:	20000338 	.word	0x20000338
 8004cf0:	2000033c 	.word	0x2000033c
 8004cf4:	20000398 	.word	0x20000398
 8004cf8:	200003a0 	.word	0x200003a0
 8004cfc:	20000388 	.word	0x20000388
 8004d00:	20000284 	.word	0x20000284
 8004d04:	20000280 	.word	0x20000280
 8004d08:	20000390 	.word	0x20000390
 8004d0c:	20000394 	.word	0x20000394

08004d10 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004d10:	b480      	push	{r7}
 8004d12:	b087      	sub	sp, #28
 8004d14:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004d16:	4b26      	ldr	r3, [pc, #152]	; (8004db0 <vTaskSwitchContext+0xa0>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d003      	beq.n	8004d26 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004d1e:	4b25      	ldr	r3, [pc, #148]	; (8004db4 <vTaskSwitchContext+0xa4>)
 8004d20:	2201      	movs	r2, #1
 8004d22:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004d24:	e03e      	b.n	8004da4 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8004d26:	4b23      	ldr	r3, [pc, #140]	; (8004db4 <vTaskSwitchContext+0xa4>)
 8004d28:	2200      	movs	r2, #0
 8004d2a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004d2c:	4b22      	ldr	r3, [pc, #136]	; (8004db8 <vTaskSwitchContext+0xa8>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	fab3 f383 	clz	r3, r3
 8004d38:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004d3a:	7afb      	ldrb	r3, [r7, #11]
 8004d3c:	f1c3 031f 	rsb	r3, r3, #31
 8004d40:	617b      	str	r3, [r7, #20]
 8004d42:	491e      	ldr	r1, [pc, #120]	; (8004dbc <vTaskSwitchContext+0xac>)
 8004d44:	697a      	ldr	r2, [r7, #20]
 8004d46:	4613      	mov	r3, r2
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	4413      	add	r3, r2
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	440b      	add	r3, r1
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d109      	bne.n	8004d6a <vTaskSwitchContext+0x5a>
	__asm volatile
 8004d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d5a:	f383 8811 	msr	BASEPRI, r3
 8004d5e:	f3bf 8f6f 	isb	sy
 8004d62:	f3bf 8f4f 	dsb	sy
 8004d66:	607b      	str	r3, [r7, #4]
 8004d68:	e7fe      	b.n	8004d68 <vTaskSwitchContext+0x58>
 8004d6a:	697a      	ldr	r2, [r7, #20]
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	4413      	add	r3, r2
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	4a11      	ldr	r2, [pc, #68]	; (8004dbc <vTaskSwitchContext+0xac>)
 8004d76:	4413      	add	r3, r2
 8004d78:	613b      	str	r3, [r7, #16]
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	685a      	ldr	r2, [r3, #4]
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	605a      	str	r2, [r3, #4]
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	685a      	ldr	r2, [r3, #4]
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	3308      	adds	r3, #8
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d104      	bne.n	8004d9a <vTaskSwitchContext+0x8a>
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	685a      	ldr	r2, [r3, #4]
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	605a      	str	r2, [r3, #4]
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	4a07      	ldr	r2, [pc, #28]	; (8004dc0 <vTaskSwitchContext+0xb0>)
 8004da2:	6013      	str	r3, [r2, #0]
}
 8004da4:	bf00      	nop
 8004da6:	371c      	adds	r7, #28
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr
 8004db0:	200003a8 	.word	0x200003a8
 8004db4:	20000394 	.word	0x20000394
 8004db8:	20000388 	.word	0x20000388
 8004dbc:	20000284 	.word	0x20000284
 8004dc0:	20000280 	.word	0x20000280

08004dc4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d109      	bne.n	8004de8 <vTaskPlaceOnEventList+0x24>
 8004dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd8:	f383 8811 	msr	BASEPRI, r3
 8004ddc:	f3bf 8f6f 	isb	sy
 8004de0:	f3bf 8f4f 	dsb	sy
 8004de4:	60fb      	str	r3, [r7, #12]
 8004de6:	e7fe      	b.n	8004de6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004de8:	4b07      	ldr	r3, [pc, #28]	; (8004e08 <vTaskPlaceOnEventList+0x44>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	3318      	adds	r3, #24
 8004dee:	4619      	mov	r1, r3
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f7fe fd67 	bl	80038c4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004df6:	2101      	movs	r1, #1
 8004df8:	6838      	ldr	r0, [r7, #0]
 8004dfa:	f000 fb9d 	bl	8005538 <prvAddCurrentTaskToDelayedList>
}
 8004dfe:	bf00      	nop
 8004e00:	3710      	adds	r7, #16
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	20000280 	.word	0x20000280

08004e0c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b086      	sub	sp, #24
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d109      	bne.n	8004e36 <xTaskRemoveFromEventList+0x2a>
 8004e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e26:	f383 8811 	msr	BASEPRI, r3
 8004e2a:	f3bf 8f6f 	isb	sy
 8004e2e:	f3bf 8f4f 	dsb	sy
 8004e32:	60fb      	str	r3, [r7, #12]
 8004e34:	e7fe      	b.n	8004e34 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	3318      	adds	r3, #24
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f7fe fd7b 	bl	8003936 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e40:	4b1d      	ldr	r3, [pc, #116]	; (8004eb8 <xTaskRemoveFromEventList+0xac>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d11c      	bne.n	8004e82 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	3304      	adds	r3, #4
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f7fe fd72 	bl	8003936 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e56:	2201      	movs	r2, #1
 8004e58:	409a      	lsls	r2, r3
 8004e5a:	4b18      	ldr	r3, [pc, #96]	; (8004ebc <xTaskRemoveFromEventList+0xb0>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	4a16      	ldr	r2, [pc, #88]	; (8004ebc <xTaskRemoveFromEventList+0xb0>)
 8004e62:	6013      	str	r3, [r2, #0]
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e68:	4613      	mov	r3, r2
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	4413      	add	r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	4a13      	ldr	r2, [pc, #76]	; (8004ec0 <xTaskRemoveFromEventList+0xb4>)
 8004e72:	441a      	add	r2, r3
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	3304      	adds	r3, #4
 8004e78:	4619      	mov	r1, r3
 8004e7a:	4610      	mov	r0, r2
 8004e7c:	f7fe fcfe 	bl	800387c <vListInsertEnd>
 8004e80:	e005      	b.n	8004e8e <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	3318      	adds	r3, #24
 8004e86:	4619      	mov	r1, r3
 8004e88:	480e      	ldr	r0, [pc, #56]	; (8004ec4 <xTaskRemoveFromEventList+0xb8>)
 8004e8a:	f7fe fcf7 	bl	800387c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e92:	4b0d      	ldr	r3, [pc, #52]	; (8004ec8 <xTaskRemoveFromEventList+0xbc>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d905      	bls.n	8004ea8 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004ea0:	4b0a      	ldr	r3, [pc, #40]	; (8004ecc <xTaskRemoveFromEventList+0xc0>)
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	601a      	str	r2, [r3, #0]
 8004ea6:	e001      	b.n	8004eac <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004eac:	697b      	ldr	r3, [r7, #20]
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3718      	adds	r7, #24
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	200003a8 	.word	0x200003a8
 8004ebc:	20000388 	.word	0x20000388
 8004ec0:	20000284 	.word	0x20000284
 8004ec4:	20000340 	.word	0x20000340
 8004ec8:	20000280 	.word	0x20000280
 8004ecc:	20000394 	.word	0x20000394

08004ed0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004ed8:	4b06      	ldr	r3, [pc, #24]	; (8004ef4 <vTaskInternalSetTimeOutState+0x24>)
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004ee0:	4b05      	ldr	r3, [pc, #20]	; (8004ef8 <vTaskInternalSetTimeOutState+0x28>)
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	605a      	str	r2, [r3, #4]
}
 8004ee8:	bf00      	nop
 8004eea:	370c      	adds	r7, #12
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr
 8004ef4:	20000398 	.word	0x20000398
 8004ef8:	20000384 	.word	0x20000384

08004efc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b088      	sub	sp, #32
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d109      	bne.n	8004f20 <xTaskCheckForTimeOut+0x24>
 8004f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f10:	f383 8811 	msr	BASEPRI, r3
 8004f14:	f3bf 8f6f 	isb	sy
 8004f18:	f3bf 8f4f 	dsb	sy
 8004f1c:	613b      	str	r3, [r7, #16]
 8004f1e:	e7fe      	b.n	8004f1e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d109      	bne.n	8004f3a <xTaskCheckForTimeOut+0x3e>
 8004f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f2a:	f383 8811 	msr	BASEPRI, r3
 8004f2e:	f3bf 8f6f 	isb	sy
 8004f32:	f3bf 8f4f 	dsb	sy
 8004f36:	60fb      	str	r3, [r7, #12]
 8004f38:	e7fe      	b.n	8004f38 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004f3a:	f000 fc87 	bl	800584c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004f3e:	4b1d      	ldr	r3, [pc, #116]	; (8004fb4 <xTaskCheckForTimeOut+0xb8>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	69ba      	ldr	r2, [r7, #24]
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f56:	d102      	bne.n	8004f5e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	61fb      	str	r3, [r7, #28]
 8004f5c:	e023      	b.n	8004fa6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	4b15      	ldr	r3, [pc, #84]	; (8004fb8 <xTaskCheckForTimeOut+0xbc>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d007      	beq.n	8004f7a <xTaskCheckForTimeOut+0x7e>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	69ba      	ldr	r2, [r7, #24]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d302      	bcc.n	8004f7a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004f74:	2301      	movs	r3, #1
 8004f76:	61fb      	str	r3, [r7, #28]
 8004f78:	e015      	b.n	8004fa6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	697a      	ldr	r2, [r7, #20]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d20b      	bcs.n	8004f9c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	1ad2      	subs	r2, r2, r3
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f7ff ff9d 	bl	8004ed0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004f96:	2300      	movs	r3, #0
 8004f98:	61fb      	str	r3, [r7, #28]
 8004f9a:	e004      	b.n	8004fa6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004fa6:	f000 fc7f 	bl	80058a8 <vPortExitCritical>

	return xReturn;
 8004faa:	69fb      	ldr	r3, [r7, #28]
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3720      	adds	r7, #32
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	20000384 	.word	0x20000384
 8004fb8:	20000398 	.word	0x20000398

08004fbc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004fc0:	4b03      	ldr	r3, [pc, #12]	; (8004fd0 <vTaskMissedYield+0x14>)
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	601a      	str	r2, [r3, #0]
}
 8004fc6:	bf00      	nop
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr
 8004fd0:	20000394 	.word	0x20000394

08004fd4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004fdc:	f000 f852 	bl	8005084 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004fe0:	4b06      	ldr	r3, [pc, #24]	; (8004ffc <prvIdleTask+0x28>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d9f9      	bls.n	8004fdc <prvIdleTask+0x8>
			{
				taskYIELD();
 8004fe8:	4b05      	ldr	r3, [pc, #20]	; (8005000 <prvIdleTask+0x2c>)
 8004fea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fee:	601a      	str	r2, [r3, #0]
 8004ff0:	f3bf 8f4f 	dsb	sy
 8004ff4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004ff8:	e7f0      	b.n	8004fdc <prvIdleTask+0x8>
 8004ffa:	bf00      	nop
 8004ffc:	20000284 	.word	0x20000284
 8005000:	e000ed04 	.word	0xe000ed04

08005004 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800500a:	2300      	movs	r3, #0
 800500c:	607b      	str	r3, [r7, #4]
 800500e:	e00c      	b.n	800502a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	4613      	mov	r3, r2
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	4413      	add	r3, r2
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	4a12      	ldr	r2, [pc, #72]	; (8005064 <prvInitialiseTaskLists+0x60>)
 800501c:	4413      	add	r3, r2
 800501e:	4618      	mov	r0, r3
 8005020:	f7fe fbff 	bl	8003822 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	3301      	adds	r3, #1
 8005028:	607b      	str	r3, [r7, #4]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2b06      	cmp	r3, #6
 800502e:	d9ef      	bls.n	8005010 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005030:	480d      	ldr	r0, [pc, #52]	; (8005068 <prvInitialiseTaskLists+0x64>)
 8005032:	f7fe fbf6 	bl	8003822 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005036:	480d      	ldr	r0, [pc, #52]	; (800506c <prvInitialiseTaskLists+0x68>)
 8005038:	f7fe fbf3 	bl	8003822 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800503c:	480c      	ldr	r0, [pc, #48]	; (8005070 <prvInitialiseTaskLists+0x6c>)
 800503e:	f7fe fbf0 	bl	8003822 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005042:	480c      	ldr	r0, [pc, #48]	; (8005074 <prvInitialiseTaskLists+0x70>)
 8005044:	f7fe fbed 	bl	8003822 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005048:	480b      	ldr	r0, [pc, #44]	; (8005078 <prvInitialiseTaskLists+0x74>)
 800504a:	f7fe fbea 	bl	8003822 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800504e:	4b0b      	ldr	r3, [pc, #44]	; (800507c <prvInitialiseTaskLists+0x78>)
 8005050:	4a05      	ldr	r2, [pc, #20]	; (8005068 <prvInitialiseTaskLists+0x64>)
 8005052:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005054:	4b0a      	ldr	r3, [pc, #40]	; (8005080 <prvInitialiseTaskLists+0x7c>)
 8005056:	4a05      	ldr	r2, [pc, #20]	; (800506c <prvInitialiseTaskLists+0x68>)
 8005058:	601a      	str	r2, [r3, #0]
}
 800505a:	bf00      	nop
 800505c:	3708      	adds	r7, #8
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	20000284 	.word	0x20000284
 8005068:	20000310 	.word	0x20000310
 800506c:	20000324 	.word	0x20000324
 8005070:	20000340 	.word	0x20000340
 8005074:	20000354 	.word	0x20000354
 8005078:	2000036c 	.word	0x2000036c
 800507c:	20000338 	.word	0x20000338
 8005080:	2000033c 	.word	0x2000033c

08005084 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b082      	sub	sp, #8
 8005088:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800508a:	e019      	b.n	80050c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800508c:	f000 fbde 	bl	800584c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005090:	4b0f      	ldr	r3, [pc, #60]	; (80050d0 <prvCheckTasksWaitingTermination+0x4c>)
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	3304      	adds	r3, #4
 800509c:	4618      	mov	r0, r3
 800509e:	f7fe fc4a 	bl	8003936 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80050a2:	4b0c      	ldr	r3, [pc, #48]	; (80050d4 <prvCheckTasksWaitingTermination+0x50>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	3b01      	subs	r3, #1
 80050a8:	4a0a      	ldr	r2, [pc, #40]	; (80050d4 <prvCheckTasksWaitingTermination+0x50>)
 80050aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80050ac:	4b0a      	ldr	r3, [pc, #40]	; (80050d8 <prvCheckTasksWaitingTermination+0x54>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	3b01      	subs	r3, #1
 80050b2:	4a09      	ldr	r2, [pc, #36]	; (80050d8 <prvCheckTasksWaitingTermination+0x54>)
 80050b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80050b6:	f000 fbf7 	bl	80058a8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 f80e 	bl	80050dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80050c0:	4b05      	ldr	r3, [pc, #20]	; (80050d8 <prvCheckTasksWaitingTermination+0x54>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1e1      	bne.n	800508c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80050c8:	bf00      	nop
 80050ca:	3708      	adds	r7, #8
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	20000354 	.word	0x20000354
 80050d4:	20000380 	.word	0x20000380
 80050d8:	20000368 	.word	0x20000368

080050dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d108      	bne.n	8005100 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f2:	4618      	mov	r0, r3
 80050f4:	f000 fd86 	bl	8005c04 <vPortFree>
				vPortFree( pxTCB );
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f000 fd83 	bl	8005c04 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80050fe:	e017      	b.n	8005130 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005106:	2b01      	cmp	r3, #1
 8005108:	d103      	bne.n	8005112 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 fd7a 	bl	8005c04 <vPortFree>
	}
 8005110:	e00e      	b.n	8005130 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005118:	2b02      	cmp	r3, #2
 800511a:	d009      	beq.n	8005130 <prvDeleteTCB+0x54>
 800511c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005120:	f383 8811 	msr	BASEPRI, r3
 8005124:	f3bf 8f6f 	isb	sy
 8005128:	f3bf 8f4f 	dsb	sy
 800512c:	60fb      	str	r3, [r7, #12]
 800512e:	e7fe      	b.n	800512e <prvDeleteTCB+0x52>
	}
 8005130:	bf00      	nop
 8005132:	3710      	adds	r7, #16
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}

08005138 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800513e:	4b0f      	ldr	r3, [pc, #60]	; (800517c <prvResetNextTaskUnblockTime+0x44>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d101      	bne.n	800514c <prvResetNextTaskUnblockTime+0x14>
 8005148:	2301      	movs	r3, #1
 800514a:	e000      	b.n	800514e <prvResetNextTaskUnblockTime+0x16>
 800514c:	2300      	movs	r3, #0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d004      	beq.n	800515c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005152:	4b0b      	ldr	r3, [pc, #44]	; (8005180 <prvResetNextTaskUnblockTime+0x48>)
 8005154:	f04f 32ff 	mov.w	r2, #4294967295
 8005158:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800515a:	e008      	b.n	800516e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800515c:	4b07      	ldr	r3, [pc, #28]	; (800517c <prvResetNextTaskUnblockTime+0x44>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	4a05      	ldr	r2, [pc, #20]	; (8005180 <prvResetNextTaskUnblockTime+0x48>)
 800516c:	6013      	str	r3, [r2, #0]
}
 800516e:	bf00      	nop
 8005170:	370c      	adds	r7, #12
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	20000338 	.word	0x20000338
 8005180:	200003a0 	.word	0x200003a0

08005184 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800518a:	4b0b      	ldr	r3, [pc, #44]	; (80051b8 <xTaskGetSchedulerState+0x34>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d102      	bne.n	8005198 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005192:	2301      	movs	r3, #1
 8005194:	607b      	str	r3, [r7, #4]
 8005196:	e008      	b.n	80051aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005198:	4b08      	ldr	r3, [pc, #32]	; (80051bc <xTaskGetSchedulerState+0x38>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d102      	bne.n	80051a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80051a0:	2302      	movs	r3, #2
 80051a2:	607b      	str	r3, [r7, #4]
 80051a4:	e001      	b.n	80051aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80051a6:	2300      	movs	r3, #0
 80051a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80051aa:	687b      	ldr	r3, [r7, #4]
	}
 80051ac:	4618      	mov	r0, r3
 80051ae:	370c      	adds	r7, #12
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr
 80051b8:	2000038c 	.word	0x2000038c
 80051bc:	200003a8 	.word	0x200003a8

080051c0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80051cc:	2300      	movs	r3, #0
 80051ce:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d06e      	beq.n	80052b4 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051da:	4b39      	ldr	r3, [pc, #228]	; (80052c0 <xTaskPriorityInherit+0x100>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d25e      	bcs.n	80052a2 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	699b      	ldr	r3, [r3, #24]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	db06      	blt.n	80051fa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051ec:	4b34      	ldr	r3, [pc, #208]	; (80052c0 <xTaskPriorityInherit+0x100>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f2:	f1c3 0207 	rsb	r2, r3, #7
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	6959      	ldr	r1, [r3, #20]
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005202:	4613      	mov	r3, r2
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	4413      	add	r3, r2
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	4a2e      	ldr	r2, [pc, #184]	; (80052c4 <xTaskPriorityInherit+0x104>)
 800520c:	4413      	add	r3, r2
 800520e:	4299      	cmp	r1, r3
 8005210:	d101      	bne.n	8005216 <xTaskPriorityInherit+0x56>
 8005212:	2301      	movs	r3, #1
 8005214:	e000      	b.n	8005218 <xTaskPriorityInherit+0x58>
 8005216:	2300      	movs	r3, #0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d03a      	beq.n	8005292 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	3304      	adds	r3, #4
 8005220:	4618      	mov	r0, r3
 8005222:	f7fe fb88 	bl	8003936 <uxListRemove>
 8005226:	4603      	mov	r3, r0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d115      	bne.n	8005258 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005230:	4924      	ldr	r1, [pc, #144]	; (80052c4 <xTaskPriorityInherit+0x104>)
 8005232:	4613      	mov	r3, r2
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	4413      	add	r3, r2
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	440b      	add	r3, r1
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d10a      	bne.n	8005258 <xTaskPriorityInherit+0x98>
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005246:	2201      	movs	r2, #1
 8005248:	fa02 f303 	lsl.w	r3, r2, r3
 800524c:	43da      	mvns	r2, r3
 800524e:	4b1e      	ldr	r3, [pc, #120]	; (80052c8 <xTaskPriorityInherit+0x108>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4013      	ands	r3, r2
 8005254:	4a1c      	ldr	r2, [pc, #112]	; (80052c8 <xTaskPriorityInherit+0x108>)
 8005256:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005258:	4b19      	ldr	r3, [pc, #100]	; (80052c0 <xTaskPriorityInherit+0x100>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005266:	2201      	movs	r2, #1
 8005268:	409a      	lsls	r2, r3
 800526a:	4b17      	ldr	r3, [pc, #92]	; (80052c8 <xTaskPriorityInherit+0x108>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4313      	orrs	r3, r2
 8005270:	4a15      	ldr	r2, [pc, #84]	; (80052c8 <xTaskPriorityInherit+0x108>)
 8005272:	6013      	str	r3, [r2, #0]
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005278:	4613      	mov	r3, r2
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	4413      	add	r3, r2
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	4a10      	ldr	r2, [pc, #64]	; (80052c4 <xTaskPriorityInherit+0x104>)
 8005282:	441a      	add	r2, r3
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	3304      	adds	r3, #4
 8005288:	4619      	mov	r1, r3
 800528a:	4610      	mov	r0, r2
 800528c:	f7fe faf6 	bl	800387c <vListInsertEnd>
 8005290:	e004      	b.n	800529c <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005292:	4b0b      	ldr	r3, [pc, #44]	; (80052c0 <xTaskPriorityInherit+0x100>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800529c:	2301      	movs	r3, #1
 800529e:	60fb      	str	r3, [r7, #12]
 80052a0:	e008      	b.n	80052b4 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052a6:	4b06      	ldr	r3, [pc, #24]	; (80052c0 <xTaskPriorityInherit+0x100>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d201      	bcs.n	80052b4 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80052b0:	2301      	movs	r3, #1
 80052b2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80052b4:	68fb      	ldr	r3, [r7, #12]
	}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3710      	adds	r7, #16
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	20000280 	.word	0x20000280
 80052c4:	20000284 	.word	0x20000284
 80052c8:	20000388 	.word	0x20000388

080052cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b086      	sub	sp, #24
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80052d8:	2300      	movs	r3, #0
 80052da:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d06c      	beq.n	80053bc <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80052e2:	4b39      	ldr	r3, [pc, #228]	; (80053c8 <xTaskPriorityDisinherit+0xfc>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	693a      	ldr	r2, [r7, #16]
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d009      	beq.n	8005300 <xTaskPriorityDisinherit+0x34>
 80052ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f0:	f383 8811 	msr	BASEPRI, r3
 80052f4:	f3bf 8f6f 	isb	sy
 80052f8:	f3bf 8f4f 	dsb	sy
 80052fc:	60fb      	str	r3, [r7, #12]
 80052fe:	e7fe      	b.n	80052fe <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005304:	2b00      	cmp	r3, #0
 8005306:	d109      	bne.n	800531c <xTaskPriorityDisinherit+0x50>
 8005308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800530c:	f383 8811 	msr	BASEPRI, r3
 8005310:	f3bf 8f6f 	isb	sy
 8005314:	f3bf 8f4f 	dsb	sy
 8005318:	60bb      	str	r3, [r7, #8]
 800531a:	e7fe      	b.n	800531a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005320:	1e5a      	subs	r2, r3, #1
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800532e:	429a      	cmp	r2, r3
 8005330:	d044      	beq.n	80053bc <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005336:	2b00      	cmp	r3, #0
 8005338:	d140      	bne.n	80053bc <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	3304      	adds	r3, #4
 800533e:	4618      	mov	r0, r3
 8005340:	f7fe faf9 	bl	8003936 <uxListRemove>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d115      	bne.n	8005376 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800534e:	491f      	ldr	r1, [pc, #124]	; (80053cc <xTaskPriorityDisinherit+0x100>)
 8005350:	4613      	mov	r3, r2
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	4413      	add	r3, r2
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	440b      	add	r3, r1
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d10a      	bne.n	8005376 <xTaskPriorityDisinherit+0xaa>
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005364:	2201      	movs	r2, #1
 8005366:	fa02 f303 	lsl.w	r3, r2, r3
 800536a:	43da      	mvns	r2, r3
 800536c:	4b18      	ldr	r3, [pc, #96]	; (80053d0 <xTaskPriorityDisinherit+0x104>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4013      	ands	r3, r2
 8005372:	4a17      	ldr	r2, [pc, #92]	; (80053d0 <xTaskPriorityDisinherit+0x104>)
 8005374:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005382:	f1c3 0207 	rsb	r2, r3, #7
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800538e:	2201      	movs	r2, #1
 8005390:	409a      	lsls	r2, r3
 8005392:	4b0f      	ldr	r3, [pc, #60]	; (80053d0 <xTaskPriorityDisinherit+0x104>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4313      	orrs	r3, r2
 8005398:	4a0d      	ldr	r2, [pc, #52]	; (80053d0 <xTaskPriorityDisinherit+0x104>)
 800539a:	6013      	str	r3, [r2, #0]
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053a0:	4613      	mov	r3, r2
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	4413      	add	r3, r2
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	4a08      	ldr	r2, [pc, #32]	; (80053cc <xTaskPriorityDisinherit+0x100>)
 80053aa:	441a      	add	r2, r3
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	3304      	adds	r3, #4
 80053b0:	4619      	mov	r1, r3
 80053b2:	4610      	mov	r0, r2
 80053b4:	f7fe fa62 	bl	800387c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80053b8:	2301      	movs	r3, #1
 80053ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80053bc:	697b      	ldr	r3, [r7, #20]
	}
 80053be:	4618      	mov	r0, r3
 80053c0:	3718      	adds	r7, #24
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	20000280 	.word	0x20000280
 80053cc:	20000284 	.word	0x20000284
 80053d0:	20000388 	.word	0x20000388

080053d4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b088      	sub	sp, #32
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80053e2:	2301      	movs	r3, #1
 80053e4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	f000 8086 	beq.w	80054fa <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80053ee:	69bb      	ldr	r3, [r7, #24]
 80053f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d109      	bne.n	800540a <vTaskPriorityDisinheritAfterTimeout+0x36>
 80053f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053fa:	f383 8811 	msr	BASEPRI, r3
 80053fe:	f3bf 8f6f 	isb	sy
 8005402:	f3bf 8f4f 	dsb	sy
 8005406:	60fb      	str	r3, [r7, #12]
 8005408:	e7fe      	b.n	8005408 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800540e:	683a      	ldr	r2, [r7, #0]
 8005410:	429a      	cmp	r2, r3
 8005412:	d902      	bls.n	800541a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	61fb      	str	r3, [r7, #28]
 8005418:	e002      	b.n	8005420 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800541e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005424:	69fa      	ldr	r2, [r7, #28]
 8005426:	429a      	cmp	r2, r3
 8005428:	d067      	beq.n	80054fa <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800542e:	697a      	ldr	r2, [r7, #20]
 8005430:	429a      	cmp	r2, r3
 8005432:	d162      	bne.n	80054fa <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005434:	4b33      	ldr	r3, [pc, #204]	; (8005504 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	69ba      	ldr	r2, [r7, #24]
 800543a:	429a      	cmp	r2, r3
 800543c:	d109      	bne.n	8005452 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800543e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005442:	f383 8811 	msr	BASEPRI, r3
 8005446:	f3bf 8f6f 	isb	sy
 800544a:	f3bf 8f4f 	dsb	sy
 800544e:	60bb      	str	r3, [r7, #8]
 8005450:	e7fe      	b.n	8005450 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005452:	69bb      	ldr	r3, [r7, #24]
 8005454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005456:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	69fa      	ldr	r2, [r7, #28]
 800545c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	699b      	ldr	r3, [r3, #24]
 8005462:	2b00      	cmp	r3, #0
 8005464:	db04      	blt.n	8005470 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	f1c3 0207 	rsb	r2, r3, #7
 800546c:	69bb      	ldr	r3, [r7, #24]
 800546e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	6959      	ldr	r1, [r3, #20]
 8005474:	693a      	ldr	r2, [r7, #16]
 8005476:	4613      	mov	r3, r2
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	4413      	add	r3, r2
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	4a22      	ldr	r2, [pc, #136]	; (8005508 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005480:	4413      	add	r3, r2
 8005482:	4299      	cmp	r1, r3
 8005484:	d101      	bne.n	800548a <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8005486:	2301      	movs	r3, #1
 8005488:	e000      	b.n	800548c <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800548a:	2300      	movs	r3, #0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d034      	beq.n	80054fa <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	3304      	adds	r3, #4
 8005494:	4618      	mov	r0, r3
 8005496:	f7fe fa4e 	bl	8003936 <uxListRemove>
 800549a:	4603      	mov	r3, r0
 800549c:	2b00      	cmp	r3, #0
 800549e:	d115      	bne.n	80054cc <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054a4:	4918      	ldr	r1, [pc, #96]	; (8005508 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80054a6:	4613      	mov	r3, r2
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	4413      	add	r3, r2
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	440b      	add	r3, r1
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d10a      	bne.n	80054cc <vTaskPriorityDisinheritAfterTimeout+0xf8>
 80054b6:	69bb      	ldr	r3, [r7, #24]
 80054b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ba:	2201      	movs	r2, #1
 80054bc:	fa02 f303 	lsl.w	r3, r2, r3
 80054c0:	43da      	mvns	r2, r3
 80054c2:	4b12      	ldr	r3, [pc, #72]	; (800550c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4013      	ands	r3, r2
 80054c8:	4a10      	ldr	r2, [pc, #64]	; (800550c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80054ca:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80054cc:	69bb      	ldr	r3, [r7, #24]
 80054ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d0:	2201      	movs	r2, #1
 80054d2:	409a      	lsls	r2, r3
 80054d4:	4b0d      	ldr	r3, [pc, #52]	; (800550c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4313      	orrs	r3, r2
 80054da:	4a0c      	ldr	r2, [pc, #48]	; (800550c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80054dc:	6013      	str	r3, [r2, #0]
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054e2:	4613      	mov	r3, r2
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	4413      	add	r3, r2
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	4a07      	ldr	r2, [pc, #28]	; (8005508 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80054ec:	441a      	add	r2, r3
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	3304      	adds	r3, #4
 80054f2:	4619      	mov	r1, r3
 80054f4:	4610      	mov	r0, r2
 80054f6:	f7fe f9c1 	bl	800387c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80054fa:	bf00      	nop
 80054fc:	3720      	adds	r7, #32
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
 8005502:	bf00      	nop
 8005504:	20000280 	.word	0x20000280
 8005508:	20000284 	.word	0x20000284
 800550c:	20000388 	.word	0x20000388

08005510 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8005510:	b480      	push	{r7}
 8005512:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005514:	4b07      	ldr	r3, [pc, #28]	; (8005534 <pvTaskIncrementMutexHeldCount+0x24>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d004      	beq.n	8005526 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800551c:	4b05      	ldr	r3, [pc, #20]	; (8005534 <pvTaskIncrementMutexHeldCount+0x24>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005522:	3201      	adds	r2, #1
 8005524:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8005526:	4b03      	ldr	r3, [pc, #12]	; (8005534 <pvTaskIncrementMutexHeldCount+0x24>)
 8005528:	681b      	ldr	r3, [r3, #0]
	}
 800552a:	4618      	mov	r0, r3
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr
 8005534:	20000280 	.word	0x20000280

08005538 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005542:	4b29      	ldr	r3, [pc, #164]	; (80055e8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005548:	4b28      	ldr	r3, [pc, #160]	; (80055ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	3304      	adds	r3, #4
 800554e:	4618      	mov	r0, r3
 8005550:	f7fe f9f1 	bl	8003936 <uxListRemove>
 8005554:	4603      	mov	r3, r0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d10b      	bne.n	8005572 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800555a:	4b24      	ldr	r3, [pc, #144]	; (80055ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005560:	2201      	movs	r2, #1
 8005562:	fa02 f303 	lsl.w	r3, r2, r3
 8005566:	43da      	mvns	r2, r3
 8005568:	4b21      	ldr	r3, [pc, #132]	; (80055f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4013      	ands	r3, r2
 800556e:	4a20      	ldr	r2, [pc, #128]	; (80055f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005570:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005578:	d10a      	bne.n	8005590 <prvAddCurrentTaskToDelayedList+0x58>
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d007      	beq.n	8005590 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005580:	4b1a      	ldr	r3, [pc, #104]	; (80055ec <prvAddCurrentTaskToDelayedList+0xb4>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	3304      	adds	r3, #4
 8005586:	4619      	mov	r1, r3
 8005588:	481a      	ldr	r0, [pc, #104]	; (80055f4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800558a:	f7fe f977 	bl	800387c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800558e:	e026      	b.n	80055de <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005590:	68fa      	ldr	r2, [r7, #12]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4413      	add	r3, r2
 8005596:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005598:	4b14      	ldr	r3, [pc, #80]	; (80055ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68ba      	ldr	r2, [r7, #8]
 800559e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80055a0:	68ba      	ldr	r2, [r7, #8]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d209      	bcs.n	80055bc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055a8:	4b13      	ldr	r3, [pc, #76]	; (80055f8 <prvAddCurrentTaskToDelayedList+0xc0>)
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	4b0f      	ldr	r3, [pc, #60]	; (80055ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	3304      	adds	r3, #4
 80055b2:	4619      	mov	r1, r3
 80055b4:	4610      	mov	r0, r2
 80055b6:	f7fe f985 	bl	80038c4 <vListInsert>
}
 80055ba:	e010      	b.n	80055de <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055bc:	4b0f      	ldr	r3, [pc, #60]	; (80055fc <prvAddCurrentTaskToDelayedList+0xc4>)
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	4b0a      	ldr	r3, [pc, #40]	; (80055ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	3304      	adds	r3, #4
 80055c6:	4619      	mov	r1, r3
 80055c8:	4610      	mov	r0, r2
 80055ca:	f7fe f97b 	bl	80038c4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80055ce:	4b0c      	ldr	r3, [pc, #48]	; (8005600 <prvAddCurrentTaskToDelayedList+0xc8>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68ba      	ldr	r2, [r7, #8]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d202      	bcs.n	80055de <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80055d8:	4a09      	ldr	r2, [pc, #36]	; (8005600 <prvAddCurrentTaskToDelayedList+0xc8>)
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	6013      	str	r3, [r2, #0]
}
 80055de:	bf00      	nop
 80055e0:	3710      	adds	r7, #16
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	20000384 	.word	0x20000384
 80055ec:	20000280 	.word	0x20000280
 80055f0:	20000388 	.word	0x20000388
 80055f4:	2000036c 	.word	0x2000036c
 80055f8:	2000033c 	.word	0x2000033c
 80055fc:	20000338 	.word	0x20000338
 8005600:	200003a0 	.word	0x200003a0

08005604 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005604:	b480      	push	{r7}
 8005606:	b085      	sub	sp, #20
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	3b04      	subs	r3, #4
 8005614:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800561c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	3b04      	subs	r3, #4
 8005622:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	f023 0201 	bic.w	r2, r3, #1
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	3b04      	subs	r3, #4
 8005632:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005634:	4a0c      	ldr	r2, [pc, #48]	; (8005668 <pxPortInitialiseStack+0x64>)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	3b14      	subs	r3, #20
 800563e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	3b04      	subs	r3, #4
 800564a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f06f 0202 	mvn.w	r2, #2
 8005652:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	3b20      	subs	r3, #32
 8005658:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800565a:	68fb      	ldr	r3, [r7, #12]
}
 800565c:	4618      	mov	r0, r3
 800565e:	3714      	adds	r7, #20
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr
 8005668:	0800566d 	.word	0x0800566d

0800566c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800566c:	b480      	push	{r7}
 800566e:	b085      	sub	sp, #20
 8005670:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005672:	2300      	movs	r3, #0
 8005674:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005676:	4b11      	ldr	r3, [pc, #68]	; (80056bc <prvTaskExitError+0x50>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800567e:	d009      	beq.n	8005694 <prvTaskExitError+0x28>
 8005680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005684:	f383 8811 	msr	BASEPRI, r3
 8005688:	f3bf 8f6f 	isb	sy
 800568c:	f3bf 8f4f 	dsb	sy
 8005690:	60fb      	str	r3, [r7, #12]
 8005692:	e7fe      	b.n	8005692 <prvTaskExitError+0x26>
 8005694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005698:	f383 8811 	msr	BASEPRI, r3
 800569c:	f3bf 8f6f 	isb	sy
 80056a0:	f3bf 8f4f 	dsb	sy
 80056a4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80056a6:	bf00      	nop
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d0fc      	beq.n	80056a8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80056ae:	bf00      	nop
 80056b0:	3714      	adds	r7, #20
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr
 80056ba:	bf00      	nop
 80056bc:	2000000c 	.word	0x2000000c

080056c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80056c0:	4b07      	ldr	r3, [pc, #28]	; (80056e0 <pxCurrentTCBConst2>)
 80056c2:	6819      	ldr	r1, [r3, #0]
 80056c4:	6808      	ldr	r0, [r1, #0]
 80056c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056ca:	f380 8809 	msr	PSP, r0
 80056ce:	f3bf 8f6f 	isb	sy
 80056d2:	f04f 0000 	mov.w	r0, #0
 80056d6:	f380 8811 	msr	BASEPRI, r0
 80056da:	4770      	bx	lr
 80056dc:	f3af 8000 	nop.w

080056e0 <pxCurrentTCBConst2>:
 80056e0:	20000280 	.word	0x20000280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80056e4:	bf00      	nop
 80056e6:	bf00      	nop

080056e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80056e8:	4808      	ldr	r0, [pc, #32]	; (800570c <prvPortStartFirstTask+0x24>)
 80056ea:	6800      	ldr	r0, [r0, #0]
 80056ec:	6800      	ldr	r0, [r0, #0]
 80056ee:	f380 8808 	msr	MSP, r0
 80056f2:	f04f 0000 	mov.w	r0, #0
 80056f6:	f380 8814 	msr	CONTROL, r0
 80056fa:	b662      	cpsie	i
 80056fc:	b661      	cpsie	f
 80056fe:	f3bf 8f4f 	dsb	sy
 8005702:	f3bf 8f6f 	isb	sy
 8005706:	df00      	svc	0
 8005708:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800570a:	bf00      	nop
 800570c:	e000ed08 	.word	0xe000ed08

08005710 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b086      	sub	sp, #24
 8005714:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005716:	4b44      	ldr	r3, [pc, #272]	; (8005828 <xPortStartScheduler+0x118>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a44      	ldr	r2, [pc, #272]	; (800582c <xPortStartScheduler+0x11c>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d109      	bne.n	8005734 <xPortStartScheduler+0x24>
 8005720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005724:	f383 8811 	msr	BASEPRI, r3
 8005728:	f3bf 8f6f 	isb	sy
 800572c:	f3bf 8f4f 	dsb	sy
 8005730:	613b      	str	r3, [r7, #16]
 8005732:	e7fe      	b.n	8005732 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005734:	4b3c      	ldr	r3, [pc, #240]	; (8005828 <xPortStartScheduler+0x118>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a3d      	ldr	r2, [pc, #244]	; (8005830 <xPortStartScheduler+0x120>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d109      	bne.n	8005752 <xPortStartScheduler+0x42>
 800573e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005742:	f383 8811 	msr	BASEPRI, r3
 8005746:	f3bf 8f6f 	isb	sy
 800574a:	f3bf 8f4f 	dsb	sy
 800574e:	60fb      	str	r3, [r7, #12]
 8005750:	e7fe      	b.n	8005750 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005752:	4b38      	ldr	r3, [pc, #224]	; (8005834 <xPortStartScheduler+0x124>)
 8005754:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	b2db      	uxtb	r3, r3
 800575c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	22ff      	movs	r2, #255	; 0xff
 8005762:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	b2db      	uxtb	r3, r3
 800576a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800576c:	78fb      	ldrb	r3, [r7, #3]
 800576e:	b2db      	uxtb	r3, r3
 8005770:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005774:	b2da      	uxtb	r2, r3
 8005776:	4b30      	ldr	r3, [pc, #192]	; (8005838 <xPortStartScheduler+0x128>)
 8005778:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800577a:	4b30      	ldr	r3, [pc, #192]	; (800583c <xPortStartScheduler+0x12c>)
 800577c:	2207      	movs	r2, #7
 800577e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005780:	e009      	b.n	8005796 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005782:	4b2e      	ldr	r3, [pc, #184]	; (800583c <xPortStartScheduler+0x12c>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	3b01      	subs	r3, #1
 8005788:	4a2c      	ldr	r2, [pc, #176]	; (800583c <xPortStartScheduler+0x12c>)
 800578a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800578c:	78fb      	ldrb	r3, [r7, #3]
 800578e:	b2db      	uxtb	r3, r3
 8005790:	005b      	lsls	r3, r3, #1
 8005792:	b2db      	uxtb	r3, r3
 8005794:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005796:	78fb      	ldrb	r3, [r7, #3]
 8005798:	b2db      	uxtb	r3, r3
 800579a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800579e:	2b80      	cmp	r3, #128	; 0x80
 80057a0:	d0ef      	beq.n	8005782 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80057a2:	4b26      	ldr	r3, [pc, #152]	; (800583c <xPortStartScheduler+0x12c>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f1c3 0307 	rsb	r3, r3, #7
 80057aa:	2b04      	cmp	r3, #4
 80057ac:	d009      	beq.n	80057c2 <xPortStartScheduler+0xb2>
 80057ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b2:	f383 8811 	msr	BASEPRI, r3
 80057b6:	f3bf 8f6f 	isb	sy
 80057ba:	f3bf 8f4f 	dsb	sy
 80057be:	60bb      	str	r3, [r7, #8]
 80057c0:	e7fe      	b.n	80057c0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80057c2:	4b1e      	ldr	r3, [pc, #120]	; (800583c <xPortStartScheduler+0x12c>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	021b      	lsls	r3, r3, #8
 80057c8:	4a1c      	ldr	r2, [pc, #112]	; (800583c <xPortStartScheduler+0x12c>)
 80057ca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80057cc:	4b1b      	ldr	r3, [pc, #108]	; (800583c <xPortStartScheduler+0x12c>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80057d4:	4a19      	ldr	r2, [pc, #100]	; (800583c <xPortStartScheduler+0x12c>)
 80057d6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	b2da      	uxtb	r2, r3
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80057e0:	4b17      	ldr	r3, [pc, #92]	; (8005840 <xPortStartScheduler+0x130>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a16      	ldr	r2, [pc, #88]	; (8005840 <xPortStartScheduler+0x130>)
 80057e6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80057ea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80057ec:	4b14      	ldr	r3, [pc, #80]	; (8005840 <xPortStartScheduler+0x130>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a13      	ldr	r2, [pc, #76]	; (8005840 <xPortStartScheduler+0x130>)
 80057f2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80057f6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80057f8:	f000 f8d6 	bl	80059a8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80057fc:	4b11      	ldr	r3, [pc, #68]	; (8005844 <xPortStartScheduler+0x134>)
 80057fe:	2200      	movs	r2, #0
 8005800:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005802:	f000 f8f5 	bl	80059f0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005806:	4b10      	ldr	r3, [pc, #64]	; (8005848 <xPortStartScheduler+0x138>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a0f      	ldr	r2, [pc, #60]	; (8005848 <xPortStartScheduler+0x138>)
 800580c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005810:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005812:	f7ff ff69 	bl	80056e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005816:	f7ff fa7b 	bl	8004d10 <vTaskSwitchContext>
	prvTaskExitError();
 800581a:	f7ff ff27 	bl	800566c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800581e:	2300      	movs	r3, #0
}
 8005820:	4618      	mov	r0, r3
 8005822:	3718      	adds	r7, #24
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}
 8005828:	e000ed00 	.word	0xe000ed00
 800582c:	410fc271 	.word	0x410fc271
 8005830:	410fc270 	.word	0x410fc270
 8005834:	e000e400 	.word	0xe000e400
 8005838:	200003ac 	.word	0x200003ac
 800583c:	200003b0 	.word	0x200003b0
 8005840:	e000ed20 	.word	0xe000ed20
 8005844:	2000000c 	.word	0x2000000c
 8005848:	e000ef34 	.word	0xe000ef34

0800584c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800584c:	b480      	push	{r7}
 800584e:	b083      	sub	sp, #12
 8005850:	af00      	add	r7, sp, #0
 8005852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005856:	f383 8811 	msr	BASEPRI, r3
 800585a:	f3bf 8f6f 	isb	sy
 800585e:	f3bf 8f4f 	dsb	sy
 8005862:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005864:	4b0e      	ldr	r3, [pc, #56]	; (80058a0 <vPortEnterCritical+0x54>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	3301      	adds	r3, #1
 800586a:	4a0d      	ldr	r2, [pc, #52]	; (80058a0 <vPortEnterCritical+0x54>)
 800586c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800586e:	4b0c      	ldr	r3, [pc, #48]	; (80058a0 <vPortEnterCritical+0x54>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	2b01      	cmp	r3, #1
 8005874:	d10e      	bne.n	8005894 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005876:	4b0b      	ldr	r3, [pc, #44]	; (80058a4 <vPortEnterCritical+0x58>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	b2db      	uxtb	r3, r3
 800587c:	2b00      	cmp	r3, #0
 800587e:	d009      	beq.n	8005894 <vPortEnterCritical+0x48>
 8005880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005884:	f383 8811 	msr	BASEPRI, r3
 8005888:	f3bf 8f6f 	isb	sy
 800588c:	f3bf 8f4f 	dsb	sy
 8005890:	603b      	str	r3, [r7, #0]
 8005892:	e7fe      	b.n	8005892 <vPortEnterCritical+0x46>
	}
}
 8005894:	bf00      	nop
 8005896:	370c      	adds	r7, #12
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr
 80058a0:	2000000c 	.word	0x2000000c
 80058a4:	e000ed04 	.word	0xe000ed04

080058a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80058ae:	4b11      	ldr	r3, [pc, #68]	; (80058f4 <vPortExitCritical+0x4c>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d109      	bne.n	80058ca <vPortExitCritical+0x22>
 80058b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ba:	f383 8811 	msr	BASEPRI, r3
 80058be:	f3bf 8f6f 	isb	sy
 80058c2:	f3bf 8f4f 	dsb	sy
 80058c6:	607b      	str	r3, [r7, #4]
 80058c8:	e7fe      	b.n	80058c8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80058ca:	4b0a      	ldr	r3, [pc, #40]	; (80058f4 <vPortExitCritical+0x4c>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	3b01      	subs	r3, #1
 80058d0:	4a08      	ldr	r2, [pc, #32]	; (80058f4 <vPortExitCritical+0x4c>)
 80058d2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80058d4:	4b07      	ldr	r3, [pc, #28]	; (80058f4 <vPortExitCritical+0x4c>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d104      	bne.n	80058e6 <vPortExitCritical+0x3e>
 80058dc:	2300      	movs	r3, #0
 80058de:	603b      	str	r3, [r7, #0]
	__asm volatile
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80058e6:	bf00      	nop
 80058e8:	370c      	adds	r7, #12
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr
 80058f2:	bf00      	nop
 80058f4:	2000000c 	.word	0x2000000c
	...

08005900 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005900:	f3ef 8009 	mrs	r0, PSP
 8005904:	f3bf 8f6f 	isb	sy
 8005908:	4b15      	ldr	r3, [pc, #84]	; (8005960 <pxCurrentTCBConst>)
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	f01e 0f10 	tst.w	lr, #16
 8005910:	bf08      	it	eq
 8005912:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005916:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800591a:	6010      	str	r0, [r2, #0]
 800591c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005920:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005924:	f380 8811 	msr	BASEPRI, r0
 8005928:	f3bf 8f4f 	dsb	sy
 800592c:	f3bf 8f6f 	isb	sy
 8005930:	f7ff f9ee 	bl	8004d10 <vTaskSwitchContext>
 8005934:	f04f 0000 	mov.w	r0, #0
 8005938:	f380 8811 	msr	BASEPRI, r0
 800593c:	bc09      	pop	{r0, r3}
 800593e:	6819      	ldr	r1, [r3, #0]
 8005940:	6808      	ldr	r0, [r1, #0]
 8005942:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005946:	f01e 0f10 	tst.w	lr, #16
 800594a:	bf08      	it	eq
 800594c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005950:	f380 8809 	msr	PSP, r0
 8005954:	f3bf 8f6f 	isb	sy
 8005958:	4770      	bx	lr
 800595a:	bf00      	nop
 800595c:	f3af 8000 	nop.w

08005960 <pxCurrentTCBConst>:
 8005960:	20000280 	.word	0x20000280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005964:	bf00      	nop
 8005966:	bf00      	nop

08005968 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b082      	sub	sp, #8
 800596c:	af00      	add	r7, sp, #0
	__asm volatile
 800596e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005972:	f383 8811 	msr	BASEPRI, r3
 8005976:	f3bf 8f6f 	isb	sy
 800597a:	f3bf 8f4f 	dsb	sy
 800597e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005980:	f7ff f90a 	bl	8004b98 <xTaskIncrementTick>
 8005984:	4603      	mov	r3, r0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d003      	beq.n	8005992 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800598a:	4b06      	ldr	r3, [pc, #24]	; (80059a4 <SysTick_Handler+0x3c>)
 800598c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005990:	601a      	str	r2, [r3, #0]
 8005992:	2300      	movs	r3, #0
 8005994:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800599c:	bf00      	nop
 800599e:	3708      	adds	r7, #8
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}
 80059a4:	e000ed04 	.word	0xe000ed04

080059a8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80059a8:	b480      	push	{r7}
 80059aa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80059ac:	4b0b      	ldr	r3, [pc, #44]	; (80059dc <vPortSetupTimerInterrupt+0x34>)
 80059ae:	2200      	movs	r2, #0
 80059b0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80059b2:	4b0b      	ldr	r3, [pc, #44]	; (80059e0 <vPortSetupTimerInterrupt+0x38>)
 80059b4:	2200      	movs	r2, #0
 80059b6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80059b8:	4b0a      	ldr	r3, [pc, #40]	; (80059e4 <vPortSetupTimerInterrupt+0x3c>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a0a      	ldr	r2, [pc, #40]	; (80059e8 <vPortSetupTimerInterrupt+0x40>)
 80059be:	fba2 2303 	umull	r2, r3, r2, r3
 80059c2:	099b      	lsrs	r3, r3, #6
 80059c4:	4a09      	ldr	r2, [pc, #36]	; (80059ec <vPortSetupTimerInterrupt+0x44>)
 80059c6:	3b01      	subs	r3, #1
 80059c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80059ca:	4b04      	ldr	r3, [pc, #16]	; (80059dc <vPortSetupTimerInterrupt+0x34>)
 80059cc:	2207      	movs	r2, #7
 80059ce:	601a      	str	r2, [r3, #0]
}
 80059d0:	bf00      	nop
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr
 80059da:	bf00      	nop
 80059dc:	e000e010 	.word	0xe000e010
 80059e0:	e000e018 	.word	0xe000e018
 80059e4:	20000000 	.word	0x20000000
 80059e8:	10624dd3 	.word	0x10624dd3
 80059ec:	e000e014 	.word	0xe000e014

080059f0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80059f0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005a00 <vPortEnableVFP+0x10>
 80059f4:	6801      	ldr	r1, [r0, #0]
 80059f6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80059fa:	6001      	str	r1, [r0, #0]
 80059fc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80059fe:	bf00      	nop
 8005a00:	e000ed88 	.word	0xe000ed88

08005a04 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005a04:	b480      	push	{r7}
 8005a06:	b085      	sub	sp, #20
 8005a08:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005a0a:	f3ef 8305 	mrs	r3, IPSR
 8005a0e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2b0f      	cmp	r3, #15
 8005a14:	d913      	bls.n	8005a3e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005a16:	4a16      	ldr	r2, [pc, #88]	; (8005a70 <vPortValidateInterruptPriority+0x6c>)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	4413      	add	r3, r2
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005a20:	4b14      	ldr	r3, [pc, #80]	; (8005a74 <vPortValidateInterruptPriority+0x70>)
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	7afa      	ldrb	r2, [r7, #11]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d209      	bcs.n	8005a3e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8005a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a2e:	f383 8811 	msr	BASEPRI, r3
 8005a32:	f3bf 8f6f 	isb	sy
 8005a36:	f3bf 8f4f 	dsb	sy
 8005a3a:	607b      	str	r3, [r7, #4]
 8005a3c:	e7fe      	b.n	8005a3c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005a3e:	4b0e      	ldr	r3, [pc, #56]	; (8005a78 <vPortValidateInterruptPriority+0x74>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005a46:	4b0d      	ldr	r3, [pc, #52]	; (8005a7c <vPortValidateInterruptPriority+0x78>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d909      	bls.n	8005a62 <vPortValidateInterruptPriority+0x5e>
 8005a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a52:	f383 8811 	msr	BASEPRI, r3
 8005a56:	f3bf 8f6f 	isb	sy
 8005a5a:	f3bf 8f4f 	dsb	sy
 8005a5e:	603b      	str	r3, [r7, #0]
 8005a60:	e7fe      	b.n	8005a60 <vPortValidateInterruptPriority+0x5c>
	}
 8005a62:	bf00      	nop
 8005a64:	3714      	adds	r7, #20
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr
 8005a6e:	bf00      	nop
 8005a70:	e000e3f0 	.word	0xe000e3f0
 8005a74:	200003ac 	.word	0x200003ac
 8005a78:	e000ed0c 	.word	0xe000ed0c
 8005a7c:	200003b0 	.word	0x200003b0

08005a80 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b08a      	sub	sp, #40	; 0x28
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005a8c:	f7fe ffda 	bl	8004a44 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005a90:	4b57      	ldr	r3, [pc, #348]	; (8005bf0 <pvPortMalloc+0x170>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d101      	bne.n	8005a9c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005a98:	f000 f90c 	bl	8005cb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005a9c:	4b55      	ldr	r3, [pc, #340]	; (8005bf4 <pvPortMalloc+0x174>)
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4013      	ands	r3, r2
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	f040 808c 	bne.w	8005bc2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d01c      	beq.n	8005aea <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005ab0:	2208      	movs	r2, #8
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4413      	add	r3, r2
 8005ab6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f003 0307 	and.w	r3, r3, #7
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d013      	beq.n	8005aea <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f023 0307 	bic.w	r3, r3, #7
 8005ac8:	3308      	adds	r3, #8
 8005aca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f003 0307 	and.w	r3, r3, #7
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d009      	beq.n	8005aea <pvPortMalloc+0x6a>
 8005ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ada:	f383 8811 	msr	BASEPRI, r3
 8005ade:	f3bf 8f6f 	isb	sy
 8005ae2:	f3bf 8f4f 	dsb	sy
 8005ae6:	617b      	str	r3, [r7, #20]
 8005ae8:	e7fe      	b.n	8005ae8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d068      	beq.n	8005bc2 <pvPortMalloc+0x142>
 8005af0:	4b41      	ldr	r3, [pc, #260]	; (8005bf8 <pvPortMalloc+0x178>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d863      	bhi.n	8005bc2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005afa:	4b40      	ldr	r3, [pc, #256]	; (8005bfc <pvPortMalloc+0x17c>)
 8005afc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005afe:	4b3f      	ldr	r3, [pc, #252]	; (8005bfc <pvPortMalloc+0x17c>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b04:	e004      	b.n	8005b10 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b08:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d903      	bls.n	8005b22 <pvPortMalloc+0xa2>
 8005b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d1f1      	bne.n	8005b06 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005b22:	4b33      	ldr	r3, [pc, #204]	; (8005bf0 <pvPortMalloc+0x170>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d04a      	beq.n	8005bc2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005b2c:	6a3b      	ldr	r3, [r7, #32]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	2208      	movs	r2, #8
 8005b32:	4413      	add	r3, r2
 8005b34:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	6a3b      	ldr	r3, [r7, #32]
 8005b3c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b40:	685a      	ldr	r2, [r3, #4]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	1ad2      	subs	r2, r2, r3
 8005b46:	2308      	movs	r3, #8
 8005b48:	005b      	lsls	r3, r3, #1
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d91e      	bls.n	8005b8c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005b4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4413      	add	r3, r2
 8005b54:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	f003 0307 	and.w	r3, r3, #7
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d009      	beq.n	8005b74 <pvPortMalloc+0xf4>
 8005b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b64:	f383 8811 	msr	BASEPRI, r3
 8005b68:	f3bf 8f6f 	isb	sy
 8005b6c:	f3bf 8f4f 	dsb	sy
 8005b70:	613b      	str	r3, [r7, #16]
 8005b72:	e7fe      	b.n	8005b72 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b76:	685a      	ldr	r2, [r3, #4]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	1ad2      	subs	r2, r2, r3
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005b86:	69b8      	ldr	r0, [r7, #24]
 8005b88:	f000 f8f6 	bl	8005d78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005b8c:	4b1a      	ldr	r3, [pc, #104]	; (8005bf8 <pvPortMalloc+0x178>)
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	1ad3      	subs	r3, r2, r3
 8005b96:	4a18      	ldr	r2, [pc, #96]	; (8005bf8 <pvPortMalloc+0x178>)
 8005b98:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005b9a:	4b17      	ldr	r3, [pc, #92]	; (8005bf8 <pvPortMalloc+0x178>)
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	4b18      	ldr	r3, [pc, #96]	; (8005c00 <pvPortMalloc+0x180>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d203      	bcs.n	8005bae <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005ba6:	4b14      	ldr	r3, [pc, #80]	; (8005bf8 <pvPortMalloc+0x178>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a15      	ldr	r2, [pc, #84]	; (8005c00 <pvPortMalloc+0x180>)
 8005bac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb0:	685a      	ldr	r2, [r3, #4]
 8005bb2:	4b10      	ldr	r3, [pc, #64]	; (8005bf4 <pvPortMalloc+0x174>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	431a      	orrs	r2, r3
 8005bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005bc2:	f7fe ff4d 	bl	8004a60 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005bc6:	69fb      	ldr	r3, [r7, #28]
 8005bc8:	f003 0307 	and.w	r3, r3, #7
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d009      	beq.n	8005be4 <pvPortMalloc+0x164>
 8005bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd4:	f383 8811 	msr	BASEPRI, r3
 8005bd8:	f3bf 8f6f 	isb	sy
 8005bdc:	f3bf 8f4f 	dsb	sy
 8005be0:	60fb      	str	r3, [r7, #12]
 8005be2:	e7fe      	b.n	8005be2 <pvPortMalloc+0x162>
	return pvReturn;
 8005be4:	69fb      	ldr	r3, [r7, #28]
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3728      	adds	r7, #40	; 0x28
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	bf00      	nop
 8005bf0:	20003fbc 	.word	0x20003fbc
 8005bf4:	20003fc8 	.word	0x20003fc8
 8005bf8:	20003fc0 	.word	0x20003fc0
 8005bfc:	20003fb4 	.word	0x20003fb4
 8005c00:	20003fc4 	.word	0x20003fc4

08005c04 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b086      	sub	sp, #24
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d046      	beq.n	8005ca4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005c16:	2308      	movs	r3, #8
 8005c18:	425b      	negs	r3, r3
 8005c1a:	697a      	ldr	r2, [r7, #20]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	685a      	ldr	r2, [r3, #4]
 8005c28:	4b20      	ldr	r3, [pc, #128]	; (8005cac <vPortFree+0xa8>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4013      	ands	r3, r2
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d109      	bne.n	8005c46 <vPortFree+0x42>
 8005c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c36:	f383 8811 	msr	BASEPRI, r3
 8005c3a:	f3bf 8f6f 	isb	sy
 8005c3e:	f3bf 8f4f 	dsb	sy
 8005c42:	60fb      	str	r3, [r7, #12]
 8005c44:	e7fe      	b.n	8005c44 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d009      	beq.n	8005c62 <vPortFree+0x5e>
 8005c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c52:	f383 8811 	msr	BASEPRI, r3
 8005c56:	f3bf 8f6f 	isb	sy
 8005c5a:	f3bf 8f4f 	dsb	sy
 8005c5e:	60bb      	str	r3, [r7, #8]
 8005c60:	e7fe      	b.n	8005c60 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	685a      	ldr	r2, [r3, #4]
 8005c66:	4b11      	ldr	r3, [pc, #68]	; (8005cac <vPortFree+0xa8>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d019      	beq.n	8005ca4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d115      	bne.n	8005ca4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	685a      	ldr	r2, [r3, #4]
 8005c7c:	4b0b      	ldr	r3, [pc, #44]	; (8005cac <vPortFree+0xa8>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	43db      	mvns	r3, r3
 8005c82:	401a      	ands	r2, r3
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005c88:	f7fe fedc 	bl	8004a44 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	685a      	ldr	r2, [r3, #4]
 8005c90:	4b07      	ldr	r3, [pc, #28]	; (8005cb0 <vPortFree+0xac>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4413      	add	r3, r2
 8005c96:	4a06      	ldr	r2, [pc, #24]	; (8005cb0 <vPortFree+0xac>)
 8005c98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005c9a:	6938      	ldr	r0, [r7, #16]
 8005c9c:	f000 f86c 	bl	8005d78 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005ca0:	f7fe fede 	bl	8004a60 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005ca4:	bf00      	nop
 8005ca6:	3718      	adds	r7, #24
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}
 8005cac:	20003fc8 	.word	0x20003fc8
 8005cb0:	20003fc0 	.word	0x20003fc0

08005cb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b085      	sub	sp, #20
 8005cb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005cba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005cbe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005cc0:	4b27      	ldr	r3, [pc, #156]	; (8005d60 <prvHeapInit+0xac>)
 8005cc2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f003 0307 	and.w	r3, r3, #7
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d00c      	beq.n	8005ce8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	3307      	adds	r3, #7
 8005cd2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f023 0307 	bic.w	r3, r3, #7
 8005cda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005cdc:	68ba      	ldr	r2, [r7, #8]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	1ad3      	subs	r3, r2, r3
 8005ce2:	4a1f      	ldr	r2, [pc, #124]	; (8005d60 <prvHeapInit+0xac>)
 8005ce4:	4413      	add	r3, r2
 8005ce6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005cec:	4a1d      	ldr	r2, [pc, #116]	; (8005d64 <prvHeapInit+0xb0>)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005cf2:	4b1c      	ldr	r3, [pc, #112]	; (8005d64 <prvHeapInit+0xb0>)
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	68ba      	ldr	r2, [r7, #8]
 8005cfc:	4413      	add	r3, r2
 8005cfe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005d00:	2208      	movs	r2, #8
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	1a9b      	subs	r3, r3, r2
 8005d06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f023 0307 	bic.w	r3, r3, #7
 8005d0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	4a15      	ldr	r2, [pc, #84]	; (8005d68 <prvHeapInit+0xb4>)
 8005d14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005d16:	4b14      	ldr	r3, [pc, #80]	; (8005d68 <prvHeapInit+0xb4>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005d1e:	4b12      	ldr	r3, [pc, #72]	; (8005d68 <prvHeapInit+0xb4>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	2200      	movs	r2, #0
 8005d24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	1ad2      	subs	r2, r2, r3
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005d34:	4b0c      	ldr	r3, [pc, #48]	; (8005d68 <prvHeapInit+0xb4>)
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	4a0a      	ldr	r2, [pc, #40]	; (8005d6c <prvHeapInit+0xb8>)
 8005d42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	4a09      	ldr	r2, [pc, #36]	; (8005d70 <prvHeapInit+0xbc>)
 8005d4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005d4c:	4b09      	ldr	r3, [pc, #36]	; (8005d74 <prvHeapInit+0xc0>)
 8005d4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005d52:	601a      	str	r2, [r3, #0]
}
 8005d54:	bf00      	nop
 8005d56:	3714      	adds	r7, #20
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr
 8005d60:	200003b4 	.word	0x200003b4
 8005d64:	20003fb4 	.word	0x20003fb4
 8005d68:	20003fbc 	.word	0x20003fbc
 8005d6c:	20003fc4 	.word	0x20003fc4
 8005d70:	20003fc0 	.word	0x20003fc0
 8005d74:	20003fc8 	.word	0x20003fc8

08005d78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b085      	sub	sp, #20
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005d80:	4b28      	ldr	r3, [pc, #160]	; (8005e24 <prvInsertBlockIntoFreeList+0xac>)
 8005d82:	60fb      	str	r3, [r7, #12]
 8005d84:	e002      	b.n	8005d8c <prvInsertBlockIntoFreeList+0x14>
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	60fb      	str	r3, [r7, #12]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d8f7      	bhi.n	8005d86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	68ba      	ldr	r2, [r7, #8]
 8005da0:	4413      	add	r3, r2
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d108      	bne.n	8005dba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	685a      	ldr	r2, [r3, #4]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	441a      	add	r2, r3
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	68ba      	ldr	r2, [r7, #8]
 8005dc4:	441a      	add	r2, r3
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d118      	bne.n	8005e00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	4b15      	ldr	r3, [pc, #84]	; (8005e28 <prvInsertBlockIntoFreeList+0xb0>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d00d      	beq.n	8005df6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	685a      	ldr	r2, [r3, #4]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	441a      	add	r2, r3
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	601a      	str	r2, [r3, #0]
 8005df4:	e008      	b.n	8005e08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005df6:	4b0c      	ldr	r3, [pc, #48]	; (8005e28 <prvInsertBlockIntoFreeList+0xb0>)
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	601a      	str	r2, [r3, #0]
 8005dfe:	e003      	b.n	8005e08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005e08:	68fa      	ldr	r2, [r7, #12]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d002      	beq.n	8005e16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e16:	bf00      	nop
 8005e18:	3714      	adds	r7, #20
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr
 8005e22:	bf00      	nop
 8005e24:	20003fb4 	.word	0x20003fb4
 8005e28:	20003fbc 	.word	0x20003fbc

08005e2c <__libc_init_array>:
 8005e2c:	b570      	push	{r4, r5, r6, lr}
 8005e2e:	4e0d      	ldr	r6, [pc, #52]	; (8005e64 <__libc_init_array+0x38>)
 8005e30:	4c0d      	ldr	r4, [pc, #52]	; (8005e68 <__libc_init_array+0x3c>)
 8005e32:	1ba4      	subs	r4, r4, r6
 8005e34:	10a4      	asrs	r4, r4, #2
 8005e36:	2500      	movs	r5, #0
 8005e38:	42a5      	cmp	r5, r4
 8005e3a:	d109      	bne.n	8005e50 <__libc_init_array+0x24>
 8005e3c:	4e0b      	ldr	r6, [pc, #44]	; (8005e6c <__libc_init_array+0x40>)
 8005e3e:	4c0c      	ldr	r4, [pc, #48]	; (8005e70 <__libc_init_array+0x44>)
 8005e40:	f000 f82c 	bl	8005e9c <_init>
 8005e44:	1ba4      	subs	r4, r4, r6
 8005e46:	10a4      	asrs	r4, r4, #2
 8005e48:	2500      	movs	r5, #0
 8005e4a:	42a5      	cmp	r5, r4
 8005e4c:	d105      	bne.n	8005e5a <__libc_init_array+0x2e>
 8005e4e:	bd70      	pop	{r4, r5, r6, pc}
 8005e50:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005e54:	4798      	blx	r3
 8005e56:	3501      	adds	r5, #1
 8005e58:	e7ee      	b.n	8005e38 <__libc_init_array+0xc>
 8005e5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005e5e:	4798      	blx	r3
 8005e60:	3501      	adds	r5, #1
 8005e62:	e7f2      	b.n	8005e4a <__libc_init_array+0x1e>
 8005e64:	08005fa0 	.word	0x08005fa0
 8005e68:	08005fa0 	.word	0x08005fa0
 8005e6c:	08005fa0 	.word	0x08005fa0
 8005e70:	08005fa4 	.word	0x08005fa4

08005e74 <memcpy>:
 8005e74:	b510      	push	{r4, lr}
 8005e76:	1e43      	subs	r3, r0, #1
 8005e78:	440a      	add	r2, r1
 8005e7a:	4291      	cmp	r1, r2
 8005e7c:	d100      	bne.n	8005e80 <memcpy+0xc>
 8005e7e:	bd10      	pop	{r4, pc}
 8005e80:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e84:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e88:	e7f7      	b.n	8005e7a <memcpy+0x6>

08005e8a <memset>:
 8005e8a:	4402      	add	r2, r0
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d100      	bne.n	8005e94 <memset+0xa>
 8005e92:	4770      	bx	lr
 8005e94:	f803 1b01 	strb.w	r1, [r3], #1
 8005e98:	e7f9      	b.n	8005e8e <memset+0x4>
	...

08005e9c <_init>:
 8005e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e9e:	bf00      	nop
 8005ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ea2:	bc08      	pop	{r3}
 8005ea4:	469e      	mov	lr, r3
 8005ea6:	4770      	bx	lr

08005ea8 <_fini>:
 8005ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eaa:	bf00      	nop
 8005eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eae:	bc08      	pop	{r3}
 8005eb0:	469e      	mov	lr, r3
 8005eb2:	4770      	bx	lr
