
TesteKlever.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068c4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08006a64  08006a64  00016a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b50  08006b50  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006b50  08006b50  00016b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b58  08006b58  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b58  08006b58  00016b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b5c  08006b5c  00016b5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006b60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004114  20000010  08006b70  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004124  08006b70  00024124  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014887  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d75  00000000  00000000  000348c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001288  00000000  00000000  00037640  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001130  00000000  00000000  000388c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017b45  00000000  00000000  000399f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e197  00000000  00000000  0005153d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000982ed  00000000  00000000  0005f6d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f79c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d40  00000000  00000000  000f7a3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006a4c 	.word	0x08006a4c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08006a4c 	.word	0x08006a4c

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	60f8      	str	r0, [r7, #12]
 80004e8:	60b9      	str	r1, [r7, #8]
 80004ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	4a07      	ldr	r2, [pc, #28]	; (800050c <vApplicationGetIdleTaskMemory+0x2c>)
 80004f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004f2:	68bb      	ldr	r3, [r7, #8]
 80004f4:	4a06      	ldr	r2, [pc, #24]	; (8000510 <vApplicationGetIdleTaskMemory+0x30>)
 80004f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2280      	movs	r2, #128	; 0x80
 80004fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80004fe:	bf00      	nop
 8000500:	3714      	adds	r7, #20
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	2000002c 	.word	0x2000002c
 8000510:	20000080 	.word	0x20000080

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b5b0      	push	{r4, r5, r7, lr}
 8000516:	b0ae      	sub	sp, #184	; 0xb8
 8000518:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051a:	f000 fe63 	bl	80011e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051e:	f000 f8cf 	bl	80006c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000522:	f000 f9d5 	bl	80008d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000526:	f000 f9b3 	bl	8000890 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800052a:	f000 f987 	bl	800083c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800052e:	f000 f933 	bl	8000798 <MX_ADC1_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of BinarySemaphoteUART */
  osSemaphoreDef(BinarySemaphoteUART);
 8000532:	2300      	movs	r3, #0
 8000534:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000538:	2300      	movs	r3, #0
 800053a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  BinarySemaphoteUARTHandle = osSemaphoreCreate(osSemaphore(BinarySemaphoteUART), 1);
 800053e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000542:	2101      	movs	r1, #1
 8000544:	4618      	mov	r0, r3
 8000546:	f003 fe60 	bl	800420a <osSemaphoreCreate>
 800054a:	4602      	mov	r2, r0
 800054c:	4b4c      	ldr	r3, [pc, #304]	; (8000680 <main+0x16c>)
 800054e:	601a      	str	r2, [r3, #0]

  /* definition and creation of BinarySemaphoreADC */
  osSemaphoreDef(BinarySemaphoreADC);
 8000550:	2300      	movs	r3, #0
 8000552:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000556:	2300      	movs	r3, #0
 8000558:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  BinarySemaphoreADCHandle = osSemaphoreCreate(osSemaphore(BinarySemaphoreADC), 1);
 800055c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000560:	2101      	movs	r1, #1
 8000562:	4618      	mov	r0, r3
 8000564:	f003 fe51 	bl	800420a <osSemaphoreCreate>
 8000568:	4602      	mov	r2, r0
 800056a:	4b46      	ldr	r3, [pc, #280]	; (8000684 <main+0x170>)
 800056c:	601a      	str	r2, [r3, #0]

  /* definition and creation of BinarySemaphoreDmaADC */
  osSemaphoreDef(BinarySemaphoreDmaADC);
 800056e:	2300      	movs	r3, #0
 8000570:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000574:	2300      	movs	r3, #0
 8000576:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  BinarySemaphoreDmaADCHandle = osSemaphoreCreate(osSemaphore(BinarySemaphoreDmaADC), 1);
 800057a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800057e:	2101      	movs	r1, #1
 8000580:	4618      	mov	r0, r3
 8000582:	f003 fe42 	bl	800420a <osSemaphoreCreate>
 8000586:	4602      	mov	r2, r0
 8000588:	4b3f      	ldr	r3, [pc, #252]	; (8000688 <main+0x174>)
 800058a:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of AdcReadsQueue */
  osMessageQDef(AdcReadsQueue, 16, uint16_t);
 800058c:	4b3f      	ldr	r3, [pc, #252]	; (800068c <main+0x178>)
 800058e:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8000592:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000594:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  AdcReadsQueueHandle = osMessageCreate(osMessageQ(AdcReadsQueue), NULL);
 8000598:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f003 feea 	bl	8004378 <osMessageCreate>
 80005a4:	4602      	mov	r2, r0
 80005a6:	4b3a      	ldr	r3, [pc, #232]	; (8000690 <main+0x17c>)
 80005a8:	601a      	str	r2, [r3, #0]

  /* definition and creation of LedQueue */
  osMessageQDef(LedQueue, 16, uint8_t);
 80005aa:	4b3a      	ldr	r3, [pc, #232]	; (8000694 <main+0x180>)
 80005ac:	f107 0480 	add.w	r4, r7, #128	; 0x80
 80005b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  LedQueueHandle = osMessageCreate(osMessageQ(LedQueue), NULL);
 80005b6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80005ba:	2100      	movs	r1, #0
 80005bc:	4618      	mov	r0, r3
 80005be:	f003 fedb 	bl	8004378 <osMessageCreate>
 80005c2:	4602      	mov	r2, r0
 80005c4:	4b34      	ldr	r3, [pc, #208]	; (8000698 <main+0x184>)
 80005c6:	601a      	str	r2, [r3, #0]

  /* definition and creation of UsartQueue */
  osMessageQDef(UsartQueue, 16, uint16_t);
 80005c8:	4b30      	ldr	r3, [pc, #192]	; (800068c <main+0x178>)
 80005ca:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80005ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  UsartQueueHandle = osMessageCreate(osMessageQ(UsartQueue), NULL);
 80005d4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f003 fecc 	bl	8004378 <osMessageCreate>
 80005e0:	4602      	mov	r2, r0
 80005e2:	4b2e      	ldr	r3, [pc, #184]	; (800069c <main+0x188>)
 80005e4:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005e6:	4b2e      	ldr	r3, [pc, #184]	; (80006a0 <main+0x18c>)
 80005e8:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80005ec:	461d      	mov	r5, r3
 80005ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005fa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005fe:	2100      	movs	r1, #0
 8000600:	4618      	mov	r0, r3
 8000602:	f003 fda2 	bl	800414a <osThreadCreate>
 8000606:	4602      	mov	r2, r0
 8000608:	4b26      	ldr	r3, [pc, #152]	; (80006a4 <main+0x190>)
 800060a:	601a      	str	r2, [r3, #0]

  /* definition and creation of usart_read_task */
  osThreadDef(usart_read_task, StartUsartTask, osPriorityIdle, 0, 128);
 800060c:	4b26      	ldr	r3, [pc, #152]	; (80006a8 <main+0x194>)
 800060e:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000612:	461d      	mov	r5, r3
 8000614:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000616:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000618:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800061c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  usart_read_taskHandle = osThreadCreate(osThread(usart_read_task), NULL);
 8000620:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f003 fd8f 	bl	800414a <osThreadCreate>
 800062c:	4602      	mov	r2, r0
 800062e:	4b1f      	ldr	r3, [pc, #124]	; (80006ac <main+0x198>)
 8000630:	601a      	str	r2, [r3, #0]

  /* definition and creation of LED_Task */
  osThreadDef(LED_Task, StartLedTask, osPriorityIdle, 0, 128);
 8000632:	4b1f      	ldr	r3, [pc, #124]	; (80006b0 <main+0x19c>)
 8000634:	f107 041c 	add.w	r4, r7, #28
 8000638:	461d      	mov	r5, r3
 800063a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800063c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800063e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000642:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LED_TaskHandle = osThreadCreate(osThread(LED_Task), NULL);
 8000646:	f107 031c 	add.w	r3, r7, #28
 800064a:	2100      	movs	r1, #0
 800064c:	4618      	mov	r0, r3
 800064e:	f003 fd7c 	bl	800414a <osThreadCreate>
 8000652:	4602      	mov	r2, r0
 8000654:	4b17      	ldr	r3, [pc, #92]	; (80006b4 <main+0x1a0>)
 8000656:	601a      	str	r2, [r3, #0]

  /* definition and creation of ADC_Task */
  osThreadDef(ADC_Task, StartAdcTask, osPriorityIdle, 0, 128);
 8000658:	4b17      	ldr	r3, [pc, #92]	; (80006b8 <main+0x1a4>)
 800065a:	463c      	mov	r4, r7
 800065c:	461d      	mov	r5, r3
 800065e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000660:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000662:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000666:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ADC_TaskHandle = osThreadCreate(osThread(ADC_Task), NULL);
 800066a:	463b      	mov	r3, r7
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f003 fd6b 	bl	800414a <osThreadCreate>
 8000674:	4602      	mov	r2, r0
 8000676:	4b11      	ldr	r3, [pc, #68]	; (80006bc <main+0x1a8>)
 8000678:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800067a:	f003 fd5f 	bl	800413c <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800067e:	e7fe      	b.n	800067e <main+0x16a>
 8000680:	200040dc 	.word	0x200040dc
 8000684:	20003fd8 	.word	0x20003fd8
 8000688:	20003fe0 	.word	0x20003fe0
 800068c:	08006a64 	.word	0x08006a64
 8000690:	20003fd4 	.word	0x20003fd4
 8000694:	08006a74 	.word	0x08006a74
 8000698:	20003fd0 	.word	0x20003fd0
 800069c:	20003fdc 	.word	0x20003fdc
 80006a0:	08006a90 	.word	0x08006a90
 80006a4:	20003fcc 	.word	0x20003fcc
 80006a8:	08006abc 	.word	0x08006abc
 80006ac:	20004034 	.word	0x20004034
 80006b0:	08006ae4 	.word	0x08006ae4
 80006b4:	20003fe4 	.word	0x20003fe4
 80006b8:	08006b0c 	.word	0x08006b0c
 80006bc:	20003fe8 	.word	0x20003fe8

080006c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b094      	sub	sp, #80	; 0x50
 80006c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c6:	f107 0320 	add.w	r3, r7, #32
 80006ca:	2230      	movs	r2, #48	; 0x30
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f006 f9b3 	bl	8006a3a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e4:	2300      	movs	r3, #0
 80006e6:	60bb      	str	r3, [r7, #8]
 80006e8:	4b29      	ldr	r3, [pc, #164]	; (8000790 <SystemClock_Config+0xd0>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ec:	4a28      	ldr	r2, [pc, #160]	; (8000790 <SystemClock_Config+0xd0>)
 80006ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f2:	6413      	str	r3, [r2, #64]	; 0x40
 80006f4:	4b26      	ldr	r3, [pc, #152]	; (8000790 <SystemClock_Config+0xd0>)
 80006f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006fc:	60bb      	str	r3, [r7, #8]
 80006fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000700:	2300      	movs	r3, #0
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	4b23      	ldr	r3, [pc, #140]	; (8000794 <SystemClock_Config+0xd4>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800070c:	4a21      	ldr	r2, [pc, #132]	; (8000794 <SystemClock_Config+0xd4>)
 800070e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000712:	6013      	str	r3, [r2, #0]
 8000714:	4b1f      	ldr	r3, [pc, #124]	; (8000794 <SystemClock_Config+0xd4>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000720:	2302      	movs	r3, #2
 8000722:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000724:	2301      	movs	r3, #1
 8000726:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000728:	2310      	movs	r3, #16
 800072a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072c:	2302      	movs	r3, #2
 800072e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000730:	2300      	movs	r3, #0
 8000732:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000734:	2310      	movs	r3, #16
 8000736:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000738:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800073c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800073e:	2304      	movs	r3, #4
 8000740:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000742:	2307      	movs	r3, #7
 8000744:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000746:	f107 0320 	add.w	r3, r7, #32
 800074a:	4618      	mov	r0, r3
 800074c:	f001 ff80 	bl	8002650 <HAL_RCC_OscConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000756:	f000 fb79 	bl	8000e4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075a:	230f      	movs	r3, #15
 800075c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075e:	2302      	movs	r3, #2
 8000760:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000762:	2300      	movs	r3, #0
 8000764:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000766:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800076a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800076c:	2300      	movs	r3, #0
 800076e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000770:	f107 030c 	add.w	r3, r7, #12
 8000774:	2102      	movs	r1, #2
 8000776:	4618      	mov	r0, r3
 8000778:	f002 f9da 	bl	8002b30 <HAL_RCC_ClockConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000782:	f000 fb63 	bl	8000e4c <Error_Handler>
  }
}
 8000786:	bf00      	nop
 8000788:	3750      	adds	r7, #80	; 0x50
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40023800 	.word	0x40023800
 8000794:	40007000 	.word	0x40007000

08000798 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800079e:	463b      	mov	r3, r7
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80007aa:	4b21      	ldr	r3, [pc, #132]	; (8000830 <MX_ADC1_Init+0x98>)
 80007ac:	4a21      	ldr	r2, [pc, #132]	; (8000834 <MX_ADC1_Init+0x9c>)
 80007ae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007b0:	4b1f      	ldr	r3, [pc, #124]	; (8000830 <MX_ADC1_Init+0x98>)
 80007b2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007b6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007b8:	4b1d      	ldr	r3, [pc, #116]	; (8000830 <MX_ADC1_Init+0x98>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80007be:	4b1c      	ldr	r3, [pc, #112]	; (8000830 <MX_ADC1_Init+0x98>)
 80007c0:	2201      	movs	r2, #1
 80007c2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007c4:	4b1a      	ldr	r3, [pc, #104]	; (8000830 <MX_ADC1_Init+0x98>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007ca:	4b19      	ldr	r3, [pc, #100]	; (8000830 <MX_ADC1_Init+0x98>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007d2:	4b17      	ldr	r3, [pc, #92]	; (8000830 <MX_ADC1_Init+0x98>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007d8:	4b15      	ldr	r3, [pc, #84]	; (8000830 <MX_ADC1_Init+0x98>)
 80007da:	4a17      	ldr	r2, [pc, #92]	; (8000838 <MX_ADC1_Init+0xa0>)
 80007dc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007de:	4b14      	ldr	r3, [pc, #80]	; (8000830 <MX_ADC1_Init+0x98>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007e4:	4b12      	ldr	r3, [pc, #72]	; (8000830 <MX_ADC1_Init+0x98>)
 80007e6:	2201      	movs	r2, #1
 80007e8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80007ea:	4b11      	ldr	r3, [pc, #68]	; (8000830 <MX_ADC1_Init+0x98>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80007f2:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <MX_ADC1_Init+0x98>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007f8:	480d      	ldr	r0, [pc, #52]	; (8000830 <MX_ADC1_Init+0x98>)
 80007fa:	f000 fd35 	bl	8001268 <HAL_ADC_Init>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000804:	f000 fb22 	bl	8000e4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000808:	2300      	movs	r3, #0
 800080a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800080c:	2301      	movs	r3, #1
 800080e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000810:	2300      	movs	r3, #0
 8000812:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000814:	463b      	mov	r3, r7
 8000816:	4619      	mov	r1, r3
 8000818:	4805      	ldr	r0, [pc, #20]	; (8000830 <MX_ADC1_Init+0x98>)
 800081a:	f000 fe51 	bl	80014c0 <HAL_ADC_ConfigChannel>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000824:	f000 fb12 	bl	8000e4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000828:	bf00      	nop
 800082a:	3710      	adds	r7, #16
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	20003fec 	.word	0x20003fec
 8000834:	40012000 	.word	0x40012000
 8000838:	0f000001 	.word	0x0f000001

0800083c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000840:	4b11      	ldr	r3, [pc, #68]	; (8000888 <MX_USART2_UART_Init+0x4c>)
 8000842:	4a12      	ldr	r2, [pc, #72]	; (800088c <MX_USART2_UART_Init+0x50>)
 8000844:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000846:	4b10      	ldr	r3, [pc, #64]	; (8000888 <MX_USART2_UART_Init+0x4c>)
 8000848:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800084c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <MX_USART2_UART_Init+0x4c>)
 8000850:	2200      	movs	r2, #0
 8000852:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000854:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <MX_USART2_UART_Init+0x4c>)
 8000856:	2200      	movs	r2, #0
 8000858:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800085a:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <MX_USART2_UART_Init+0x4c>)
 800085c:	2200      	movs	r2, #0
 800085e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000860:	4b09      	ldr	r3, [pc, #36]	; (8000888 <MX_USART2_UART_Init+0x4c>)
 8000862:	220c      	movs	r2, #12
 8000864:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000866:	4b08      	ldr	r3, [pc, #32]	; (8000888 <MX_USART2_UART_Init+0x4c>)
 8000868:	2200      	movs	r2, #0
 800086a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <MX_USART2_UART_Init+0x4c>)
 800086e:	2200      	movs	r2, #0
 8000870:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000872:	4805      	ldr	r0, [pc, #20]	; (8000888 <MX_USART2_UART_Init+0x4c>)
 8000874:	f002 fd9e 	bl	80033b4 <HAL_UART_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800087e:	f000 fae5 	bl	8000e4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	2000409c 	.word	0x2000409c
 800088c:	40004400 	.word	0x40004400

08000890 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	607b      	str	r3, [r7, #4]
 800089a:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <MX_DMA_Init+0x3c>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a0b      	ldr	r2, [pc, #44]	; (80008cc <MX_DMA_Init+0x3c>)
 80008a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b09      	ldr	r3, [pc, #36]	; (80008cc <MX_DMA_Init+0x3c>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80008b2:	2200      	movs	r2, #0
 80008b4:	2105      	movs	r1, #5
 80008b6:	2038      	movs	r0, #56	; 0x38
 80008b8:	f001 f95a 	bl	8001b70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80008bc:	2038      	movs	r0, #56	; 0x38
 80008be:	f001 f973 	bl	8001ba8 <HAL_NVIC_EnableIRQ>

}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40023800 	.word	0x40023800

080008d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08a      	sub	sp, #40	; 0x28
 80008d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d6:	f107 0314 	add.w	r3, r7, #20
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	60da      	str	r2, [r3, #12]
 80008e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	613b      	str	r3, [r7, #16]
 80008ea:	4b2d      	ldr	r3, [pc, #180]	; (80009a0 <MX_GPIO_Init+0xd0>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a2c      	ldr	r2, [pc, #176]	; (80009a0 <MX_GPIO_Init+0xd0>)
 80008f0:	f043 0304 	orr.w	r3, r3, #4
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b2a      	ldr	r3, [pc, #168]	; (80009a0 <MX_GPIO_Init+0xd0>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0304 	and.w	r3, r3, #4
 80008fe:	613b      	str	r3, [r7, #16]
 8000900:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	60fb      	str	r3, [r7, #12]
 8000906:	4b26      	ldr	r3, [pc, #152]	; (80009a0 <MX_GPIO_Init+0xd0>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a25      	ldr	r2, [pc, #148]	; (80009a0 <MX_GPIO_Init+0xd0>)
 800090c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b23      	ldr	r3, [pc, #140]	; (80009a0 <MX_GPIO_Init+0xd0>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	60bb      	str	r3, [r7, #8]
 8000922:	4b1f      	ldr	r3, [pc, #124]	; (80009a0 <MX_GPIO_Init+0xd0>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a1e      	ldr	r2, [pc, #120]	; (80009a0 <MX_GPIO_Init+0xd0>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b1c      	ldr	r3, [pc, #112]	; (80009a0 <MX_GPIO_Init+0xd0>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	60bb      	str	r3, [r7, #8]
 8000938:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	607b      	str	r3, [r7, #4]
 800093e:	4b18      	ldr	r3, [pc, #96]	; (80009a0 <MX_GPIO_Init+0xd0>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a17      	ldr	r2, [pc, #92]	; (80009a0 <MX_GPIO_Init+0xd0>)
 8000944:	f043 0302 	orr.w	r3, r3, #2
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
 800094a:	4b15      	ldr	r3, [pc, #84]	; (80009a0 <MX_GPIO_Init+0xd0>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f003 0302 	and.w	r3, r3, #2
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000956:	2200      	movs	r2, #0
 8000958:	2120      	movs	r1, #32
 800095a:	4812      	ldr	r0, [pc, #72]	; (80009a4 <MX_GPIO_Init+0xd4>)
 800095c:	f001 fe44 	bl	80025e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000960:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000964:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000966:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <MX_GPIO_Init+0xd8>)
 8000968:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800096e:	f107 0314 	add.w	r3, r7, #20
 8000972:	4619      	mov	r1, r3
 8000974:	480d      	ldr	r0, [pc, #52]	; (80009ac <MX_GPIO_Init+0xdc>)
 8000976:	f001 fcb5 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800097a:	2320      	movs	r3, #32
 800097c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097e:	2301      	movs	r3, #1
 8000980:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000986:	2300      	movs	r3, #0
 8000988:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800098a:	f107 0314 	add.w	r3, r7, #20
 800098e:	4619      	mov	r1, r3
 8000990:	4804      	ldr	r0, [pc, #16]	; (80009a4 <MX_GPIO_Init+0xd4>)
 8000992:	f001 fca7 	bl	80022e4 <HAL_GPIO_Init>

}
 8000996:	bf00      	nop
 8000998:	3728      	adds	r7, #40	; 0x28
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40023800 	.word	0x40023800
 80009a4:	40020000 	.word	0x40020000
 80009a8:	10210000 	.word	0x10210000
 80009ac:	40020800 	.word	0x40020800

080009b0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]

	if(huart->Instance==USART2){
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a05      	ldr	r2, [pc, #20]	; (80009d4 <HAL_UART_RxCpltCallback+0x24>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d104      	bne.n	80009cc <HAL_UART_RxCpltCallback+0x1c>
			osSemaphoreRelease(BinarySemaphoteUARTHandle);
 80009c2:	4b05      	ldr	r3, [pc, #20]	; (80009d8 <HAL_UART_RxCpltCallback+0x28>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4618      	mov	r0, r3
 80009c8:	f003 fca0 	bl	800430c <osSemaphoreRelease>
	}

}
 80009cc:	bf00      	nop
 80009ce:	3708      	adds	r7, #8
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40004400 	.word	0x40004400
 80009d8:	200040dc 	.word	0x200040dc

080009dc <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
	osSemaphoreRelease(BinarySemaphoreDmaADCHandle);
 80009e4:	4b04      	ldr	r3, [pc, #16]	; (80009f8 <HAL_ADC_ConvCpltCallback+0x1c>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4618      	mov	r0, r3
 80009ea:	f003 fc8f 	bl	800430c <osSemaphoreRelease>

}
 80009ee:	bf00      	nop
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20003fe0 	.word	0x20003fe0

080009fc <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

     osDelay(1000);
 8000a04:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a08:	f003 fbeb 	bl	80041e2 <osDelay>
 8000a0c:	e7fa      	b.n	8000a04 <StartDefaultTask+0x8>
	...

08000a10 <StartUsartTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUsartTask */
void StartUsartTask(void const * argument)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b0cc      	sub	sp, #304	; 0x130
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartUsartTask */
  /* Infinite loop */
  for(;;)
  {
	 uint8_t data[requestSize];
	 osSemaphoreWait(BinarySemaphoteUARTHandle, osWaitForever);
 8000a1a:	4bcf      	ldr	r3, [pc, #828]	; (8000d58 <StartUsartTask+0x348>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f04f 31ff 	mov.w	r1, #4294967295
 8000a22:	4618      	mov	r0, r3
 8000a24:	f003 fc24 	bl	8004270 <osSemaphoreWait>
	 HAL_UART_Receive_IT(&huart2, data , requestSize);
 8000a28:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000a2c:	2204      	movs	r2, #4
 8000a2e:	4619      	mov	r1, r3
 8000a30:	48ca      	ldr	r0, [pc, #808]	; (8000d5c <StartUsartTask+0x34c>)
 8000a32:	f002 fd51 	bl	80034d8 <HAL_UART_Receive_IT>
	 if(data[0] != 0x01){
 8000a36:	f897 3120 	ldrb.w	r3, [r7, #288]	; 0x120
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d028      	beq.n	8000a90 <StartUsartTask+0x80>

			 uint8_t response [5];
			 response[0] = 0x01;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118
		 	 response[1] = data[1];
 8000a44:	f897 3121 	ldrb.w	r3, [r7, #289]	; 0x121
 8000a48:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
			 response[2] = 0x01;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
	 		 response[3] = NACK;
 8000a52:	2317      	movs	r3, #23
 8000a54:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
	 		 response[4] = response[0] + response[1] + response[2] + response[3] + response[4];
 8000a58:	f897 2118 	ldrb.w	r2, [r7, #280]	; 0x118
 8000a5c:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 8000a60:	4413      	add	r3, r2
 8000a62:	b2da      	uxtb	r2, r3
 8000a64:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
 8000a68:	4413      	add	r3, r2
 8000a6a:	b2da      	uxtb	r2, r3
 8000a6c:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8000a70:	4413      	add	r3, r2
 8000a72:	b2da      	uxtb	r2, r3
 8000a74:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 8000a78:	4413      	add	r3, r2
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c
	 		 HAL_UART_Transmit_IT(&huart2, response, 5);
 8000a80:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000a84:	2205      	movs	r2, #5
 8000a86:	4619      	mov	r1, r3
 8000a88:	48b4      	ldr	r0, [pc, #720]	; (8000d5c <StartUsartTask+0x34c>)
 8000a8a:	f002 fce0 	bl	800344e <HAL_UART_Transmit_IT>
 8000a8e:	e15e      	b.n	8000d4e <StartUsartTask+0x33e>


	 }else if(data[3] != data[0]+data[1]+data[2]){
 8000a90:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
 8000a94:	461a      	mov	r2, r3
 8000a96:	f897 3120 	ldrb.w	r3, [r7, #288]	; 0x120
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	f897 3121 	ldrb.w	r3, [r7, #289]	; 0x121
 8000aa0:	440b      	add	r3, r1
 8000aa2:	f897 1122 	ldrb.w	r1, [r7, #290]	; 0x122
 8000aa6:	440b      	add	r3, r1
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	d028      	beq.n	8000afe <StartUsartTask+0xee>
		     uint8_t response [5];
		     response[0] = 0x01;
 8000aac:	2301      	movs	r3, #1
 8000aae:	f887 3110 	strb.w	r3, [r7, #272]	; 0x110
		 	 response[1] = data[1];
 8000ab2:	f897 3121 	ldrb.w	r3, [r7, #289]	; 0x121
 8000ab6:	f887 3111 	strb.w	r3, [r7, #273]	; 0x111
		 	 response[2] = 0x01;
 8000aba:	2301      	movs	r3, #1
 8000abc:	f887 3112 	strb.w	r3, [r7, #274]	; 0x112
		 	 response[3] = NACK;
 8000ac0:	2317      	movs	r3, #23
 8000ac2:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
		 	 response[4] = response[0] + response[1] + response[2] + response[3] + response[4];
 8000ac6:	f897 2110 	ldrb.w	r2, [r7, #272]	; 0x110
 8000aca:	f897 3111 	ldrb.w	r3, [r7, #273]	; 0x111
 8000ace:	4413      	add	r3, r2
 8000ad0:	b2da      	uxtb	r2, r3
 8000ad2:	f897 3112 	ldrb.w	r3, [r7, #274]	; 0x112
 8000ad6:	4413      	add	r3, r2
 8000ad8:	b2da      	uxtb	r2, r3
 8000ada:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8000ade:	4413      	add	r3, r2
 8000ae0:	b2da      	uxtb	r2, r3
 8000ae2:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 8000ae6:	4413      	add	r3, r2
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114
		 	 HAL_UART_Transmit_IT(&huart2, response, 5);
 8000aee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000af2:	2205      	movs	r2, #5
 8000af4:	4619      	mov	r1, r3
 8000af6:	4899      	ldr	r0, [pc, #612]	; (8000d5c <StartUsartTask+0x34c>)
 8000af8:	f002 fca9 	bl	800344e <HAL_UART_Transmit_IT>
 8000afc:	e127      	b.n	8000d4e <StartUsartTask+0x33e>
		     uint8_t response[255];
		     uint8_t response_size;
		     uint16_t Adc_Queue_read;
		     uint8_t AdcMSB;
		     uint8_t AdcLSB;
		 	 switch (data[1]){
 8000afe:	f897 3121 	ldrb.w	r3, [r7, #289]	; 0x121
 8000b02:	3b01      	subs	r3, #1
 8000b04:	2b04      	cmp	r3, #4
 8000b06:	f200 8119 	bhi.w	8000d3c <StartUsartTask+0x32c>
 8000b0a:	a201      	add	r2, pc, #4	; (adr r2, 8000b10 <StartUsartTask+0x100>)
 8000b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b10:	08000b25 	.word	0x08000b25
 8000b14:	08000b91 	.word	0x08000b91
 8000b18:	08000bfd 	.word	0x08000bfd
 8000b1c:	08000c69 	.word	0x08000c69
 8000b20:	08000ca5 	.word	0x08000ca5
		 	 	 case 0x01:
		 	 		 //Turn on LED
		 	 		 command= 0x01;
 8000b24:	2301      	movs	r3, #1
 8000b26:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		 	 		 xQueueSend(LedQueueHandle,&command,osWaitForever);
 8000b2a:	4b8d      	ldr	r3, [pc, #564]	; (8000d60 <StartUsartTask+0x350>)
 8000b2c:	6818      	ldr	r0, [r3, #0]
 8000b2e:	f207 110f 	addw	r1, r7, #271	; 0x10f
 8000b32:	2300      	movs	r3, #0
 8000b34:	f04f 32ff 	mov.w	r2, #4294967295
 8000b38:	f003 fe32 	bl	80047a0 <xQueueGenericSend>
		 	 		 response[0] = 0x01;
 8000b3c:	f107 030c 	add.w	r3, r7, #12
 8000b40:	2201      	movs	r2, #1
 8000b42:	701a      	strb	r2, [r3, #0]
		 	 		 response[1] = data[1];
 8000b44:	f897 2121 	ldrb.w	r2, [r7, #289]	; 0x121
 8000b48:	f107 030c 	add.w	r3, r7, #12
 8000b4c:	705a      	strb	r2, [r3, #1]
		 	 		 response[2] = 0x01;
 8000b4e:	f107 030c 	add.w	r3, r7, #12
 8000b52:	2201      	movs	r2, #1
 8000b54:	709a      	strb	r2, [r3, #2]
		 	 		 response[3] = ACK;
 8000b56:	f107 030c 	add.w	r3, r7, #12
 8000b5a:	2206      	movs	r2, #6
 8000b5c:	70da      	strb	r2, [r3, #3]
		 	 	     response[4] = response[0] + response[1] + response[2] + response[3];
 8000b5e:	f107 030c 	add.w	r3, r7, #12
 8000b62:	781a      	ldrb	r2, [r3, #0]
 8000b64:	f107 030c 	add.w	r3, r7, #12
 8000b68:	785b      	ldrb	r3, [r3, #1]
 8000b6a:	4413      	add	r3, r2
 8000b6c:	b2da      	uxtb	r2, r3
 8000b6e:	f107 030c 	add.w	r3, r7, #12
 8000b72:	789b      	ldrb	r3, [r3, #2]
 8000b74:	4413      	add	r3, r2
 8000b76:	b2da      	uxtb	r2, r3
 8000b78:	f107 030c 	add.w	r3, r7, #12
 8000b7c:	78db      	ldrb	r3, [r3, #3]
 8000b7e:	4413      	add	r3, r2
 8000b80:	b2da      	uxtb	r2, r3
 8000b82:	f107 030c 	add.w	r3, r7, #12
 8000b86:	711a      	strb	r2, [r3, #4]
		 	 	     response_size= 5;
 8000b88:	2305      	movs	r3, #5
 8000b8a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		 	 		 break;
 8000b8e:	e0d5      	b.n	8000d3c <StartUsartTask+0x32c>
		 	 	 case 0x02:
		 	 		 //Turn off LED
		 	 		 command= 0x02;
 8000b90:	2302      	movs	r3, #2
 8000b92:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		 	 		 xQueueSend(LedQueueHandle,&command,osWaitForever);
 8000b96:	4b72      	ldr	r3, [pc, #456]	; (8000d60 <StartUsartTask+0x350>)
 8000b98:	6818      	ldr	r0, [r3, #0]
 8000b9a:	f207 110f 	addw	r1, r7, #271	; 0x10f
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ba4:	f003 fdfc 	bl	80047a0 <xQueueGenericSend>
		 	  		 response[0] = 0x01;
 8000ba8:	f107 030c 	add.w	r3, r7, #12
 8000bac:	2201      	movs	r2, #1
 8000bae:	701a      	strb	r2, [r3, #0]
		 	         response[1] = data[1];
 8000bb0:	f897 2121 	ldrb.w	r2, [r7, #289]	; 0x121
 8000bb4:	f107 030c 	add.w	r3, r7, #12
 8000bb8:	705a      	strb	r2, [r3, #1]
		 	 		 response[2] = 0x01;
 8000bba:	f107 030c 	add.w	r3, r7, #12
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	709a      	strb	r2, [r3, #2]
		 	 	     response[3] = ACK;
 8000bc2:	f107 030c 	add.w	r3, r7, #12
 8000bc6:	2206      	movs	r2, #6
 8000bc8:	70da      	strb	r2, [r3, #3]
		 	 		 response[4] = response[0] + response[1] + response[2] + response[3];
 8000bca:	f107 030c 	add.w	r3, r7, #12
 8000bce:	781a      	ldrb	r2, [r3, #0]
 8000bd0:	f107 030c 	add.w	r3, r7, #12
 8000bd4:	785b      	ldrb	r3, [r3, #1]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	b2da      	uxtb	r2, r3
 8000bda:	f107 030c 	add.w	r3, r7, #12
 8000bde:	789b      	ldrb	r3, [r3, #2]
 8000be0:	4413      	add	r3, r2
 8000be2:	b2da      	uxtb	r2, r3
 8000be4:	f107 030c 	add.w	r3, r7, #12
 8000be8:	78db      	ldrb	r3, [r3, #3]
 8000bea:	4413      	add	r3, r2
 8000bec:	b2da      	uxtb	r2, r3
 8000bee:	f107 030c 	add.w	r3, r7, #12
 8000bf2:	711a      	strb	r2, [r3, #4]
		 	 		 response_size= 5;
 8000bf4:	2305      	movs	r3, #5
 8000bf6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		 	 	     break;
 8000bfa:	e09f      	b.n	8000d3c <StartUsartTask+0x32c>
		 	 	case 0x03:
		 	 		 //Toggle LED
		 	 	     command= 0x03;
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		 	 		 xQueueSend(LedQueueHandle,&command,osWaitForever);
 8000c02:	4b57      	ldr	r3, [pc, #348]	; (8000d60 <StartUsartTask+0x350>)
 8000c04:	6818      	ldr	r0, [r3, #0]
 8000c06:	f207 110f 	addw	r1, r7, #271	; 0x10f
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c10:	f003 fdc6 	bl	80047a0 <xQueueGenericSend>
		 	 	     response[0] = 0x01;
 8000c14:	f107 030c 	add.w	r3, r7, #12
 8000c18:	2201      	movs	r2, #1
 8000c1a:	701a      	strb	r2, [r3, #0]
		 	 	     response[1] = data[1];
 8000c1c:	f897 2121 	ldrb.w	r2, [r7, #289]	; 0x121
 8000c20:	f107 030c 	add.w	r3, r7, #12
 8000c24:	705a      	strb	r2, [r3, #1]
		 	 		 response[2] = 0x01;
 8000c26:	f107 030c 	add.w	r3, r7, #12
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	709a      	strb	r2, [r3, #2]
		 	 		 response[3] = ACK;
 8000c2e:	f107 030c 	add.w	r3, r7, #12
 8000c32:	2206      	movs	r2, #6
 8000c34:	70da      	strb	r2, [r3, #3]
		 	 		 response[4] = response[0] + response[1] + response[2] + response[3];
 8000c36:	f107 030c 	add.w	r3, r7, #12
 8000c3a:	781a      	ldrb	r2, [r3, #0]
 8000c3c:	f107 030c 	add.w	r3, r7, #12
 8000c40:	785b      	ldrb	r3, [r3, #1]
 8000c42:	4413      	add	r3, r2
 8000c44:	b2da      	uxtb	r2, r3
 8000c46:	f107 030c 	add.w	r3, r7, #12
 8000c4a:	789b      	ldrb	r3, [r3, #2]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	b2da      	uxtb	r2, r3
 8000c50:	f107 030c 	add.w	r3, r7, #12
 8000c54:	78db      	ldrb	r3, [r3, #3]
 8000c56:	4413      	add	r3, r2
 8000c58:	b2da      	uxtb	r2, r3
 8000c5a:	f107 030c 	add.w	r3, r7, #12
 8000c5e:	711a      	strb	r2, [r3, #4]
		 	 		 response_size= 5;
 8000c60:	2305      	movs	r3, #5
 8000c62:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		 	 	     break;
 8000c66:	e069      	b.n	8000d3c <StartUsartTask+0x32c>
		 	 	case 0x04:
		 	 		 for(int i = 0; i < requestSize; i++ ){
 8000c68:	2300      	movs	r3, #0
 8000c6a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8000c6e:	e011      	b.n	8000c94 <StartUsartTask+0x284>
		 	 			 	response[i] = data[i];
 8000c70:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000c74:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000c78:	4413      	add	r3, r2
 8000c7a:	7819      	ldrb	r1, [r3, #0]
 8000c7c:	f107 020c 	add.w	r2, r7, #12
 8000c80:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000c84:	4413      	add	r3, r2
 8000c86:	460a      	mov	r2, r1
 8000c88:	701a      	strb	r2, [r3, #0]
		 	 		 for(int i = 0; i < requestSize; i++ ){
 8000c8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000c8e:	3301      	adds	r3, #1
 8000c90:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8000c94:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000c98:	2b03      	cmp	r3, #3
 8000c9a:	dde9      	ble.n	8000c70 <StartUsartTask+0x260>
		 	 		 }
		 	 		 response_size = 4;
 8000c9c:	2304      	movs	r3, #4
 8000c9e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		 	 		 break;
 8000ca2:	e04b      	b.n	8000d3c <StartUsartTask+0x32c>
		 	 	case 0x05:
		 	 		osSemaphoreRelease(BinarySemaphoreADCHandle);
 8000ca4:	4b2f      	ldr	r3, [pc, #188]	; (8000d64 <StartUsartTask+0x354>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f003 fb2f 	bl	800430c <osSemaphoreRelease>
		 	 		xQueueReceive(AdcReadsQueueHandle, &Adc_Queue_read, osWaitForever);
 8000cae:	4b2e      	ldr	r3, [pc, #184]	; (8000d68 <StartUsartTask+0x358>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 8000cb6:	f04f 32ff 	mov.w	r2, #4294967295
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f003 fef4 	bl	8004aa8 <xQueueReceive>
		 	 		AdcMSB = Adc_Queue_read >> 8;
 8000cc0:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8000cc4:	0a1b      	lsrs	r3, r3, #8
 8000cc6:	b29b      	uxth	r3, r3
 8000cc8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
		 	 		AdcLSB = Adc_Queue_read & 0xFF;
 8000ccc:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8000cd0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

		 	 		response[0] = 0x01;
 8000cd4:	f107 030c 	add.w	r3, r7, #12
 8000cd8:	2201      	movs	r2, #1
 8000cda:	701a      	strb	r2, [r3, #0]
		 	 		response[1] = data[1];
 8000cdc:	f897 2121 	ldrb.w	r2, [r7, #289]	; 0x121
 8000ce0:	f107 030c 	add.w	r3, r7, #12
 8000ce4:	705a      	strb	r2, [r3, #1]
		 	 		response[2] = 0x02;
 8000ce6:	f107 030c 	add.w	r3, r7, #12
 8000cea:	2202      	movs	r2, #2
 8000cec:	709a      	strb	r2, [r3, #2]
		 	 		response[3] = AdcMSB;
 8000cee:	f107 030c 	add.w	r3, r7, #12
 8000cf2:	f897 2127 	ldrb.w	r2, [r7, #295]	; 0x127
 8000cf6:	70da      	strb	r2, [r3, #3]
		 	 		response[4] = AdcLSB;
 8000cf8:	f107 030c 	add.w	r3, r7, #12
 8000cfc:	f897 2126 	ldrb.w	r2, [r7, #294]	; 0x126
 8000d00:	711a      	strb	r2, [r3, #4]
		 	 		response[5] = response[0] + response[1] + response[2] + response[3] + response[4];
 8000d02:	f107 030c 	add.w	r3, r7, #12
 8000d06:	781a      	ldrb	r2, [r3, #0]
 8000d08:	f107 030c 	add.w	r3, r7, #12
 8000d0c:	785b      	ldrb	r3, [r3, #1]
 8000d0e:	4413      	add	r3, r2
 8000d10:	b2da      	uxtb	r2, r3
 8000d12:	f107 030c 	add.w	r3, r7, #12
 8000d16:	789b      	ldrb	r3, [r3, #2]
 8000d18:	4413      	add	r3, r2
 8000d1a:	b2da      	uxtb	r2, r3
 8000d1c:	f107 030c 	add.w	r3, r7, #12
 8000d20:	78db      	ldrb	r3, [r3, #3]
 8000d22:	4413      	add	r3, r2
 8000d24:	b2da      	uxtb	r2, r3
 8000d26:	f107 030c 	add.w	r3, r7, #12
 8000d2a:	791b      	ldrb	r3, [r3, #4]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	b2da      	uxtb	r2, r3
 8000d30:	f107 030c 	add.w	r3, r7, #12
 8000d34:	715a      	strb	r2, [r3, #5]
		 	 		response_size = 6;
 8000d36:	2306      	movs	r3, #6
 8000d38:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f



		 	 }
		     HAL_UART_Transmit_IT(&huart2, response, response_size);
 8000d3c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8000d40:	b29a      	uxth	r2, r3
 8000d42:	f107 030c 	add.w	r3, r7, #12
 8000d46:	4619      	mov	r1, r3
 8000d48:	4804      	ldr	r0, [pc, #16]	; (8000d5c <StartUsartTask+0x34c>)
 8000d4a:	f002 fb80 	bl	800344e <HAL_UART_Transmit_IT>
	 }



	 osDelay(1);
 8000d4e:	2001      	movs	r0, #1
 8000d50:	f003 fa47 	bl	80041e2 <osDelay>
  {
 8000d54:	e661      	b.n	8000a1a <StartUsartTask+0xa>
 8000d56:	bf00      	nop
 8000d58:	200040dc 	.word	0x200040dc
 8000d5c:	2000409c 	.word	0x2000409c
 8000d60:	20003fd0 	.word	0x20003fd0
 8000d64:	20003fd8 	.word	0x20003fd8
 8000d68:	20003fd4 	.word	0x20003fd4

08000d6c <StartLedTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLedTask */
void StartLedTask(void const * argument)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLedTask */
  /* Infinite loop */
  for(;;)
  {
	uint8_t command;
	xQueueReceive(LedQueueHandle, &command, osWaitForever);
 8000d74:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <StartLedTask+0x54>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f107 010f 	add.w	r1, r7, #15
 8000d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d80:	4618      	mov	r0, r3
 8000d82:	f003 fe91 	bl	8004aa8 <xQueueReceive>
	switch(command){
 8000d86:	7bfb      	ldrb	r3, [r7, #15]
 8000d88:	2b02      	cmp	r3, #2
 8000d8a:	d009      	beq.n	8000da0 <StartLedTask+0x34>
 8000d8c:	2b03      	cmp	r3, #3
 8000d8e:	d00d      	beq.n	8000dac <StartLedTask+0x40>
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d110      	bne.n	8000db6 <StartLedTask+0x4a>
	   case 0x01:
		   HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8000d94:	2201      	movs	r2, #1
 8000d96:	2120      	movs	r1, #32
 8000d98:	480a      	ldr	r0, [pc, #40]	; (8000dc4 <StartLedTask+0x58>)
 8000d9a:	f001 fc25 	bl	80025e8 <HAL_GPIO_WritePin>
		   break;
 8000d9e:	e00a      	b.n	8000db6 <StartLedTask+0x4a>
	   case 0x02:
		   HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 8000da0:	2200      	movs	r2, #0
 8000da2:	2120      	movs	r1, #32
 8000da4:	4807      	ldr	r0, [pc, #28]	; (8000dc4 <StartLedTask+0x58>)
 8000da6:	f001 fc1f 	bl	80025e8 <HAL_GPIO_WritePin>
		   break;
 8000daa:	e004      	b.n	8000db6 <StartLedTask+0x4a>
	   case 0x03:
	   	   HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000dac:	2120      	movs	r1, #32
 8000dae:	4805      	ldr	r0, [pc, #20]	; (8000dc4 <StartLedTask+0x58>)
 8000db0:	f001 fc33 	bl	800261a <HAL_GPIO_TogglePin>
	   	   break;
 8000db4:	bf00      	nop

	}
    osDelay(1);
 8000db6:	2001      	movs	r0, #1
 8000db8:	f003 fa13 	bl	80041e2 <osDelay>
  {
 8000dbc:	e7da      	b.n	8000d74 <StartLedTask+0x8>
 8000dbe:	bf00      	nop
 8000dc0:	20003fd0 	.word	0x20003fd0
 8000dc4:	40020000 	.word	0x40020000

08000dc8 <StartAdcTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAdcTask */
void StartAdcTask(void const * argument)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]



  for(;;)
  {
    osSemaphoreWait(BinarySemaphoreADCHandle, osWaitForever);
 8000dd0:	4b10      	ldr	r3, [pc, #64]	; (8000e14 <StartAdcTask+0x4c>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f04f 31ff 	mov.w	r1, #4294967295
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f003 fa49 	bl	8004270 <osSemaphoreWait>



	HAL_ADC_Start_DMA(&hadc1, &ADC_read, 1);
 8000dde:	2201      	movs	r2, #1
 8000de0:	490d      	ldr	r1, [pc, #52]	; (8000e18 <StartAdcTask+0x50>)
 8000de2:	480e      	ldr	r0, [pc, #56]	; (8000e1c <StartAdcTask+0x54>)
 8000de4:	f000 fa84 	bl	80012f0 <HAL_ADC_Start_DMA>
	osSemaphoreWait(BinarySemaphoreDmaADCHandle, osWaitForever);
 8000de8:	4b0d      	ldr	r3, [pc, #52]	; (8000e20 <StartAdcTask+0x58>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f04f 31ff 	mov.w	r1, #4294967295
 8000df0:	4618      	mov	r0, r3
 8000df2:	f003 fa3d 	bl	8004270 <osSemaphoreWait>
	uint32_t ADCRT = ADC_read;
 8000df6:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <StartAdcTask+0x50>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	60fb      	str	r3, [r7, #12]
	xQueueSend(AdcReadsQueueHandle,&ADC_read,osWaitForever);
 8000dfc:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <StartAdcTask+0x5c>)
 8000dfe:	6818      	ldr	r0, [r3, #0]
 8000e00:	2300      	movs	r3, #0
 8000e02:	f04f 32ff 	mov.w	r2, #4294967295
 8000e06:	4904      	ldr	r1, [pc, #16]	; (8000e18 <StartAdcTask+0x50>)
 8000e08:	f003 fcca 	bl	80047a0 <xQueueGenericSend>

    osDelay(10);
 8000e0c:	200a      	movs	r0, #10
 8000e0e:	f003 f9e8 	bl	80041e2 <osDelay>
  {
 8000e12:	e7dd      	b.n	8000dd0 <StartAdcTask+0x8>
 8000e14:	20003fd8 	.word	0x20003fd8
 8000e18:	20004098 	.word	0x20004098
 8000e1c:	20003fec 	.word	0x20003fec
 8000e20:	20003fe0 	.word	0x20003fe0
 8000e24:	20003fd4 	.word	0x20003fd4

08000e28 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a04      	ldr	r2, [pc, #16]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d101      	bne.n	8000e3e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e3a:	f000 f9f5 	bl	8001228 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40010000 	.word	0x40010000

08000e4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
	...

08000e5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	607b      	str	r3, [r7, #4]
 8000e66:	4b12      	ldr	r3, [pc, #72]	; (8000eb0 <HAL_MspInit+0x54>)
 8000e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6a:	4a11      	ldr	r2, [pc, #68]	; (8000eb0 <HAL_MspInit+0x54>)
 8000e6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e70:	6453      	str	r3, [r2, #68]	; 0x44
 8000e72:	4b0f      	ldr	r3, [pc, #60]	; (8000eb0 <HAL_MspInit+0x54>)
 8000e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e7a:	607b      	str	r3, [r7, #4]
 8000e7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	603b      	str	r3, [r7, #0]
 8000e82:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <HAL_MspInit+0x54>)
 8000e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e86:	4a0a      	ldr	r2, [pc, #40]	; (8000eb0 <HAL_MspInit+0x54>)
 8000e88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e8e:	4b08      	ldr	r3, [pc, #32]	; (8000eb0 <HAL_MspInit+0x54>)
 8000e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e96:	603b      	str	r3, [r7, #0]
 8000e98:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	210f      	movs	r1, #15
 8000e9e:	f06f 0001 	mvn.w	r0, #1
 8000ea2:	f000 fe65 	bl	8001b70 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40023800 	.word	0x40023800

08000eb4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b08a      	sub	sp, #40	; 0x28
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebc:	f107 0314 	add.w	r3, r7, #20
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a2f      	ldr	r2, [pc, #188]	; (8000f90 <HAL_ADC_MspInit+0xdc>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d157      	bne.n	8000f86 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	613b      	str	r3, [r7, #16]
 8000eda:	4b2e      	ldr	r3, [pc, #184]	; (8000f94 <HAL_ADC_MspInit+0xe0>)
 8000edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ede:	4a2d      	ldr	r2, [pc, #180]	; (8000f94 <HAL_ADC_MspInit+0xe0>)
 8000ee0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ee4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ee6:	4b2b      	ldr	r3, [pc, #172]	; (8000f94 <HAL_ADC_MspInit+0xe0>)
 8000ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eee:	613b      	str	r3, [r7, #16]
 8000ef0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60fb      	str	r3, [r7, #12]
 8000ef6:	4b27      	ldr	r3, [pc, #156]	; (8000f94 <HAL_ADC_MspInit+0xe0>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	4a26      	ldr	r2, [pc, #152]	; (8000f94 <HAL_ADC_MspInit+0xe0>)
 8000efc:	f043 0301 	orr.w	r3, r3, #1
 8000f00:	6313      	str	r3, [r2, #48]	; 0x30
 8000f02:	4b24      	ldr	r3, [pc, #144]	; (8000f94 <HAL_ADC_MspInit+0xe0>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f12:	2303      	movs	r3, #3
 8000f14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1a:	f107 0314 	add.w	r3, r7, #20
 8000f1e:	4619      	mov	r1, r3
 8000f20:	481d      	ldr	r0, [pc, #116]	; (8000f98 <HAL_ADC_MspInit+0xe4>)
 8000f22:	f001 f9df 	bl	80022e4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000f26:	4b1d      	ldr	r3, [pc, #116]	; (8000f9c <HAL_ADC_MspInit+0xe8>)
 8000f28:	4a1d      	ldr	r2, [pc, #116]	; (8000fa0 <HAL_ADC_MspInit+0xec>)
 8000f2a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000f2c:	4b1b      	ldr	r3, [pc, #108]	; (8000f9c <HAL_ADC_MspInit+0xe8>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f32:	4b1a      	ldr	r3, [pc, #104]	; (8000f9c <HAL_ADC_MspInit+0xe8>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f38:	4b18      	ldr	r3, [pc, #96]	; (8000f9c <HAL_ADC_MspInit+0xe8>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f3e:	4b17      	ldr	r3, [pc, #92]	; (8000f9c <HAL_ADC_MspInit+0xe8>)
 8000f40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f44:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f46:	4b15      	ldr	r3, [pc, #84]	; (8000f9c <HAL_ADC_MspInit+0xe8>)
 8000f48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f4c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f4e:	4b13      	ldr	r3, [pc, #76]	; (8000f9c <HAL_ADC_MspInit+0xe8>)
 8000f50:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f54:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f56:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <HAL_ADC_MspInit+0xe8>)
 8000f58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f5c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f5e:	4b0f      	ldr	r3, [pc, #60]	; (8000f9c <HAL_ADC_MspInit+0xe8>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f64:	4b0d      	ldr	r3, [pc, #52]	; (8000f9c <HAL_ADC_MspInit+0xe8>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f6a:	480c      	ldr	r0, [pc, #48]	; (8000f9c <HAL_ADC_MspInit+0xe8>)
 8000f6c:	f000 fe2a 	bl	8001bc4 <HAL_DMA_Init>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000f76:	f7ff ff69 	bl	8000e4c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a07      	ldr	r2, [pc, #28]	; (8000f9c <HAL_ADC_MspInit+0xe8>)
 8000f7e:	639a      	str	r2, [r3, #56]	; 0x38
 8000f80:	4a06      	ldr	r2, [pc, #24]	; (8000f9c <HAL_ADC_MspInit+0xe8>)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f86:	bf00      	nop
 8000f88:	3728      	adds	r7, #40	; 0x28
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40012000 	.word	0x40012000
 8000f94:	40023800 	.word	0x40023800
 8000f98:	40020000 	.word	0x40020000
 8000f9c:	20004038 	.word	0x20004038
 8000fa0:	40026410 	.word	0x40026410

08000fa4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b08a      	sub	sp, #40	; 0x28
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a1d      	ldr	r2, [pc, #116]	; (8001038 <HAL_UART_MspInit+0x94>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d133      	bne.n	800102e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	613b      	str	r3, [r7, #16]
 8000fca:	4b1c      	ldr	r3, [pc, #112]	; (800103c <HAL_UART_MspInit+0x98>)
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fce:	4a1b      	ldr	r2, [pc, #108]	; (800103c <HAL_UART_MspInit+0x98>)
 8000fd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd6:	4b19      	ldr	r3, [pc, #100]	; (800103c <HAL_UART_MspInit+0x98>)
 8000fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fde:	613b      	str	r3, [r7, #16]
 8000fe0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	4b15      	ldr	r3, [pc, #84]	; (800103c <HAL_UART_MspInit+0x98>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	4a14      	ldr	r2, [pc, #80]	; (800103c <HAL_UART_MspInit+0x98>)
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff2:	4b12      	ldr	r3, [pc, #72]	; (800103c <HAL_UART_MspInit+0x98>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ffe:	230c      	movs	r3, #12
 8001000:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001002:	2302      	movs	r3, #2
 8001004:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100a:	2300      	movs	r3, #0
 800100c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800100e:	2307      	movs	r3, #7
 8001010:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001012:	f107 0314 	add.w	r3, r7, #20
 8001016:	4619      	mov	r1, r3
 8001018:	4809      	ldr	r0, [pc, #36]	; (8001040 <HAL_UART_MspInit+0x9c>)
 800101a:	f001 f963 	bl	80022e4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800101e:	2200      	movs	r2, #0
 8001020:	2105      	movs	r1, #5
 8001022:	2026      	movs	r0, #38	; 0x26
 8001024:	f000 fda4 	bl	8001b70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001028:	2026      	movs	r0, #38	; 0x26
 800102a:	f000 fdbd 	bl	8001ba8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800102e:	bf00      	nop
 8001030:	3728      	adds	r7, #40	; 0x28
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40004400 	.word	0x40004400
 800103c:	40023800 	.word	0x40023800
 8001040:	40020000 	.word	0x40020000

08001044 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08c      	sub	sp, #48	; 0x30
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800104c:	2300      	movs	r3, #0
 800104e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8001054:	2200      	movs	r2, #0
 8001056:	6879      	ldr	r1, [r7, #4]
 8001058:	2019      	movs	r0, #25
 800105a:	f000 fd89 	bl	8001b70 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 800105e:	2019      	movs	r0, #25
 8001060:	f000 fda2 	bl	8001ba8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001064:	2300      	movs	r3, #0
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	4b1e      	ldr	r3, [pc, #120]	; (80010e4 <HAL_InitTick+0xa0>)
 800106a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106c:	4a1d      	ldr	r2, [pc, #116]	; (80010e4 <HAL_InitTick+0xa0>)
 800106e:	f043 0301 	orr.w	r3, r3, #1
 8001072:	6453      	str	r3, [r2, #68]	; 0x44
 8001074:	4b1b      	ldr	r3, [pc, #108]	; (80010e4 <HAL_InitTick+0xa0>)
 8001076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001078:	f003 0301 	and.w	r3, r3, #1
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001080:	f107 0210 	add.w	r2, r7, #16
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	4611      	mov	r1, r2
 800108a:	4618      	mov	r0, r3
 800108c:	f001 ff42 	bl	8002f14 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001090:	f001 ff2c 	bl	8002eec <HAL_RCC_GetPCLK2Freq>
 8001094:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001098:	4a13      	ldr	r2, [pc, #76]	; (80010e8 <HAL_InitTick+0xa4>)
 800109a:	fba2 2303 	umull	r2, r3, r2, r3
 800109e:	0c9b      	lsrs	r3, r3, #18
 80010a0:	3b01      	subs	r3, #1
 80010a2:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80010a4:	4b11      	ldr	r3, [pc, #68]	; (80010ec <HAL_InitTick+0xa8>)
 80010a6:	4a12      	ldr	r2, [pc, #72]	; (80010f0 <HAL_InitTick+0xac>)
 80010a8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80010aa:	4b10      	ldr	r3, [pc, #64]	; (80010ec <HAL_InitTick+0xa8>)
 80010ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010b0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80010b2:	4a0e      	ldr	r2, [pc, #56]	; (80010ec <HAL_InitTick+0xa8>)
 80010b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010b6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80010b8:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <HAL_InitTick+0xa8>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010be:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <HAL_InitTick+0xa8>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80010c4:	4809      	ldr	r0, [pc, #36]	; (80010ec <HAL_InitTick+0xa8>)
 80010c6:	f001 ff57 	bl	8002f78 <HAL_TIM_Base_Init>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d104      	bne.n	80010da <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80010d0:	4806      	ldr	r0, [pc, #24]	; (80010ec <HAL_InitTick+0xa8>)
 80010d2:	f001 ff86 	bl	8002fe2 <HAL_TIM_Base_Start_IT>
 80010d6:	4603      	mov	r3, r0
 80010d8:	e000      	b.n	80010dc <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3730      	adds	r7, #48	; 0x30
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	40023800 	.word	0x40023800
 80010e8:	431bde83 	.word	0x431bde83
 80010ec:	200040e0 	.word	0x200040e0
 80010f0:	40010000 	.word	0x40010000

080010f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr

08001102 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001106:	e7fe      	b.n	8001106 <HardFault_Handler+0x4>

08001108 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800110c:	e7fe      	b.n	800110c <MemManage_Handler+0x4>

0800110e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800110e:	b480      	push	{r7}
 8001110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001112:	e7fe      	b.n	8001112 <BusFault_Handler+0x4>

08001114 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001118:	e7fe      	b.n	8001118 <UsageFault_Handler+0x4>

0800111a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800112c:	4802      	ldr	r0, [pc, #8]	; (8001138 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800112e:	f001 ff7c 	bl	800302a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	200040e0 	.word	0x200040e0

0800113c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001140:	4802      	ldr	r0, [pc, #8]	; (800114c <USART2_IRQHandler+0x10>)
 8001142:	f002 fa1f 	bl	8003584 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	2000409c 	.word	0x2000409c

08001150 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001154:	4802      	ldr	r0, [pc, #8]	; (8001160 <DMA2_Stream0_IRQHandler+0x10>)
 8001156:	f000 fe5d 	bl	8001e14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20004038 	.word	0x20004038

08001164 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001168:	4b08      	ldr	r3, [pc, #32]	; (800118c <SystemInit+0x28>)
 800116a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800116e:	4a07      	ldr	r2, [pc, #28]	; (800118c <SystemInit+0x28>)
 8001170:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001174:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001178:	4b04      	ldr	r3, [pc, #16]	; (800118c <SystemInit+0x28>)
 800117a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800117e:	609a      	str	r2, [r3, #8]
#endif
}
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	e000ed00 	.word	0xe000ed00

08001190 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001190:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011c8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001194:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001196:	e003      	b.n	80011a0 <LoopCopyDataInit>

08001198 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001198:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800119a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800119c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800119e:	3104      	adds	r1, #4

080011a0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80011a0:	480b      	ldr	r0, [pc, #44]	; (80011d0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80011a2:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80011a4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80011a6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80011a8:	d3f6      	bcc.n	8001198 <CopyDataInit>
  ldr  r2, =_sbss
 80011aa:	4a0b      	ldr	r2, [pc, #44]	; (80011d8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80011ac:	e002      	b.n	80011b4 <LoopFillZerobss>

080011ae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80011ae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80011b0:	f842 3b04 	str.w	r3, [r2], #4

080011b4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80011b4:	4b09      	ldr	r3, [pc, #36]	; (80011dc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80011b6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80011b8:	d3f9      	bcc.n	80011ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80011ba:	f7ff ffd3 	bl	8001164 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011be:	f005 fc0d 	bl	80069dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011c2:	f7ff f9a7 	bl	8000514 <main>
  bx  lr    
 80011c6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80011c8:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80011cc:	08006b60 	.word	0x08006b60
  ldr  r0, =_sdata
 80011d0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80011d4:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 80011d8:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 80011dc:	20004124 	.word	0x20004124

080011e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011e0:	e7fe      	b.n	80011e0 <ADC_IRQHandler>
	...

080011e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011e8:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <HAL_Init+0x40>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a0d      	ldr	r2, [pc, #52]	; (8001224 <HAL_Init+0x40>)
 80011ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011f4:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <HAL_Init+0x40>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a0a      	ldr	r2, [pc, #40]	; (8001224 <HAL_Init+0x40>)
 80011fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001200:	4b08      	ldr	r3, [pc, #32]	; (8001224 <HAL_Init+0x40>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a07      	ldr	r2, [pc, #28]	; (8001224 <HAL_Init+0x40>)
 8001206:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800120a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800120c:	2003      	movs	r0, #3
 800120e:	f000 fca4 	bl	8001b5a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001212:	2000      	movs	r0, #0
 8001214:	f7ff ff16 	bl	8001044 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001218:	f7ff fe20 	bl	8000e5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800121c:	2300      	movs	r3, #0
}
 800121e:	4618      	mov	r0, r3
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40023c00 	.word	0x40023c00

08001228 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800122c:	4b06      	ldr	r3, [pc, #24]	; (8001248 <HAL_IncTick+0x20>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	461a      	mov	r2, r3
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <HAL_IncTick+0x24>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4413      	add	r3, r2
 8001238:	4a04      	ldr	r2, [pc, #16]	; (800124c <HAL_IncTick+0x24>)
 800123a:	6013      	str	r3, [r2, #0]
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	20000008 	.word	0x20000008
 800124c:	20004120 	.word	0x20004120

08001250 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  return uwTick;
 8001254:	4b03      	ldr	r3, [pc, #12]	; (8001264 <HAL_GetTick+0x14>)
 8001256:	681b      	ldr	r3, [r3, #0]
}
 8001258:	4618      	mov	r0, r3
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	20004120 	.word	0x20004120

08001268 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001270:	2300      	movs	r3, #0
 8001272:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d101      	bne.n	800127e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e033      	b.n	80012e6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001282:	2b00      	cmp	r3, #0
 8001284:	d109      	bne.n	800129a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f7ff fe14 	bl	8000eb4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2200      	movs	r2, #0
 8001290:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2200      	movs	r2, #0
 8001296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129e:	f003 0310 	and.w	r3, r3, #16
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d118      	bne.n	80012d8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012aa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80012ae:	f023 0302 	bic.w	r3, r3, #2
 80012b2:	f043 0202 	orr.w	r2, r3, #2
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f000 fa22 	bl	8001704 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2200      	movs	r2, #0
 80012c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ca:	f023 0303 	bic.w	r3, r3, #3
 80012ce:	f043 0201 	orr.w	r2, r3, #1
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	641a      	str	r2, [r3, #64]	; 0x40
 80012d6:	e001      	b.n	80012dc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2200      	movs	r2, #0
 80012e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80012e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
	...

080012f0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b086      	sub	sp, #24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80012fc:	2300      	movs	r3, #0
 80012fe:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001306:	2b01      	cmp	r3, #1
 8001308:	d101      	bne.n	800130e <HAL_ADC_Start_DMA+0x1e>
 800130a:	2302      	movs	r3, #2
 800130c:	e0b1      	b.n	8001472 <HAL_ADC_Start_DMA+0x182>
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	2201      	movs	r2, #1
 8001312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	f003 0301 	and.w	r3, r3, #1
 8001320:	2b01      	cmp	r3, #1
 8001322:	d018      	beq.n	8001356 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	689a      	ldr	r2, [r3, #8]
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f042 0201 	orr.w	r2, r2, #1
 8001332:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001334:	4b51      	ldr	r3, [pc, #324]	; (800147c <HAL_ADC_Start_DMA+0x18c>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a51      	ldr	r2, [pc, #324]	; (8001480 <HAL_ADC_Start_DMA+0x190>)
 800133a:	fba2 2303 	umull	r2, r3, r2, r3
 800133e:	0c9a      	lsrs	r2, r3, #18
 8001340:	4613      	mov	r3, r2
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	4413      	add	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001348:	e002      	b.n	8001350 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	3b01      	subs	r3, #1
 800134e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d1f9      	bne.n	800134a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	2b01      	cmp	r3, #1
 8001362:	f040 8085 	bne.w	8001470 <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800136e:	f023 0301 	bic.w	r3, r3, #1
 8001372:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001384:	2b00      	cmp	r3, #0
 8001386:	d007      	beq.n	8001398 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001390:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80013a4:	d106      	bne.n	80013b4 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013aa:	f023 0206 	bic.w	r2, r3, #6
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	645a      	str	r2, [r3, #68]	; 0x44
 80013b2:	e002      	b.n	80013ba <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	2200      	movs	r2, #0
 80013b8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	2200      	movs	r2, #0
 80013be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013c2:	4b30      	ldr	r3, [pc, #192]	; (8001484 <HAL_ADC_Start_DMA+0x194>)
 80013c4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013ca:	4a2f      	ldr	r2, [pc, #188]	; (8001488 <HAL_ADC_Start_DMA+0x198>)
 80013cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013d2:	4a2e      	ldr	r2, [pc, #184]	; (800148c <HAL_ADC_Start_DMA+0x19c>)
 80013d4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013da:	4a2d      	ldr	r2, [pc, #180]	; (8001490 <HAL_ADC_Start_DMA+0x1a0>)
 80013dc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80013e6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	685a      	ldr	r2, [r3, #4]
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80013f6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	689a      	ldr	r2, [r3, #8]
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001406:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	334c      	adds	r3, #76	; 0x4c
 8001412:	4619      	mov	r1, r3
 8001414:	68ba      	ldr	r2, [r7, #8]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f000 fc82 	bl	8001d20 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f003 031f 	and.w	r3, r3, #31
 8001424:	2b00      	cmp	r3, #0
 8001426:	d10f      	bne.n	8001448 <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d11c      	bne.n	8001470 <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	689a      	ldr	r2, [r3, #8]
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001444:	609a      	str	r2, [r3, #8]
 8001446:	e013      	b.n	8001470 <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a11      	ldr	r2, [pc, #68]	; (8001494 <HAL_ADC_Start_DMA+0x1a4>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d10e      	bne.n	8001470 <HAL_ADC_Start_DMA+0x180>
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d107      	bne.n	8001470 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	689a      	ldr	r2, [r3, #8]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800146e:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3718      	adds	r7, #24
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	20000000 	.word	0x20000000
 8001480:	431bde83 	.word	0x431bde83
 8001484:	40012300 	.word	0x40012300
 8001488:	080018fd 	.word	0x080018fd
 800148c:	080019b7 	.word	0x080019b7
 8001490:	080019d3 	.word	0x080019d3
 8001494:	40012000 	.word	0x40012000

08001498 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80014b4:	bf00      	nop
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80014ca:	2300      	movs	r3, #0
 80014cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d101      	bne.n	80014dc <HAL_ADC_ConfigChannel+0x1c>
 80014d8:	2302      	movs	r3, #2
 80014da:	e105      	b.n	80016e8 <HAL_ADC_ConfigChannel+0x228>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2201      	movs	r2, #1
 80014e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2b09      	cmp	r3, #9
 80014ea:	d925      	bls.n	8001538 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	68d9      	ldr	r1, [r3, #12]
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	461a      	mov	r2, r3
 80014fa:	4613      	mov	r3, r2
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	4413      	add	r3, r2
 8001500:	3b1e      	subs	r3, #30
 8001502:	2207      	movs	r2, #7
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	43da      	mvns	r2, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	400a      	ands	r2, r1
 8001510:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	68d9      	ldr	r1, [r3, #12]
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	689a      	ldr	r2, [r3, #8]
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	b29b      	uxth	r3, r3
 8001522:	4618      	mov	r0, r3
 8001524:	4603      	mov	r3, r0
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	4403      	add	r3, r0
 800152a:	3b1e      	subs	r3, #30
 800152c:	409a      	lsls	r2, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	430a      	orrs	r2, r1
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	e022      	b.n	800157e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	6919      	ldr	r1, [r3, #16]
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	b29b      	uxth	r3, r3
 8001544:	461a      	mov	r2, r3
 8001546:	4613      	mov	r3, r2
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	4413      	add	r3, r2
 800154c:	2207      	movs	r2, #7
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	43da      	mvns	r2, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	400a      	ands	r2, r1
 800155a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	6919      	ldr	r1, [r3, #16]
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	689a      	ldr	r2, [r3, #8]
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	b29b      	uxth	r3, r3
 800156c:	4618      	mov	r0, r3
 800156e:	4603      	mov	r3, r0
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	4403      	add	r3, r0
 8001574:	409a      	lsls	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	430a      	orrs	r2, r1
 800157c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	2b06      	cmp	r3, #6
 8001584:	d824      	bhi.n	80015d0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685a      	ldr	r2, [r3, #4]
 8001590:	4613      	mov	r3, r2
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	4413      	add	r3, r2
 8001596:	3b05      	subs	r3, #5
 8001598:	221f      	movs	r2, #31
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	43da      	mvns	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	400a      	ands	r2, r1
 80015a6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	4618      	mov	r0, r3
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685a      	ldr	r2, [r3, #4]
 80015ba:	4613      	mov	r3, r2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	4413      	add	r3, r2
 80015c0:	3b05      	subs	r3, #5
 80015c2:	fa00 f203 	lsl.w	r2, r0, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	430a      	orrs	r2, r1
 80015cc:	635a      	str	r2, [r3, #52]	; 0x34
 80015ce:	e04c      	b.n	800166a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	2b0c      	cmp	r3, #12
 80015d6:	d824      	bhi.n	8001622 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685a      	ldr	r2, [r3, #4]
 80015e2:	4613      	mov	r3, r2
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	4413      	add	r3, r2
 80015e8:	3b23      	subs	r3, #35	; 0x23
 80015ea:	221f      	movs	r2, #31
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	43da      	mvns	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	400a      	ands	r2, r1
 80015f8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	b29b      	uxth	r3, r3
 8001606:	4618      	mov	r0, r3
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685a      	ldr	r2, [r3, #4]
 800160c:	4613      	mov	r3, r2
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	4413      	add	r3, r2
 8001612:	3b23      	subs	r3, #35	; 0x23
 8001614:	fa00 f203 	lsl.w	r2, r0, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	430a      	orrs	r2, r1
 800161e:	631a      	str	r2, [r3, #48]	; 0x30
 8001620:	e023      	b.n	800166a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685a      	ldr	r2, [r3, #4]
 800162c:	4613      	mov	r3, r2
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	4413      	add	r3, r2
 8001632:	3b41      	subs	r3, #65	; 0x41
 8001634:	221f      	movs	r2, #31
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	43da      	mvns	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	400a      	ands	r2, r1
 8001642:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	b29b      	uxth	r3, r3
 8001650:	4618      	mov	r0, r3
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685a      	ldr	r2, [r3, #4]
 8001656:	4613      	mov	r3, r2
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	4413      	add	r3, r2
 800165c:	3b41      	subs	r3, #65	; 0x41
 800165e:	fa00 f203 	lsl.w	r2, r0, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	430a      	orrs	r2, r1
 8001668:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800166a:	4b22      	ldr	r3, [pc, #136]	; (80016f4 <HAL_ADC_ConfigChannel+0x234>)
 800166c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a21      	ldr	r2, [pc, #132]	; (80016f8 <HAL_ADC_ConfigChannel+0x238>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d109      	bne.n	800168c <HAL_ADC_ConfigChannel+0x1cc>
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2b12      	cmp	r3, #18
 800167e:	d105      	bne.n	800168c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a19      	ldr	r2, [pc, #100]	; (80016f8 <HAL_ADC_ConfigChannel+0x238>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d123      	bne.n	80016de <HAL_ADC_ConfigChannel+0x21e>
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2b10      	cmp	r3, #16
 800169c:	d003      	beq.n	80016a6 <HAL_ADC_ConfigChannel+0x1e6>
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2b11      	cmp	r3, #17
 80016a4:	d11b      	bne.n	80016de <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2b10      	cmp	r3, #16
 80016b8:	d111      	bne.n	80016de <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016ba:	4b10      	ldr	r3, [pc, #64]	; (80016fc <HAL_ADC_ConfigChannel+0x23c>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a10      	ldr	r2, [pc, #64]	; (8001700 <HAL_ADC_ConfigChannel+0x240>)
 80016c0:	fba2 2303 	umull	r2, r3, r2, r3
 80016c4:	0c9a      	lsrs	r2, r3, #18
 80016c6:	4613      	mov	r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	4413      	add	r3, r2
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80016d0:	e002      	b.n	80016d8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	3b01      	subs	r3, #1
 80016d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1f9      	bne.n	80016d2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80016e6:	2300      	movs	r3, #0
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3714      	adds	r7, #20
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	40012300 	.word	0x40012300
 80016f8:	40012000 	.word	0x40012000
 80016fc:	20000000 	.word	0x20000000
 8001700:	431bde83 	.word	0x431bde83

08001704 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800170c:	4b79      	ldr	r3, [pc, #484]	; (80018f4 <ADC_Init+0x1f0>)
 800170e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	685a      	ldr	r2, [r3, #4]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	431a      	orrs	r2, r3
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	685a      	ldr	r2, [r3, #4]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001738:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	6859      	ldr	r1, [r3, #4]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	691b      	ldr	r3, [r3, #16]
 8001744:	021a      	lsls	r2, r3, #8
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	430a      	orrs	r2, r1
 800174c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	685a      	ldr	r2, [r3, #4]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800175c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	6859      	ldr	r1, [r3, #4]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689a      	ldr	r2, [r3, #8]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	430a      	orrs	r2, r1
 800176e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	689a      	ldr	r2, [r3, #8]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800177e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	6899      	ldr	r1, [r3, #8]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	68da      	ldr	r2, [r3, #12]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	430a      	orrs	r2, r1
 8001790:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001796:	4a58      	ldr	r2, [pc, #352]	; (80018f8 <ADC_Init+0x1f4>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d022      	beq.n	80017e2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	689a      	ldr	r2, [r3, #8]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017aa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6899      	ldr	r1, [r3, #8]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	430a      	orrs	r2, r1
 80017bc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	689a      	ldr	r2, [r3, #8]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	6899      	ldr	r1, [r3, #8]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	430a      	orrs	r2, r1
 80017de:	609a      	str	r2, [r3, #8]
 80017e0:	e00f      	b.n	8001802 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	689a      	ldr	r2, [r3, #8]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	689a      	ldr	r2, [r3, #8]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001800:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	689a      	ldr	r2, [r3, #8]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f022 0202 	bic.w	r2, r2, #2
 8001810:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	6899      	ldr	r1, [r3, #8]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	7e1b      	ldrb	r3, [r3, #24]
 800181c:	005a      	lsls	r2, r3, #1
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	430a      	orrs	r2, r1
 8001824:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f893 3020 	ldrb.w	r3, [r3, #32]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d01b      	beq.n	8001868 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	685a      	ldr	r2, [r3, #4]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800183e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	685a      	ldr	r2, [r3, #4]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800184e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	6859      	ldr	r1, [r3, #4]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185a:	3b01      	subs	r3, #1
 800185c:	035a      	lsls	r2, r3, #13
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	430a      	orrs	r2, r1
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	e007      	b.n	8001878 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	685a      	ldr	r2, [r3, #4]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001876:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001886:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	69db      	ldr	r3, [r3, #28]
 8001892:	3b01      	subs	r3, #1
 8001894:	051a      	lsls	r2, r3, #20
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	430a      	orrs	r2, r1
 800189c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	689a      	ldr	r2, [r3, #8]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80018ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	6899      	ldr	r1, [r3, #8]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018ba:	025a      	lsls	r2, r3, #9
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	430a      	orrs	r2, r1
 80018c2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	689a      	ldr	r2, [r3, #8]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	6899      	ldr	r1, [r3, #8]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	695b      	ldr	r3, [r3, #20]
 80018de:	029a      	lsls	r2, r3, #10
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	430a      	orrs	r2, r1
 80018e6:	609a      	str	r2, [r3, #8]
}
 80018e8:	bf00      	nop
 80018ea:	3714      	adds	r7, #20
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	40012300 	.word	0x40012300
 80018f8:	0f000001 	.word	0x0f000001

080018fc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001908:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001912:	2b00      	cmp	r3, #0
 8001914:	d13c      	bne.n	8001990 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d12b      	bne.n	8001988 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001934:	2b00      	cmp	r3, #0
 8001936:	d127      	bne.n	8001988 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800193e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001942:	2b00      	cmp	r3, #0
 8001944:	d006      	beq.n	8001954 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001950:	2b00      	cmp	r3, #0
 8001952:	d119      	bne.n	8001988 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	685a      	ldr	r2, [r3, #4]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f022 0220 	bic.w	r2, r2, #32
 8001962:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001968:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001974:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d105      	bne.n	8001988 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001980:	f043 0201 	orr.w	r2, r3, #1
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001988:	68f8      	ldr	r0, [r7, #12]
 800198a:	f7ff f827 	bl	80009dc <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800198e:	e00e      	b.n	80019ae <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001994:	f003 0310 	and.w	r3, r3, #16
 8001998:	2b00      	cmp	r3, #0
 800199a:	d003      	beq.n	80019a4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800199c:	68f8      	ldr	r0, [r7, #12]
 800199e:	f7ff fd85 	bl	80014ac <HAL_ADC_ErrorCallback>
}
 80019a2:	e004      	b.n	80019ae <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	4798      	blx	r3
}
 80019ae:	bf00      	nop
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b084      	sub	sp, #16
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019c2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80019c4:	68f8      	ldr	r0, [r7, #12]
 80019c6:	f7ff fd67 	bl	8001498 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80019ca:	bf00      	nop
 80019cc:	3710      	adds	r7, #16
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b084      	sub	sp, #16
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019de:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2240      	movs	r2, #64	; 0x40
 80019e4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ea:	f043 0204 	orr.w	r2, r3, #4
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80019f2:	68f8      	ldr	r0, [r7, #12]
 80019f4:	f7ff fd5a 	bl	80014ac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80019f8:	bf00      	nop
 80019fa:	3710      	adds	r7, #16
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f003 0307 	and.w	r3, r3, #7
 8001a0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a10:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <__NVIC_SetPriorityGrouping+0x44>)
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a16:	68ba      	ldr	r2, [r7, #8]
 8001a18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a32:	4a04      	ldr	r2, [pc, #16]	; (8001a44 <__NVIC_SetPriorityGrouping+0x44>)
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	60d3      	str	r3, [r2, #12]
}
 8001a38:	bf00      	nop
 8001a3a:	3714      	adds	r7, #20
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	e000ed00 	.word	0xe000ed00

08001a48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a4c:	4b04      	ldr	r3, [pc, #16]	; (8001a60 <__NVIC_GetPriorityGrouping+0x18>)
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	0a1b      	lsrs	r3, r3, #8
 8001a52:	f003 0307 	and.w	r3, r3, #7
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	e000ed00 	.word	0xe000ed00

08001a64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	db0b      	blt.n	8001a8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a76:	79fb      	ldrb	r3, [r7, #7]
 8001a78:	f003 021f 	and.w	r2, r3, #31
 8001a7c:	4907      	ldr	r1, [pc, #28]	; (8001a9c <__NVIC_EnableIRQ+0x38>)
 8001a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a82:	095b      	lsrs	r3, r3, #5
 8001a84:	2001      	movs	r0, #1
 8001a86:	fa00 f202 	lsl.w	r2, r0, r2
 8001a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a8e:	bf00      	nop
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	e000e100 	.word	0xe000e100

08001aa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	6039      	str	r1, [r7, #0]
 8001aaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	db0a      	blt.n	8001aca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	b2da      	uxtb	r2, r3
 8001ab8:	490c      	ldr	r1, [pc, #48]	; (8001aec <__NVIC_SetPriority+0x4c>)
 8001aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001abe:	0112      	lsls	r2, r2, #4
 8001ac0:	b2d2      	uxtb	r2, r2
 8001ac2:	440b      	add	r3, r1
 8001ac4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ac8:	e00a      	b.n	8001ae0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	b2da      	uxtb	r2, r3
 8001ace:	4908      	ldr	r1, [pc, #32]	; (8001af0 <__NVIC_SetPriority+0x50>)
 8001ad0:	79fb      	ldrb	r3, [r7, #7]
 8001ad2:	f003 030f 	and.w	r3, r3, #15
 8001ad6:	3b04      	subs	r3, #4
 8001ad8:	0112      	lsls	r2, r2, #4
 8001ada:	b2d2      	uxtb	r2, r2
 8001adc:	440b      	add	r3, r1
 8001ade:	761a      	strb	r2, [r3, #24]
}
 8001ae0:	bf00      	nop
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr
 8001aec:	e000e100 	.word	0xe000e100
 8001af0:	e000ed00 	.word	0xe000ed00

08001af4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b089      	sub	sp, #36	; 0x24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	60b9      	str	r1, [r7, #8]
 8001afe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f003 0307 	and.w	r3, r3, #7
 8001b06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	f1c3 0307 	rsb	r3, r3, #7
 8001b0e:	2b04      	cmp	r3, #4
 8001b10:	bf28      	it	cs
 8001b12:	2304      	movcs	r3, #4
 8001b14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	3304      	adds	r3, #4
 8001b1a:	2b06      	cmp	r3, #6
 8001b1c:	d902      	bls.n	8001b24 <NVIC_EncodePriority+0x30>
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	3b03      	subs	r3, #3
 8001b22:	e000      	b.n	8001b26 <NVIC_EncodePriority+0x32>
 8001b24:	2300      	movs	r3, #0
 8001b26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b28:	f04f 32ff 	mov.w	r2, #4294967295
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b32:	43da      	mvns	r2, r3
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	401a      	ands	r2, r3
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	fa01 f303 	lsl.w	r3, r1, r3
 8001b46:	43d9      	mvns	r1, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b4c:	4313      	orrs	r3, r2
         );
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3724      	adds	r7, #36	; 0x24
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b082      	sub	sp, #8
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7ff ff4c 	bl	8001a00 <__NVIC_SetPriorityGrouping>
}
 8001b68:	bf00      	nop
 8001b6a:	3708      	adds	r7, #8
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4603      	mov	r3, r0
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
 8001b7c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b82:	f7ff ff61 	bl	8001a48 <__NVIC_GetPriorityGrouping>
 8001b86:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	68b9      	ldr	r1, [r7, #8]
 8001b8c:	6978      	ldr	r0, [r7, #20]
 8001b8e:	f7ff ffb1 	bl	8001af4 <NVIC_EncodePriority>
 8001b92:	4602      	mov	r2, r0
 8001b94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b98:	4611      	mov	r1, r2
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7ff ff80 	bl	8001aa0 <__NVIC_SetPriority>
}
 8001ba0:	bf00      	nop
 8001ba2:	3718      	adds	r7, #24
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	4603      	mov	r3, r0
 8001bb0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff ff54 	bl	8001a64 <__NVIC_EnableIRQ>
}
 8001bbc:	bf00      	nop
 8001bbe:	3708      	adds	r7, #8
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001bd0:	f7ff fb3e 	bl	8001250 <HAL_GetTick>
 8001bd4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d101      	bne.n	8001be0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e099      	b.n	8001d14 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2202      	movs	r2, #2
 8001bec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f022 0201 	bic.w	r2, r2, #1
 8001bfe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c00:	e00f      	b.n	8001c22 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c02:	f7ff fb25 	bl	8001250 <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	2b05      	cmp	r3, #5
 8001c0e:	d908      	bls.n	8001c22 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2220      	movs	r2, #32
 8001c14:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2203      	movs	r2, #3
 8001c1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e078      	b.n	8001d14 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0301 	and.w	r3, r3, #1
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d1e8      	bne.n	8001c02 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c38:	697a      	ldr	r2, [r7, #20]
 8001c3a:	4b38      	ldr	r3, [pc, #224]	; (8001d1c <HAL_DMA_Init+0x158>)
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685a      	ldr	r2, [r3, #4]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	691b      	ldr	r3, [r3, #16]
 8001c54:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a1b      	ldr	r3, [r3, #32]
 8001c6c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c6e:	697a      	ldr	r2, [r7, #20]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c78:	2b04      	cmp	r3, #4
 8001c7a:	d107      	bne.n	8001c8c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c84:	4313      	orrs	r3, r2
 8001c86:	697a      	ldr	r2, [r7, #20]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	697a      	ldr	r2, [r7, #20]
 8001c92:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	f023 0307 	bic.w	r3, r3, #7
 8001ca2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca8:	697a      	ldr	r2, [r7, #20]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb2:	2b04      	cmp	r3, #4
 8001cb4:	d117      	bne.n	8001ce6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cba:	697a      	ldr	r2, [r7, #20]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d00e      	beq.n	8001ce6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f000 fa91 	bl	80021f0 <DMA_CheckFifoParam>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d008      	beq.n	8001ce6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2240      	movs	r2, #64	; 0x40
 8001cd8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e016      	b.n	8001d14 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	697a      	ldr	r2, [r7, #20]
 8001cec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f000 fa48 	bl	8002184 <DMA_CalcBaseAndBitshift>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cfc:	223f      	movs	r2, #63	; 0x3f
 8001cfe:	409a      	lsls	r2, r3
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d12:	2300      	movs	r3, #0
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3718      	adds	r7, #24
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	f010803f 	.word	0xf010803f

08001d20 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
 8001d2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d36:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d101      	bne.n	8001d46 <HAL_DMA_Start_IT+0x26>
 8001d42:	2302      	movs	r3, #2
 8001d44:	e040      	b.n	8001dc8 <HAL_DMA_Start_IT+0xa8>
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2201      	movs	r2, #1
 8001d4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d12f      	bne.n	8001dba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2202      	movs	r2, #2
 8001d5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2200      	movs	r2, #0
 8001d66:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	68b9      	ldr	r1, [r7, #8]
 8001d6e:	68f8      	ldr	r0, [r7, #12]
 8001d70:	f000 f9da 	bl	8002128 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d78:	223f      	movs	r2, #63	; 0x3f
 8001d7a:	409a      	lsls	r2, r3
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f042 0216 	orr.w	r2, r2, #22
 8001d8e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d007      	beq.n	8001da8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f042 0208 	orr.w	r2, r2, #8
 8001da6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f042 0201 	orr.w	r2, r2, #1
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	e005      	b.n	8001dc6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001dc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3718      	adds	r7, #24
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d004      	beq.n	8001dee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2280      	movs	r2, #128	; 0x80
 8001de8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e00c      	b.n	8001e08 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2205      	movs	r2, #5
 8001df2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f022 0201 	bic.w	r2, r2, #1
 8001e04:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e06:	2300      	movs	r3, #0
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001e20:	4b92      	ldr	r3, [pc, #584]	; (800206c <HAL_DMA_IRQHandler+0x258>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a92      	ldr	r2, [pc, #584]	; (8002070 <HAL_DMA_IRQHandler+0x25c>)
 8001e26:	fba2 2303 	umull	r2, r3, r2, r3
 8001e2a:	0a9b      	lsrs	r3, r3, #10
 8001e2c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e32:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e3e:	2208      	movs	r2, #8
 8001e40:	409a      	lsls	r2, r3
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	4013      	ands	r3, r2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d01a      	beq.n	8001e80 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0304 	and.w	r3, r3, #4
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d013      	beq.n	8001e80 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f022 0204 	bic.w	r2, r2, #4
 8001e66:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e6c:	2208      	movs	r2, #8
 8001e6e:	409a      	lsls	r2, r3
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e78:	f043 0201 	orr.w	r2, r3, #1
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e84:	2201      	movs	r2, #1
 8001e86:	409a      	lsls	r2, r3
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d012      	beq.n	8001eb6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	695b      	ldr	r3, [r3, #20]
 8001e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d00b      	beq.n	8001eb6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	409a      	lsls	r2, r3
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eae:	f043 0202 	orr.w	r2, r3, #2
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eba:	2204      	movs	r2, #4
 8001ebc:	409a      	lsls	r2, r3
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d012      	beq.n	8001eec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d00b      	beq.n	8001eec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ed8:	2204      	movs	r2, #4
 8001eda:	409a      	lsls	r2, r3
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ee4:	f043 0204 	orr.w	r2, r3, #4
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef0:	2210      	movs	r2, #16
 8001ef2:	409a      	lsls	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d043      	beq.n	8001f84 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0308 	and.w	r3, r3, #8
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d03c      	beq.n	8001f84 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f0e:	2210      	movs	r2, #16
 8001f10:	409a      	lsls	r2, r3
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d018      	beq.n	8001f56 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d108      	bne.n	8001f44 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d024      	beq.n	8001f84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	4798      	blx	r3
 8001f42:	e01f      	b.n	8001f84 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d01b      	beq.n	8001f84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	4798      	blx	r3
 8001f54:	e016      	b.n	8001f84 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d107      	bne.n	8001f74 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f022 0208 	bic.w	r2, r2, #8
 8001f72:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d003      	beq.n	8001f84 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f88:	2220      	movs	r2, #32
 8001f8a:	409a      	lsls	r2, r3
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	f000 808e 	beq.w	80020b2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0310 	and.w	r3, r3, #16
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	f000 8086 	beq.w	80020b2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001faa:	2220      	movs	r2, #32
 8001fac:	409a      	lsls	r2, r3
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b05      	cmp	r3, #5
 8001fbc:	d136      	bne.n	800202c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f022 0216 	bic.w	r2, r2, #22
 8001fcc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	695a      	ldr	r2, [r3, #20]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fdc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d103      	bne.n	8001fee <HAL_DMA_IRQHandler+0x1da>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d007      	beq.n	8001ffe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f022 0208 	bic.w	r2, r2, #8
 8001ffc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002002:	223f      	movs	r2, #63	; 0x3f
 8002004:	409a      	lsls	r2, r3
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2201      	movs	r2, #1
 8002016:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800201e:	2b00      	cmp	r3, #0
 8002020:	d07d      	beq.n	800211e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	4798      	blx	r3
        }
        return;
 800202a:	e078      	b.n	800211e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d01c      	beq.n	8002074 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d108      	bne.n	800205a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204c:	2b00      	cmp	r3, #0
 800204e:	d030      	beq.n	80020b2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	4798      	blx	r3
 8002058:	e02b      	b.n	80020b2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800205e:	2b00      	cmp	r3, #0
 8002060:	d027      	beq.n	80020b2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	4798      	blx	r3
 800206a:	e022      	b.n	80020b2 <HAL_DMA_IRQHandler+0x29e>
 800206c:	20000000 	.word	0x20000000
 8002070:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800207e:	2b00      	cmp	r3, #0
 8002080:	d10f      	bne.n	80020a2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f022 0210 	bic.w	r2, r2, #16
 8002090:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2201      	movs	r2, #1
 800209e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d003      	beq.n	80020b2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d032      	beq.n	8002120 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d022      	beq.n	800210c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2205      	movs	r2, #5
 80020ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f022 0201 	bic.w	r2, r2, #1
 80020dc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	3301      	adds	r3, #1
 80020e2:	60bb      	str	r3, [r7, #8]
 80020e4:	697a      	ldr	r2, [r7, #20]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d307      	bcc.n	80020fa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0301 	and.w	r3, r3, #1
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d1f2      	bne.n	80020de <HAL_DMA_IRQHandler+0x2ca>
 80020f8:	e000      	b.n	80020fc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80020fa:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002110:	2b00      	cmp	r3, #0
 8002112:	d005      	beq.n	8002120 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	4798      	blx	r3
 800211c:	e000      	b.n	8002120 <HAL_DMA_IRQHandler+0x30c>
        return;
 800211e:	bf00      	nop
    }
  }
}
 8002120:	3718      	adds	r7, #24
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop

08002128 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]
 8002134:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002144:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	2b40      	cmp	r3, #64	; 0x40
 8002154:	d108      	bne.n	8002168 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68ba      	ldr	r2, [r7, #8]
 8002164:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002166:	e007      	b.n	8002178 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	68ba      	ldr	r2, [r7, #8]
 800216e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	60da      	str	r2, [r3, #12]
}
 8002178:	bf00      	nop
 800217a:	3714      	adds	r7, #20
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	b2db      	uxtb	r3, r3
 8002192:	3b10      	subs	r3, #16
 8002194:	4a14      	ldr	r2, [pc, #80]	; (80021e8 <DMA_CalcBaseAndBitshift+0x64>)
 8002196:	fba2 2303 	umull	r2, r3, r2, r3
 800219a:	091b      	lsrs	r3, r3, #4
 800219c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800219e:	4a13      	ldr	r2, [pc, #76]	; (80021ec <DMA_CalcBaseAndBitshift+0x68>)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	4413      	add	r3, r2
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	461a      	mov	r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2b03      	cmp	r3, #3
 80021b0:	d909      	bls.n	80021c6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80021ba:	f023 0303 	bic.w	r3, r3, #3
 80021be:	1d1a      	adds	r2, r3, #4
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	659a      	str	r2, [r3, #88]	; 0x58
 80021c4:	e007      	b.n	80021d6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80021ce:	f023 0303 	bic.w	r3, r3, #3
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3714      	adds	r7, #20
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	aaaaaaab 	.word	0xaaaaaaab
 80021ec:	08006b48 	.word	0x08006b48

080021f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021f8:	2300      	movs	r3, #0
 80021fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002200:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d11f      	bne.n	800224a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	2b03      	cmp	r3, #3
 800220e:	d855      	bhi.n	80022bc <DMA_CheckFifoParam+0xcc>
 8002210:	a201      	add	r2, pc, #4	; (adr r2, 8002218 <DMA_CheckFifoParam+0x28>)
 8002212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002216:	bf00      	nop
 8002218:	08002229 	.word	0x08002229
 800221c:	0800223b 	.word	0x0800223b
 8002220:	08002229 	.word	0x08002229
 8002224:	080022bd 	.word	0x080022bd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800222c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d045      	beq.n	80022c0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002238:	e042      	b.n	80022c0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800223e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002242:	d13f      	bne.n	80022c4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002248:	e03c      	b.n	80022c4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002252:	d121      	bne.n	8002298 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	2b03      	cmp	r3, #3
 8002258:	d836      	bhi.n	80022c8 <DMA_CheckFifoParam+0xd8>
 800225a:	a201      	add	r2, pc, #4	; (adr r2, 8002260 <DMA_CheckFifoParam+0x70>)
 800225c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002260:	08002271 	.word	0x08002271
 8002264:	08002277 	.word	0x08002277
 8002268:	08002271 	.word	0x08002271
 800226c:	08002289 	.word	0x08002289
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	73fb      	strb	r3, [r7, #15]
      break;
 8002274:	e02f      	b.n	80022d6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800227a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d024      	beq.n	80022cc <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002286:	e021      	b.n	80022cc <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002290:	d11e      	bne.n	80022d0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002296:	e01b      	b.n	80022d0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	2b02      	cmp	r3, #2
 800229c:	d902      	bls.n	80022a4 <DMA_CheckFifoParam+0xb4>
 800229e:	2b03      	cmp	r3, #3
 80022a0:	d003      	beq.n	80022aa <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80022a2:	e018      	b.n	80022d6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	73fb      	strb	r3, [r7, #15]
      break;
 80022a8:	e015      	b.n	80022d6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00e      	beq.n	80022d4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	73fb      	strb	r3, [r7, #15]
      break;
 80022ba:	e00b      	b.n	80022d4 <DMA_CheckFifoParam+0xe4>
      break;
 80022bc:	bf00      	nop
 80022be:	e00a      	b.n	80022d6 <DMA_CheckFifoParam+0xe6>
      break;
 80022c0:	bf00      	nop
 80022c2:	e008      	b.n	80022d6 <DMA_CheckFifoParam+0xe6>
      break;
 80022c4:	bf00      	nop
 80022c6:	e006      	b.n	80022d6 <DMA_CheckFifoParam+0xe6>
      break;
 80022c8:	bf00      	nop
 80022ca:	e004      	b.n	80022d6 <DMA_CheckFifoParam+0xe6>
      break;
 80022cc:	bf00      	nop
 80022ce:	e002      	b.n	80022d6 <DMA_CheckFifoParam+0xe6>
      break;   
 80022d0:	bf00      	nop
 80022d2:	e000      	b.n	80022d6 <DMA_CheckFifoParam+0xe6>
      break;
 80022d4:	bf00      	nop
    }
  } 
  
  return status; 
 80022d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3714      	adds	r7, #20
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b089      	sub	sp, #36	; 0x24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022ee:	2300      	movs	r3, #0
 80022f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022f2:	2300      	movs	r3, #0
 80022f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022f6:	2300      	movs	r3, #0
 80022f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022fa:	2300      	movs	r3, #0
 80022fc:	61fb      	str	r3, [r7, #28]
 80022fe:	e159      	b.n	80025b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002300:	2201      	movs	r2, #1
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	697a      	ldr	r2, [r7, #20]
 8002310:	4013      	ands	r3, r2
 8002312:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002314:	693a      	ldr	r2, [r7, #16]
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	429a      	cmp	r2, r3
 800231a:	f040 8148 	bne.w	80025ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d00b      	beq.n	800233e <HAL_GPIO_Init+0x5a>
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	2b02      	cmp	r3, #2
 800232c:	d007      	beq.n	800233e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002332:	2b11      	cmp	r3, #17
 8002334:	d003      	beq.n	800233e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	2b12      	cmp	r3, #18
 800233c:	d130      	bne.n	80023a0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	2203      	movs	r2, #3
 800234a:	fa02 f303 	lsl.w	r3, r2, r3
 800234e:	43db      	mvns	r3, r3
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	4013      	ands	r3, r2
 8002354:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	68da      	ldr	r2, [r3, #12]
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	fa02 f303 	lsl.w	r3, r2, r3
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	4313      	orrs	r3, r2
 8002366:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002374:	2201      	movs	r2, #1
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	43db      	mvns	r3, r3
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	4013      	ands	r3, r2
 8002382:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	091b      	lsrs	r3, r3, #4
 800238a:	f003 0201 	and.w	r2, r3, #1
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	4313      	orrs	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	2203      	movs	r2, #3
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	43db      	mvns	r3, r3
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	4013      	ands	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	689a      	ldr	r2, [r3, #8]
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d003      	beq.n	80023e0 <HAL_GPIO_Init+0xfc>
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	2b12      	cmp	r3, #18
 80023de:	d123      	bne.n	8002428 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	08da      	lsrs	r2, r3, #3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	3208      	adds	r2, #8
 80023e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	f003 0307 	and.w	r3, r3, #7
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	220f      	movs	r2, #15
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	43db      	mvns	r3, r3
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	4013      	ands	r3, r2
 8002402:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	691a      	ldr	r2, [r3, #16]
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	f003 0307 	and.w	r3, r3, #7
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	4313      	orrs	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	08da      	lsrs	r2, r3, #3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	3208      	adds	r2, #8
 8002422:	69b9      	ldr	r1, [r7, #24]
 8002424:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	2203      	movs	r2, #3
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	43db      	mvns	r3, r3
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	4013      	ands	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f003 0203 	and.w	r2, r3, #3
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	4313      	orrs	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002464:	2b00      	cmp	r3, #0
 8002466:	f000 80a2 	beq.w	80025ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800246a:	2300      	movs	r3, #0
 800246c:	60fb      	str	r3, [r7, #12]
 800246e:	4b56      	ldr	r3, [pc, #344]	; (80025c8 <HAL_GPIO_Init+0x2e4>)
 8002470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002472:	4a55      	ldr	r2, [pc, #340]	; (80025c8 <HAL_GPIO_Init+0x2e4>)
 8002474:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002478:	6453      	str	r3, [r2, #68]	; 0x44
 800247a:	4b53      	ldr	r3, [pc, #332]	; (80025c8 <HAL_GPIO_Init+0x2e4>)
 800247c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002482:	60fb      	str	r3, [r7, #12]
 8002484:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002486:	4a51      	ldr	r2, [pc, #324]	; (80025cc <HAL_GPIO_Init+0x2e8>)
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	089b      	lsrs	r3, r3, #2
 800248c:	3302      	adds	r3, #2
 800248e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002492:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	f003 0303 	and.w	r3, r3, #3
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	220f      	movs	r2, #15
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	43db      	mvns	r3, r3
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	4013      	ands	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a48      	ldr	r2, [pc, #288]	; (80025d0 <HAL_GPIO_Init+0x2ec>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d019      	beq.n	80024e6 <HAL_GPIO_Init+0x202>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a47      	ldr	r2, [pc, #284]	; (80025d4 <HAL_GPIO_Init+0x2f0>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d013      	beq.n	80024e2 <HAL_GPIO_Init+0x1fe>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a46      	ldr	r2, [pc, #280]	; (80025d8 <HAL_GPIO_Init+0x2f4>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d00d      	beq.n	80024de <HAL_GPIO_Init+0x1fa>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a45      	ldr	r2, [pc, #276]	; (80025dc <HAL_GPIO_Init+0x2f8>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d007      	beq.n	80024da <HAL_GPIO_Init+0x1f6>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a44      	ldr	r2, [pc, #272]	; (80025e0 <HAL_GPIO_Init+0x2fc>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d101      	bne.n	80024d6 <HAL_GPIO_Init+0x1f2>
 80024d2:	2304      	movs	r3, #4
 80024d4:	e008      	b.n	80024e8 <HAL_GPIO_Init+0x204>
 80024d6:	2307      	movs	r3, #7
 80024d8:	e006      	b.n	80024e8 <HAL_GPIO_Init+0x204>
 80024da:	2303      	movs	r3, #3
 80024dc:	e004      	b.n	80024e8 <HAL_GPIO_Init+0x204>
 80024de:	2302      	movs	r3, #2
 80024e0:	e002      	b.n	80024e8 <HAL_GPIO_Init+0x204>
 80024e2:	2301      	movs	r3, #1
 80024e4:	e000      	b.n	80024e8 <HAL_GPIO_Init+0x204>
 80024e6:	2300      	movs	r3, #0
 80024e8:	69fa      	ldr	r2, [r7, #28]
 80024ea:	f002 0203 	and.w	r2, r2, #3
 80024ee:	0092      	lsls	r2, r2, #2
 80024f0:	4093      	lsls	r3, r2
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024f8:	4934      	ldr	r1, [pc, #208]	; (80025cc <HAL_GPIO_Init+0x2e8>)
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	089b      	lsrs	r3, r3, #2
 80024fe:	3302      	adds	r3, #2
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002506:	4b37      	ldr	r3, [pc, #220]	; (80025e4 <HAL_GPIO_Init+0x300>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	43db      	mvns	r3, r3
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	4013      	ands	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d003      	beq.n	800252a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	4313      	orrs	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800252a:	4a2e      	ldr	r2, [pc, #184]	; (80025e4 <HAL_GPIO_Init+0x300>)
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002530:	4b2c      	ldr	r3, [pc, #176]	; (80025e4 <HAL_GPIO_Init+0x300>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	43db      	mvns	r3, r3
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	4013      	ands	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d003      	beq.n	8002554 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	4313      	orrs	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002554:	4a23      	ldr	r2, [pc, #140]	; (80025e4 <HAL_GPIO_Init+0x300>)
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800255a:	4b22      	ldr	r3, [pc, #136]	; (80025e4 <HAL_GPIO_Init+0x300>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	43db      	mvns	r3, r3
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	4013      	ands	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d003      	beq.n	800257e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	4313      	orrs	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800257e:	4a19      	ldr	r2, [pc, #100]	; (80025e4 <HAL_GPIO_Init+0x300>)
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002584:	4b17      	ldr	r3, [pc, #92]	; (80025e4 <HAL_GPIO_Init+0x300>)
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	43db      	mvns	r3, r3
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	4013      	ands	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d003      	beq.n	80025a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025a8:	4a0e      	ldr	r2, [pc, #56]	; (80025e4 <HAL_GPIO_Init+0x300>)
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	3301      	adds	r3, #1
 80025b2:	61fb      	str	r3, [r7, #28]
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	2b0f      	cmp	r3, #15
 80025b8:	f67f aea2 	bls.w	8002300 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025bc:	bf00      	nop
 80025be:	3724      	adds	r7, #36	; 0x24
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	40023800 	.word	0x40023800
 80025cc:	40013800 	.word	0x40013800
 80025d0:	40020000 	.word	0x40020000
 80025d4:	40020400 	.word	0x40020400
 80025d8:	40020800 	.word	0x40020800
 80025dc:	40020c00 	.word	0x40020c00
 80025e0:	40021000 	.word	0x40021000
 80025e4:	40013c00 	.word	0x40013c00

080025e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	460b      	mov	r3, r1
 80025f2:	807b      	strh	r3, [r7, #2]
 80025f4:	4613      	mov	r3, r2
 80025f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025f8:	787b      	ldrb	r3, [r7, #1]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d003      	beq.n	8002606 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025fe:	887a      	ldrh	r2, [r7, #2]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002604:	e003      	b.n	800260e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002606:	887b      	ldrh	r3, [r7, #2]
 8002608:	041a      	lsls	r2, r3, #16
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	619a      	str	r2, [r3, #24]
}
 800260e:	bf00      	nop
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr

0800261a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800261a:	b480      	push	{r7}
 800261c:	b083      	sub	sp, #12
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
 8002622:	460b      	mov	r3, r1
 8002624:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	695a      	ldr	r2, [r3, #20]
 800262a:	887b      	ldrh	r3, [r7, #2]
 800262c:	401a      	ands	r2, r3
 800262e:	887b      	ldrh	r3, [r7, #2]
 8002630:	429a      	cmp	r2, r3
 8002632:	d104      	bne.n	800263e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002634:	887b      	ldrh	r3, [r7, #2]
 8002636:	041a      	lsls	r2, r3, #16
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800263c:	e002      	b.n	8002644 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800263e:	887a      	ldrh	r2, [r7, #2]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	619a      	str	r2, [r3, #24]
}
 8002644:	bf00      	nop
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e25b      	b.n	8002b1a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b00      	cmp	r3, #0
 800266c:	d075      	beq.n	800275a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800266e:	4ba3      	ldr	r3, [pc, #652]	; (80028fc <HAL_RCC_OscConfig+0x2ac>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f003 030c 	and.w	r3, r3, #12
 8002676:	2b04      	cmp	r3, #4
 8002678:	d00c      	beq.n	8002694 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800267a:	4ba0      	ldr	r3, [pc, #640]	; (80028fc <HAL_RCC_OscConfig+0x2ac>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002682:	2b08      	cmp	r3, #8
 8002684:	d112      	bne.n	80026ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002686:	4b9d      	ldr	r3, [pc, #628]	; (80028fc <HAL_RCC_OscConfig+0x2ac>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800268e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002692:	d10b      	bne.n	80026ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002694:	4b99      	ldr	r3, [pc, #612]	; (80028fc <HAL_RCC_OscConfig+0x2ac>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d05b      	beq.n	8002758 <HAL_RCC_OscConfig+0x108>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d157      	bne.n	8002758 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e236      	b.n	8002b1a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026b4:	d106      	bne.n	80026c4 <HAL_RCC_OscConfig+0x74>
 80026b6:	4b91      	ldr	r3, [pc, #580]	; (80028fc <HAL_RCC_OscConfig+0x2ac>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a90      	ldr	r2, [pc, #576]	; (80028fc <HAL_RCC_OscConfig+0x2ac>)
 80026bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026c0:	6013      	str	r3, [r2, #0]
 80026c2:	e01d      	b.n	8002700 <HAL_RCC_OscConfig+0xb0>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026cc:	d10c      	bne.n	80026e8 <HAL_RCC_OscConfig+0x98>
 80026ce:	4b8b      	ldr	r3, [pc, #556]	; (80028fc <HAL_RCC_OscConfig+0x2ac>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a8a      	ldr	r2, [pc, #552]	; (80028fc <HAL_RCC_OscConfig+0x2ac>)
 80026d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026d8:	6013      	str	r3, [r2, #0]
 80026da:	4b88      	ldr	r3, [pc, #544]	; (80028fc <HAL_RCC_OscConfig+0x2ac>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a87      	ldr	r2, [pc, #540]	; (80028fc <HAL_RCC_OscConfig+0x2ac>)
 80026e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026e4:	6013      	str	r3, [r2, #0]
 80026e6:	e00b      	b.n	8002700 <HAL_RCC_OscConfig+0xb0>
 80026e8:	4b84      	ldr	r3, [pc, #528]	; (80028fc <HAL_RCC_OscConfig+0x2ac>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a83      	ldr	r2, [pc, #524]	; (80028fc <HAL_RCC_OscConfig+0x2ac>)
 80026ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026f2:	6013      	str	r3, [r2, #0]
 80026f4:	4b81      	ldr	r3, [pc, #516]	; (80028fc <HAL_RCC_OscConfig+0x2ac>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a80      	ldr	r2, [pc, #512]	; (80028fc <HAL_RCC_OscConfig+0x2ac>)
 80026fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d013      	beq.n	8002730 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002708:	f7fe fda2 	bl	8001250 <HAL_GetTick>
 800270c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800270e:	e008      	b.n	8002722 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002710:	f7fe fd9e 	bl	8001250 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b64      	cmp	r3, #100	; 0x64
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e1fb      	b.n	8002b1a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002722:	4b76      	ldr	r3, [pc, #472]	; (80028fc <HAL_RCC_OscConfig+0x2ac>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d0f0      	beq.n	8002710 <HAL_RCC_OscConfig+0xc0>
 800272e:	e014      	b.n	800275a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002730:	f7fe fd8e 	bl	8001250 <HAL_GetTick>
 8002734:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002736:	e008      	b.n	800274a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002738:	f7fe fd8a 	bl	8001250 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b64      	cmp	r3, #100	; 0x64
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e1e7      	b.n	8002b1a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800274a:	4b6c      	ldr	r3, [pc, #432]	; (80028fc <HAL_RCC_OscConfig+0x2ac>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1f0      	bne.n	8002738 <HAL_RCC_OscConfig+0xe8>
 8002756:	e000      	b.n	800275a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002758:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d063      	beq.n	800282e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002766:	4b65      	ldr	r3, [pc, #404]	; (80028fc <HAL_RCC_OscConfig+0x2ac>)
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f003 030c 	and.w	r3, r3, #12
 800276e:	2b00      	cmp	r3, #0
 8002770:	d00b      	beq.n	800278a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002772:	4b62      	ldr	r3, [pc, #392]	; (80028fc <HAL_RCC_OscConfig+0x2ac>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800277a:	2b08      	cmp	r3, #8
 800277c:	d11c      	bne.n	80027b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800277e:	4b5f      	ldr	r3, [pc, #380]	; (80028fc <HAL_RCC_OscConfig+0x2ac>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d116      	bne.n	80027b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800278a:	4b5c      	ldr	r3, [pc, #368]	; (80028fc <HAL_RCC_OscConfig+0x2ac>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d005      	beq.n	80027a2 <HAL_RCC_OscConfig+0x152>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d001      	beq.n	80027a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e1bb      	b.n	8002b1a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027a2:	4b56      	ldr	r3, [pc, #344]	; (80028fc <HAL_RCC_OscConfig+0x2ac>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	00db      	lsls	r3, r3, #3
 80027b0:	4952      	ldr	r1, [pc, #328]	; (80028fc <HAL_RCC_OscConfig+0x2ac>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027b6:	e03a      	b.n	800282e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d020      	beq.n	8002802 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027c0:	4b4f      	ldr	r3, [pc, #316]	; (8002900 <HAL_RCC_OscConfig+0x2b0>)
 80027c2:	2201      	movs	r2, #1
 80027c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c6:	f7fe fd43 	bl	8001250 <HAL_GetTick>
 80027ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027cc:	e008      	b.n	80027e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027ce:	f7fe fd3f 	bl	8001250 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d901      	bls.n	80027e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e19c      	b.n	8002b1a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027e0:	4b46      	ldr	r3, [pc, #280]	; (80028fc <HAL_RCC_OscConfig+0x2ac>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0302 	and.w	r3, r3, #2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d0f0      	beq.n	80027ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ec:	4b43      	ldr	r3, [pc, #268]	; (80028fc <HAL_RCC_OscConfig+0x2ac>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	691b      	ldr	r3, [r3, #16]
 80027f8:	00db      	lsls	r3, r3, #3
 80027fa:	4940      	ldr	r1, [pc, #256]	; (80028fc <HAL_RCC_OscConfig+0x2ac>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	600b      	str	r3, [r1, #0]
 8002800:	e015      	b.n	800282e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002802:	4b3f      	ldr	r3, [pc, #252]	; (8002900 <HAL_RCC_OscConfig+0x2b0>)
 8002804:	2200      	movs	r2, #0
 8002806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002808:	f7fe fd22 	bl	8001250 <HAL_GetTick>
 800280c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800280e:	e008      	b.n	8002822 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002810:	f7fe fd1e 	bl	8001250 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b02      	cmp	r3, #2
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e17b      	b.n	8002b1a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002822:	4b36      	ldr	r3, [pc, #216]	; (80028fc <HAL_RCC_OscConfig+0x2ac>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1f0      	bne.n	8002810 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0308 	and.w	r3, r3, #8
 8002836:	2b00      	cmp	r3, #0
 8002838:	d030      	beq.n	800289c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	695b      	ldr	r3, [r3, #20]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d016      	beq.n	8002870 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002842:	4b30      	ldr	r3, [pc, #192]	; (8002904 <HAL_RCC_OscConfig+0x2b4>)
 8002844:	2201      	movs	r2, #1
 8002846:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002848:	f7fe fd02 	bl	8001250 <HAL_GetTick>
 800284c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800284e:	e008      	b.n	8002862 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002850:	f7fe fcfe 	bl	8001250 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b02      	cmp	r3, #2
 800285c:	d901      	bls.n	8002862 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e15b      	b.n	8002b1a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002862:	4b26      	ldr	r3, [pc, #152]	; (80028fc <HAL_RCC_OscConfig+0x2ac>)
 8002864:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d0f0      	beq.n	8002850 <HAL_RCC_OscConfig+0x200>
 800286e:	e015      	b.n	800289c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002870:	4b24      	ldr	r3, [pc, #144]	; (8002904 <HAL_RCC_OscConfig+0x2b4>)
 8002872:	2200      	movs	r2, #0
 8002874:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002876:	f7fe fceb 	bl	8001250 <HAL_GetTick>
 800287a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800287c:	e008      	b.n	8002890 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800287e:	f7fe fce7 	bl	8001250 <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d901      	bls.n	8002890 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e144      	b.n	8002b1a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002890:	4b1a      	ldr	r3, [pc, #104]	; (80028fc <HAL_RCC_OscConfig+0x2ac>)
 8002892:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d1f0      	bne.n	800287e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0304 	and.w	r3, r3, #4
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	f000 80a0 	beq.w	80029ea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028aa:	2300      	movs	r3, #0
 80028ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028ae:	4b13      	ldr	r3, [pc, #76]	; (80028fc <HAL_RCC_OscConfig+0x2ac>)
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d10f      	bne.n	80028da <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028ba:	2300      	movs	r3, #0
 80028bc:	60bb      	str	r3, [r7, #8]
 80028be:	4b0f      	ldr	r3, [pc, #60]	; (80028fc <HAL_RCC_OscConfig+0x2ac>)
 80028c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c2:	4a0e      	ldr	r2, [pc, #56]	; (80028fc <HAL_RCC_OscConfig+0x2ac>)
 80028c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028c8:	6413      	str	r3, [r2, #64]	; 0x40
 80028ca:	4b0c      	ldr	r3, [pc, #48]	; (80028fc <HAL_RCC_OscConfig+0x2ac>)
 80028cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d2:	60bb      	str	r3, [r7, #8]
 80028d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028d6:	2301      	movs	r3, #1
 80028d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028da:	4b0b      	ldr	r3, [pc, #44]	; (8002908 <HAL_RCC_OscConfig+0x2b8>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d121      	bne.n	800292a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028e6:	4b08      	ldr	r3, [pc, #32]	; (8002908 <HAL_RCC_OscConfig+0x2b8>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a07      	ldr	r2, [pc, #28]	; (8002908 <HAL_RCC_OscConfig+0x2b8>)
 80028ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028f2:	f7fe fcad 	bl	8001250 <HAL_GetTick>
 80028f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f8:	e011      	b.n	800291e <HAL_RCC_OscConfig+0x2ce>
 80028fa:	bf00      	nop
 80028fc:	40023800 	.word	0x40023800
 8002900:	42470000 	.word	0x42470000
 8002904:	42470e80 	.word	0x42470e80
 8002908:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800290c:	f7fe fca0 	bl	8001250 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b02      	cmp	r3, #2
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e0fd      	b.n	8002b1a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800291e:	4b81      	ldr	r3, [pc, #516]	; (8002b24 <HAL_RCC_OscConfig+0x4d4>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002926:	2b00      	cmp	r3, #0
 8002928:	d0f0      	beq.n	800290c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d106      	bne.n	8002940 <HAL_RCC_OscConfig+0x2f0>
 8002932:	4b7d      	ldr	r3, [pc, #500]	; (8002b28 <HAL_RCC_OscConfig+0x4d8>)
 8002934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002936:	4a7c      	ldr	r2, [pc, #496]	; (8002b28 <HAL_RCC_OscConfig+0x4d8>)
 8002938:	f043 0301 	orr.w	r3, r3, #1
 800293c:	6713      	str	r3, [r2, #112]	; 0x70
 800293e:	e01c      	b.n	800297a <HAL_RCC_OscConfig+0x32a>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	2b05      	cmp	r3, #5
 8002946:	d10c      	bne.n	8002962 <HAL_RCC_OscConfig+0x312>
 8002948:	4b77      	ldr	r3, [pc, #476]	; (8002b28 <HAL_RCC_OscConfig+0x4d8>)
 800294a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800294c:	4a76      	ldr	r2, [pc, #472]	; (8002b28 <HAL_RCC_OscConfig+0x4d8>)
 800294e:	f043 0304 	orr.w	r3, r3, #4
 8002952:	6713      	str	r3, [r2, #112]	; 0x70
 8002954:	4b74      	ldr	r3, [pc, #464]	; (8002b28 <HAL_RCC_OscConfig+0x4d8>)
 8002956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002958:	4a73      	ldr	r2, [pc, #460]	; (8002b28 <HAL_RCC_OscConfig+0x4d8>)
 800295a:	f043 0301 	orr.w	r3, r3, #1
 800295e:	6713      	str	r3, [r2, #112]	; 0x70
 8002960:	e00b      	b.n	800297a <HAL_RCC_OscConfig+0x32a>
 8002962:	4b71      	ldr	r3, [pc, #452]	; (8002b28 <HAL_RCC_OscConfig+0x4d8>)
 8002964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002966:	4a70      	ldr	r2, [pc, #448]	; (8002b28 <HAL_RCC_OscConfig+0x4d8>)
 8002968:	f023 0301 	bic.w	r3, r3, #1
 800296c:	6713      	str	r3, [r2, #112]	; 0x70
 800296e:	4b6e      	ldr	r3, [pc, #440]	; (8002b28 <HAL_RCC_OscConfig+0x4d8>)
 8002970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002972:	4a6d      	ldr	r2, [pc, #436]	; (8002b28 <HAL_RCC_OscConfig+0x4d8>)
 8002974:	f023 0304 	bic.w	r3, r3, #4
 8002978:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d015      	beq.n	80029ae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002982:	f7fe fc65 	bl	8001250 <HAL_GetTick>
 8002986:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002988:	e00a      	b.n	80029a0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800298a:	f7fe fc61 	bl	8001250 <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	f241 3288 	movw	r2, #5000	; 0x1388
 8002998:	4293      	cmp	r3, r2
 800299a:	d901      	bls.n	80029a0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e0bc      	b.n	8002b1a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029a0:	4b61      	ldr	r3, [pc, #388]	; (8002b28 <HAL_RCC_OscConfig+0x4d8>)
 80029a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d0ee      	beq.n	800298a <HAL_RCC_OscConfig+0x33a>
 80029ac:	e014      	b.n	80029d8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ae:	f7fe fc4f 	bl	8001250 <HAL_GetTick>
 80029b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029b4:	e00a      	b.n	80029cc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029b6:	f7fe fc4b 	bl	8001250 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d901      	bls.n	80029cc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e0a6      	b.n	8002b1a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029cc:	4b56      	ldr	r3, [pc, #344]	; (8002b28 <HAL_RCC_OscConfig+0x4d8>)
 80029ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1ee      	bne.n	80029b6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029d8:	7dfb      	ldrb	r3, [r7, #23]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d105      	bne.n	80029ea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029de:	4b52      	ldr	r3, [pc, #328]	; (8002b28 <HAL_RCC_OscConfig+0x4d8>)
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e2:	4a51      	ldr	r2, [pc, #324]	; (8002b28 <HAL_RCC_OscConfig+0x4d8>)
 80029e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	f000 8092 	beq.w	8002b18 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029f4:	4b4c      	ldr	r3, [pc, #304]	; (8002b28 <HAL_RCC_OscConfig+0x4d8>)
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f003 030c 	and.w	r3, r3, #12
 80029fc:	2b08      	cmp	r3, #8
 80029fe:	d05c      	beq.n	8002aba <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d141      	bne.n	8002a8c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a08:	4b48      	ldr	r3, [pc, #288]	; (8002b2c <HAL_RCC_OscConfig+0x4dc>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a0e:	f7fe fc1f 	bl	8001250 <HAL_GetTick>
 8002a12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a14:	e008      	b.n	8002a28 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a16:	f7fe fc1b 	bl	8001250 <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d901      	bls.n	8002a28 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e078      	b.n	8002b1a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a28:	4b3f      	ldr	r3, [pc, #252]	; (8002b28 <HAL_RCC_OscConfig+0x4d8>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d1f0      	bne.n	8002a16 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	69da      	ldr	r2, [r3, #28]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a1b      	ldr	r3, [r3, #32]
 8002a3c:	431a      	orrs	r2, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a42:	019b      	lsls	r3, r3, #6
 8002a44:	431a      	orrs	r2, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a4a:	085b      	lsrs	r3, r3, #1
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	041b      	lsls	r3, r3, #16
 8002a50:	431a      	orrs	r2, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a56:	061b      	lsls	r3, r3, #24
 8002a58:	4933      	ldr	r1, [pc, #204]	; (8002b28 <HAL_RCC_OscConfig+0x4d8>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a5e:	4b33      	ldr	r3, [pc, #204]	; (8002b2c <HAL_RCC_OscConfig+0x4dc>)
 8002a60:	2201      	movs	r2, #1
 8002a62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a64:	f7fe fbf4 	bl	8001250 <HAL_GetTick>
 8002a68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a6c:	f7fe fbf0 	bl	8001250 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e04d      	b.n	8002b1a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a7e:	4b2a      	ldr	r3, [pc, #168]	; (8002b28 <HAL_RCC_OscConfig+0x4d8>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d0f0      	beq.n	8002a6c <HAL_RCC_OscConfig+0x41c>
 8002a8a:	e045      	b.n	8002b18 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a8c:	4b27      	ldr	r3, [pc, #156]	; (8002b2c <HAL_RCC_OscConfig+0x4dc>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a92:	f7fe fbdd 	bl	8001250 <HAL_GetTick>
 8002a96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a98:	e008      	b.n	8002aac <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a9a:	f7fe fbd9 	bl	8001250 <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d901      	bls.n	8002aac <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e036      	b.n	8002b1a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aac:	4b1e      	ldr	r3, [pc, #120]	; (8002b28 <HAL_RCC_OscConfig+0x4d8>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d1f0      	bne.n	8002a9a <HAL_RCC_OscConfig+0x44a>
 8002ab8:	e02e      	b.n	8002b18 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d101      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e029      	b.n	8002b1a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ac6:	4b18      	ldr	r3, [pc, #96]	; (8002b28 <HAL_RCC_OscConfig+0x4d8>)
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	69db      	ldr	r3, [r3, #28]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d11c      	bne.n	8002b14 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d115      	bne.n	8002b14 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002ae8:	68fa      	ldr	r2, [r7, #12]
 8002aea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002aee:	4013      	ands	r3, r2
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d10d      	bne.n	8002b14 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d106      	bne.n	8002b14 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d001      	beq.n	8002b18 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e000      	b.n	8002b1a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3718      	adds	r7, #24
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	40007000 	.word	0x40007000
 8002b28:	40023800 	.word	0x40023800
 8002b2c:	42470060 	.word	0x42470060

08002b30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d101      	bne.n	8002b44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e0cc      	b.n	8002cde <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b44:	4b68      	ldr	r3, [pc, #416]	; (8002ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 030f 	and.w	r3, r3, #15
 8002b4c:	683a      	ldr	r2, [r7, #0]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d90c      	bls.n	8002b6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b52:	4b65      	ldr	r3, [pc, #404]	; (8002ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b54:	683a      	ldr	r2, [r7, #0]
 8002b56:	b2d2      	uxtb	r2, r2
 8002b58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b5a:	4b63      	ldr	r3, [pc, #396]	; (8002ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 030f 	and.w	r3, r3, #15
 8002b62:	683a      	ldr	r2, [r7, #0]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d001      	beq.n	8002b6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e0b8      	b.n	8002cde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0302 	and.w	r3, r3, #2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d020      	beq.n	8002bba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0304 	and.w	r3, r3, #4
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d005      	beq.n	8002b90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b84:	4b59      	ldr	r3, [pc, #356]	; (8002cec <HAL_RCC_ClockConfig+0x1bc>)
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	4a58      	ldr	r2, [pc, #352]	; (8002cec <HAL_RCC_ClockConfig+0x1bc>)
 8002b8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0308 	and.w	r3, r3, #8
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d005      	beq.n	8002ba8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b9c:	4b53      	ldr	r3, [pc, #332]	; (8002cec <HAL_RCC_ClockConfig+0x1bc>)
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	4a52      	ldr	r2, [pc, #328]	; (8002cec <HAL_RCC_ClockConfig+0x1bc>)
 8002ba2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ba6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ba8:	4b50      	ldr	r3, [pc, #320]	; (8002cec <HAL_RCC_ClockConfig+0x1bc>)
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	494d      	ldr	r1, [pc, #308]	; (8002cec <HAL_RCC_ClockConfig+0x1bc>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d044      	beq.n	8002c50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d107      	bne.n	8002bde <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bce:	4b47      	ldr	r3, [pc, #284]	; (8002cec <HAL_RCC_ClockConfig+0x1bc>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d119      	bne.n	8002c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e07f      	b.n	8002cde <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d003      	beq.n	8002bee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bea:	2b03      	cmp	r3, #3
 8002bec:	d107      	bne.n	8002bfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bee:	4b3f      	ldr	r3, [pc, #252]	; (8002cec <HAL_RCC_ClockConfig+0x1bc>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d109      	bne.n	8002c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e06f      	b.n	8002cde <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bfe:	4b3b      	ldr	r3, [pc, #236]	; (8002cec <HAL_RCC_ClockConfig+0x1bc>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d101      	bne.n	8002c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e067      	b.n	8002cde <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c0e:	4b37      	ldr	r3, [pc, #220]	; (8002cec <HAL_RCC_ClockConfig+0x1bc>)
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f023 0203 	bic.w	r2, r3, #3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	4934      	ldr	r1, [pc, #208]	; (8002cec <HAL_RCC_ClockConfig+0x1bc>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c20:	f7fe fb16 	bl	8001250 <HAL_GetTick>
 8002c24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c26:	e00a      	b.n	8002c3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c28:	f7fe fb12 	bl	8001250 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e04f      	b.n	8002cde <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c3e:	4b2b      	ldr	r3, [pc, #172]	; (8002cec <HAL_RCC_ClockConfig+0x1bc>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f003 020c 	and.w	r2, r3, #12
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d1eb      	bne.n	8002c28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c50:	4b25      	ldr	r3, [pc, #148]	; (8002ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 030f 	and.w	r3, r3, #15
 8002c58:	683a      	ldr	r2, [r7, #0]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d20c      	bcs.n	8002c78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c5e:	4b22      	ldr	r3, [pc, #136]	; (8002ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c60:	683a      	ldr	r2, [r7, #0]
 8002c62:	b2d2      	uxtb	r2, r2
 8002c64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c66:	4b20      	ldr	r3, [pc, #128]	; (8002ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 030f 	and.w	r3, r3, #15
 8002c6e:	683a      	ldr	r2, [r7, #0]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d001      	beq.n	8002c78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e032      	b.n	8002cde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0304 	and.w	r3, r3, #4
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d008      	beq.n	8002c96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c84:	4b19      	ldr	r3, [pc, #100]	; (8002cec <HAL_RCC_ClockConfig+0x1bc>)
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	4916      	ldr	r1, [pc, #88]	; (8002cec <HAL_RCC_ClockConfig+0x1bc>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0308 	and.w	r3, r3, #8
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d009      	beq.n	8002cb6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ca2:	4b12      	ldr	r3, [pc, #72]	; (8002cec <HAL_RCC_ClockConfig+0x1bc>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	00db      	lsls	r3, r3, #3
 8002cb0:	490e      	ldr	r1, [pc, #56]	; (8002cec <HAL_RCC_ClockConfig+0x1bc>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002cb6:	f000 f821 	bl	8002cfc <HAL_RCC_GetSysClockFreq>
 8002cba:	4601      	mov	r1, r0
 8002cbc:	4b0b      	ldr	r3, [pc, #44]	; (8002cec <HAL_RCC_ClockConfig+0x1bc>)
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	091b      	lsrs	r3, r3, #4
 8002cc2:	f003 030f 	and.w	r3, r3, #15
 8002cc6:	4a0a      	ldr	r2, [pc, #40]	; (8002cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8002cc8:	5cd3      	ldrb	r3, [r2, r3]
 8002cca:	fa21 f303 	lsr.w	r3, r1, r3
 8002cce:	4a09      	ldr	r2, [pc, #36]	; (8002cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002cd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002cd2:	4b09      	ldr	r3, [pc, #36]	; (8002cf8 <HAL_RCC_ClockConfig+0x1c8>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7fe f9b4 	bl	8001044 <HAL_InitTick>

  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	40023c00 	.word	0x40023c00
 8002cec:	40023800 	.word	0x40023800
 8002cf0:	08006b30 	.word	0x08006b30
 8002cf4:	20000000 	.word	0x20000000
 8002cf8:	20000004 	.word	0x20000004

08002cfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cfe:	b085      	sub	sp, #20
 8002d00:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d02:	2300      	movs	r3, #0
 8002d04:	607b      	str	r3, [r7, #4]
 8002d06:	2300      	movs	r3, #0
 8002d08:	60fb      	str	r3, [r7, #12]
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d12:	4b63      	ldr	r3, [pc, #396]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f003 030c 	and.w	r3, r3, #12
 8002d1a:	2b04      	cmp	r3, #4
 8002d1c:	d007      	beq.n	8002d2e <HAL_RCC_GetSysClockFreq+0x32>
 8002d1e:	2b08      	cmp	r3, #8
 8002d20:	d008      	beq.n	8002d34 <HAL_RCC_GetSysClockFreq+0x38>
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	f040 80b4 	bne.w	8002e90 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d28:	4b5e      	ldr	r3, [pc, #376]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002d2a:	60bb      	str	r3, [r7, #8]
       break;
 8002d2c:	e0b3      	b.n	8002e96 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d2e:	4b5e      	ldr	r3, [pc, #376]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002d30:	60bb      	str	r3, [r7, #8]
      break;
 8002d32:	e0b0      	b.n	8002e96 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d34:	4b5a      	ldr	r3, [pc, #360]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d3c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d3e:	4b58      	ldr	r3, [pc, #352]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d04a      	beq.n	8002de0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d4a:	4b55      	ldr	r3, [pc, #340]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	099b      	lsrs	r3, r3, #6
 8002d50:	f04f 0400 	mov.w	r4, #0
 8002d54:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002d58:	f04f 0200 	mov.w	r2, #0
 8002d5c:	ea03 0501 	and.w	r5, r3, r1
 8002d60:	ea04 0602 	and.w	r6, r4, r2
 8002d64:	4629      	mov	r1, r5
 8002d66:	4632      	mov	r2, r6
 8002d68:	f04f 0300 	mov.w	r3, #0
 8002d6c:	f04f 0400 	mov.w	r4, #0
 8002d70:	0154      	lsls	r4, r2, #5
 8002d72:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002d76:	014b      	lsls	r3, r1, #5
 8002d78:	4619      	mov	r1, r3
 8002d7a:	4622      	mov	r2, r4
 8002d7c:	1b49      	subs	r1, r1, r5
 8002d7e:	eb62 0206 	sbc.w	r2, r2, r6
 8002d82:	f04f 0300 	mov.w	r3, #0
 8002d86:	f04f 0400 	mov.w	r4, #0
 8002d8a:	0194      	lsls	r4, r2, #6
 8002d8c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002d90:	018b      	lsls	r3, r1, #6
 8002d92:	1a5b      	subs	r3, r3, r1
 8002d94:	eb64 0402 	sbc.w	r4, r4, r2
 8002d98:	f04f 0100 	mov.w	r1, #0
 8002d9c:	f04f 0200 	mov.w	r2, #0
 8002da0:	00e2      	lsls	r2, r4, #3
 8002da2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002da6:	00d9      	lsls	r1, r3, #3
 8002da8:	460b      	mov	r3, r1
 8002daa:	4614      	mov	r4, r2
 8002dac:	195b      	adds	r3, r3, r5
 8002dae:	eb44 0406 	adc.w	r4, r4, r6
 8002db2:	f04f 0100 	mov.w	r1, #0
 8002db6:	f04f 0200 	mov.w	r2, #0
 8002dba:	0262      	lsls	r2, r4, #9
 8002dbc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002dc0:	0259      	lsls	r1, r3, #9
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	4614      	mov	r4, r2
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	4621      	mov	r1, r4
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f04f 0400 	mov.w	r4, #0
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	4623      	mov	r3, r4
 8002dd4:	f7fd fa04 	bl	80001e0 <__aeabi_uldivmod>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	460c      	mov	r4, r1
 8002ddc:	60fb      	str	r3, [r7, #12]
 8002dde:	e049      	b.n	8002e74 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002de0:	4b2f      	ldr	r3, [pc, #188]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	099b      	lsrs	r3, r3, #6
 8002de6:	f04f 0400 	mov.w	r4, #0
 8002dea:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002dee:	f04f 0200 	mov.w	r2, #0
 8002df2:	ea03 0501 	and.w	r5, r3, r1
 8002df6:	ea04 0602 	and.w	r6, r4, r2
 8002dfa:	4629      	mov	r1, r5
 8002dfc:	4632      	mov	r2, r6
 8002dfe:	f04f 0300 	mov.w	r3, #0
 8002e02:	f04f 0400 	mov.w	r4, #0
 8002e06:	0154      	lsls	r4, r2, #5
 8002e08:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002e0c:	014b      	lsls	r3, r1, #5
 8002e0e:	4619      	mov	r1, r3
 8002e10:	4622      	mov	r2, r4
 8002e12:	1b49      	subs	r1, r1, r5
 8002e14:	eb62 0206 	sbc.w	r2, r2, r6
 8002e18:	f04f 0300 	mov.w	r3, #0
 8002e1c:	f04f 0400 	mov.w	r4, #0
 8002e20:	0194      	lsls	r4, r2, #6
 8002e22:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002e26:	018b      	lsls	r3, r1, #6
 8002e28:	1a5b      	subs	r3, r3, r1
 8002e2a:	eb64 0402 	sbc.w	r4, r4, r2
 8002e2e:	f04f 0100 	mov.w	r1, #0
 8002e32:	f04f 0200 	mov.w	r2, #0
 8002e36:	00e2      	lsls	r2, r4, #3
 8002e38:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002e3c:	00d9      	lsls	r1, r3, #3
 8002e3e:	460b      	mov	r3, r1
 8002e40:	4614      	mov	r4, r2
 8002e42:	195b      	adds	r3, r3, r5
 8002e44:	eb44 0406 	adc.w	r4, r4, r6
 8002e48:	f04f 0100 	mov.w	r1, #0
 8002e4c:	f04f 0200 	mov.w	r2, #0
 8002e50:	02a2      	lsls	r2, r4, #10
 8002e52:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002e56:	0299      	lsls	r1, r3, #10
 8002e58:	460b      	mov	r3, r1
 8002e5a:	4614      	mov	r4, r2
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	4621      	mov	r1, r4
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f04f 0400 	mov.w	r4, #0
 8002e66:	461a      	mov	r2, r3
 8002e68:	4623      	mov	r3, r4
 8002e6a:	f7fd f9b9 	bl	80001e0 <__aeabi_uldivmod>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	460c      	mov	r4, r1
 8002e72:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e74:	4b0a      	ldr	r3, [pc, #40]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	0c1b      	lsrs	r3, r3, #16
 8002e7a:	f003 0303 	and.w	r3, r3, #3
 8002e7e:	3301      	adds	r3, #1
 8002e80:	005b      	lsls	r3, r3, #1
 8002e82:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e8c:	60bb      	str	r3, [r7, #8]
      break;
 8002e8e:	e002      	b.n	8002e96 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e90:	4b04      	ldr	r3, [pc, #16]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002e92:	60bb      	str	r3, [r7, #8]
      break;
 8002e94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e96:	68bb      	ldr	r3, [r7, #8]
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3714      	adds	r7, #20
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ea0:	40023800 	.word	0x40023800
 8002ea4:	00f42400 	.word	0x00f42400
 8002ea8:	007a1200 	.word	0x007a1200

08002eac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002eb0:	4b03      	ldr	r3, [pc, #12]	; (8002ec0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	20000000 	.word	0x20000000

08002ec4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ec8:	f7ff fff0 	bl	8002eac <HAL_RCC_GetHCLKFreq>
 8002ecc:	4601      	mov	r1, r0
 8002ece:	4b05      	ldr	r3, [pc, #20]	; (8002ee4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	0a9b      	lsrs	r3, r3, #10
 8002ed4:	f003 0307 	and.w	r3, r3, #7
 8002ed8:	4a03      	ldr	r2, [pc, #12]	; (8002ee8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002eda:	5cd3      	ldrb	r3, [r2, r3]
 8002edc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	40023800 	.word	0x40023800
 8002ee8:	08006b40 	.word	0x08006b40

08002eec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ef0:	f7ff ffdc 	bl	8002eac <HAL_RCC_GetHCLKFreq>
 8002ef4:	4601      	mov	r1, r0
 8002ef6:	4b05      	ldr	r3, [pc, #20]	; (8002f0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	0b5b      	lsrs	r3, r3, #13
 8002efc:	f003 0307 	and.w	r3, r3, #7
 8002f00:	4a03      	ldr	r2, [pc, #12]	; (8002f10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f02:	5cd3      	ldrb	r3, [r2, r3]
 8002f04:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	40023800 	.word	0x40023800
 8002f10:	08006b40 	.word	0x08006b40

08002f14 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	220f      	movs	r2, #15
 8002f22:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002f24:	4b12      	ldr	r3, [pc, #72]	; (8002f70 <HAL_RCC_GetClockConfig+0x5c>)
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f003 0203 	and.w	r2, r3, #3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002f30:	4b0f      	ldr	r3, [pc, #60]	; (8002f70 <HAL_RCC_GetClockConfig+0x5c>)
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002f3c:	4b0c      	ldr	r3, [pc, #48]	; (8002f70 <HAL_RCC_GetClockConfig+0x5c>)
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002f48:	4b09      	ldr	r3, [pc, #36]	; (8002f70 <HAL_RCC_GetClockConfig+0x5c>)
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	08db      	lsrs	r3, r3, #3
 8002f4e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002f56:	4b07      	ldr	r3, [pc, #28]	; (8002f74 <HAL_RCC_GetClockConfig+0x60>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 020f 	and.w	r2, r3, #15
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	601a      	str	r2, [r3, #0]
}
 8002f62:	bf00      	nop
 8002f64:	370c      	adds	r7, #12
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	40023800 	.word	0x40023800
 8002f74:	40023c00 	.word	0x40023c00

08002f78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d101      	bne.n	8002f8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e01d      	b.n	8002fc6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d106      	bne.n	8002fa4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 f815 	bl	8002fce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2202      	movs	r2, #2
 8002fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	3304      	adds	r3, #4
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	4610      	mov	r0, r2
 8002fb8:	f000 f968 	bl	800328c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002fce:	b480      	push	{r7}
 8002fd0:	b083      	sub	sp, #12
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002fd6:	bf00      	nop
 8002fd8:	370c      	adds	r7, #12
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr

08002fe2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	b085      	sub	sp, #20
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68da      	ldr	r2, [r3, #12]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f042 0201 	orr.w	r2, r2, #1
 8002ff8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f003 0307 	and.w	r3, r3, #7
 8003004:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2b06      	cmp	r3, #6
 800300a:	d007      	beq.n	800301c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f042 0201 	orr.w	r2, r2, #1
 800301a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3714      	adds	r7, #20
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr

0800302a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800302a:	b580      	push	{r7, lr}
 800302c:	b082      	sub	sp, #8
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	f003 0302 	and.w	r3, r3, #2
 800303c:	2b02      	cmp	r3, #2
 800303e:	d122      	bne.n	8003086 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b02      	cmp	r3, #2
 800304c:	d11b      	bne.n	8003086 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f06f 0202 	mvn.w	r2, #2
 8003056:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	f003 0303 	and.w	r3, r3, #3
 8003068:	2b00      	cmp	r3, #0
 800306a:	d003      	beq.n	8003074 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f000 f8ee 	bl	800324e <HAL_TIM_IC_CaptureCallback>
 8003072:	e005      	b.n	8003080 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f000 f8e0 	bl	800323a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 f8f1 	bl	8003262 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	f003 0304 	and.w	r3, r3, #4
 8003090:	2b04      	cmp	r3, #4
 8003092:	d122      	bne.n	80030da <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	f003 0304 	and.w	r3, r3, #4
 800309e:	2b04      	cmp	r3, #4
 80030a0:	d11b      	bne.n	80030da <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f06f 0204 	mvn.w	r2, #4
 80030aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2202      	movs	r2, #2
 80030b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d003      	beq.n	80030c8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f000 f8c4 	bl	800324e <HAL_TIM_IC_CaptureCallback>
 80030c6:	e005      	b.n	80030d4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f000 f8b6 	bl	800323a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 f8c7 	bl	8003262 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	691b      	ldr	r3, [r3, #16]
 80030e0:	f003 0308 	and.w	r3, r3, #8
 80030e4:	2b08      	cmp	r3, #8
 80030e6:	d122      	bne.n	800312e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	f003 0308 	and.w	r3, r3, #8
 80030f2:	2b08      	cmp	r3, #8
 80030f4:	d11b      	bne.n	800312e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f06f 0208 	mvn.w	r2, #8
 80030fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2204      	movs	r2, #4
 8003104:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	69db      	ldr	r3, [r3, #28]
 800310c:	f003 0303 	and.w	r3, r3, #3
 8003110:	2b00      	cmp	r3, #0
 8003112:	d003      	beq.n	800311c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f000 f89a 	bl	800324e <HAL_TIM_IC_CaptureCallback>
 800311a:	e005      	b.n	8003128 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f000 f88c 	bl	800323a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 f89d 	bl	8003262 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	f003 0310 	and.w	r3, r3, #16
 8003138:	2b10      	cmp	r3, #16
 800313a:	d122      	bne.n	8003182 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	f003 0310 	and.w	r3, r3, #16
 8003146:	2b10      	cmp	r3, #16
 8003148:	d11b      	bne.n	8003182 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f06f 0210 	mvn.w	r2, #16
 8003152:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2208      	movs	r2, #8
 8003158:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	69db      	ldr	r3, [r3, #28]
 8003160:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003164:	2b00      	cmp	r3, #0
 8003166:	d003      	beq.n	8003170 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f000 f870 	bl	800324e <HAL_TIM_IC_CaptureCallback>
 800316e:	e005      	b.n	800317c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f000 f862 	bl	800323a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 f873 	bl	8003262 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	691b      	ldr	r3, [r3, #16]
 8003188:	f003 0301 	and.w	r3, r3, #1
 800318c:	2b01      	cmp	r3, #1
 800318e:	d10e      	bne.n	80031ae <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	2b01      	cmp	r3, #1
 800319c:	d107      	bne.n	80031ae <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f06f 0201 	mvn.w	r2, #1
 80031a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f7fd fe3d 	bl	8000e28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	691b      	ldr	r3, [r3, #16]
 80031b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031b8:	2b80      	cmp	r3, #128	; 0x80
 80031ba:	d10e      	bne.n	80031da <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031c6:	2b80      	cmp	r3, #128	; 0x80
 80031c8:	d107      	bne.n	80031da <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80031d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f000 f8e3 	bl	80033a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	691b      	ldr	r3, [r3, #16]
 80031e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031e4:	2b40      	cmp	r3, #64	; 0x40
 80031e6:	d10e      	bne.n	8003206 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031f2:	2b40      	cmp	r3, #64	; 0x40
 80031f4:	d107      	bne.n	8003206 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f000 f838 	bl	8003276 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	691b      	ldr	r3, [r3, #16]
 800320c:	f003 0320 	and.w	r3, r3, #32
 8003210:	2b20      	cmp	r3, #32
 8003212:	d10e      	bne.n	8003232 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	f003 0320 	and.w	r3, r3, #32
 800321e:	2b20      	cmp	r3, #32
 8003220:	d107      	bne.n	8003232 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f06f 0220 	mvn.w	r2, #32
 800322a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f000 f8ad 	bl	800338c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003232:	bf00      	nop
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}

0800323a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800323a:	b480      	push	{r7}
 800323c:	b083      	sub	sp, #12
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003242:	bf00      	nop
 8003244:	370c      	adds	r7, #12
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr

0800324e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800324e:	b480      	push	{r7}
 8003250:	b083      	sub	sp, #12
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003256:	bf00      	nop
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr

08003262 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003262:	b480      	push	{r7}
 8003264:	b083      	sub	sp, #12
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800326a:	bf00      	nop
 800326c:	370c      	adds	r7, #12
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr

08003276 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003276:	b480      	push	{r7}
 8003278:	b083      	sub	sp, #12
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800327e:	bf00      	nop
 8003280:	370c      	adds	r7, #12
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
	...

0800328c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a34      	ldr	r2, [pc, #208]	; (8003370 <TIM_Base_SetConfig+0xe4>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d00f      	beq.n	80032c4 <TIM_Base_SetConfig+0x38>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032aa:	d00b      	beq.n	80032c4 <TIM_Base_SetConfig+0x38>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a31      	ldr	r2, [pc, #196]	; (8003374 <TIM_Base_SetConfig+0xe8>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d007      	beq.n	80032c4 <TIM_Base_SetConfig+0x38>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a30      	ldr	r2, [pc, #192]	; (8003378 <TIM_Base_SetConfig+0xec>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d003      	beq.n	80032c4 <TIM_Base_SetConfig+0x38>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a2f      	ldr	r2, [pc, #188]	; (800337c <TIM_Base_SetConfig+0xf0>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d108      	bne.n	80032d6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a25      	ldr	r2, [pc, #148]	; (8003370 <TIM_Base_SetConfig+0xe4>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d01b      	beq.n	8003316 <TIM_Base_SetConfig+0x8a>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032e4:	d017      	beq.n	8003316 <TIM_Base_SetConfig+0x8a>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a22      	ldr	r2, [pc, #136]	; (8003374 <TIM_Base_SetConfig+0xe8>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d013      	beq.n	8003316 <TIM_Base_SetConfig+0x8a>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a21      	ldr	r2, [pc, #132]	; (8003378 <TIM_Base_SetConfig+0xec>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d00f      	beq.n	8003316 <TIM_Base_SetConfig+0x8a>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a20      	ldr	r2, [pc, #128]	; (800337c <TIM_Base_SetConfig+0xf0>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d00b      	beq.n	8003316 <TIM_Base_SetConfig+0x8a>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a1f      	ldr	r2, [pc, #124]	; (8003380 <TIM_Base_SetConfig+0xf4>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d007      	beq.n	8003316 <TIM_Base_SetConfig+0x8a>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a1e      	ldr	r2, [pc, #120]	; (8003384 <TIM_Base_SetConfig+0xf8>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d003      	beq.n	8003316 <TIM_Base_SetConfig+0x8a>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a1d      	ldr	r2, [pc, #116]	; (8003388 <TIM_Base_SetConfig+0xfc>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d108      	bne.n	8003328 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800331c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	4313      	orrs	r3, r2
 8003326:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	695b      	ldr	r3, [r3, #20]
 8003332:	4313      	orrs	r3, r2
 8003334:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	689a      	ldr	r2, [r3, #8]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a08      	ldr	r2, [pc, #32]	; (8003370 <TIM_Base_SetConfig+0xe4>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d103      	bne.n	800335c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	691a      	ldr	r2, [r3, #16]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	615a      	str	r2, [r3, #20]
}
 8003362:	bf00      	nop
 8003364:	3714      	adds	r7, #20
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	40010000 	.word	0x40010000
 8003374:	40000400 	.word	0x40000400
 8003378:	40000800 	.word	0x40000800
 800337c:	40000c00 	.word	0x40000c00
 8003380:	40014000 	.word	0x40014000
 8003384:	40014400 	.word	0x40014400
 8003388:	40014800 	.word	0x40014800

0800338c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d101      	bne.n	80033c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e03f      	b.n	8003446 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d106      	bne.n	80033e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f7fd fde2 	bl	8000fa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2224      	movs	r2, #36	; 0x24
 80033e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	68da      	ldr	r2, [r3, #12]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f000 faf9 	bl	80039f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	691a      	ldr	r2, [r3, #16]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800340c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	695a      	ldr	r2, [r3, #20]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800341c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68da      	ldr	r2, [r3, #12]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800342c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2220      	movs	r2, #32
 8003438:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2220      	movs	r2, #32
 8003440:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3708      	adds	r7, #8
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800344e:	b480      	push	{r7}
 8003450:	b085      	sub	sp, #20
 8003452:	af00      	add	r7, sp, #0
 8003454:	60f8      	str	r0, [r7, #12]
 8003456:	60b9      	str	r1, [r7, #8]
 8003458:	4613      	mov	r3, r2
 800345a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b20      	cmp	r3, #32
 8003466:	d130      	bne.n	80034ca <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d002      	beq.n	8003474 <HAL_UART_Transmit_IT+0x26>
 800346e:	88fb      	ldrh	r3, [r7, #6]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d101      	bne.n	8003478 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e029      	b.n	80034cc <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800347e:	2b01      	cmp	r3, #1
 8003480:	d101      	bne.n	8003486 <HAL_UART_Transmit_IT+0x38>
 8003482:	2302      	movs	r3, #2
 8003484:	e022      	b.n	80034cc <HAL_UART_Transmit_IT+0x7e>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	68ba      	ldr	r2, [r7, #8]
 8003492:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	88fa      	ldrh	r2, [r7, #6]
 8003498:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	88fa      	ldrh	r2, [r7, #6]
 800349e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2221      	movs	r2, #33	; 0x21
 80034aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68da      	ldr	r2, [r3, #12]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80034c4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80034c6:	2300      	movs	r3, #0
 80034c8:	e000      	b.n	80034cc <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80034ca:	2302      	movs	r3, #2
  }
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3714      	adds	r7, #20
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80034d8:	b480      	push	{r7}
 80034da:	b085      	sub	sp, #20
 80034dc:	af00      	add	r7, sp, #0
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	4613      	mov	r3, r2
 80034e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	2b20      	cmp	r3, #32
 80034f0:	d140      	bne.n	8003574 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d002      	beq.n	80034fe <HAL_UART_Receive_IT+0x26>
 80034f8:	88fb      	ldrh	r3, [r7, #6]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d101      	bne.n	8003502 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e039      	b.n	8003576 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003508:	2b01      	cmp	r3, #1
 800350a:	d101      	bne.n	8003510 <HAL_UART_Receive_IT+0x38>
 800350c:	2302      	movs	r3, #2
 800350e:	e032      	b.n	8003576 <HAL_UART_Receive_IT+0x9e>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	68ba      	ldr	r2, [r7, #8]
 800351c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	88fa      	ldrh	r2, [r7, #6]
 8003522:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	88fa      	ldrh	r2, [r7, #6]
 8003528:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2200      	movs	r2, #0
 800352e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2222      	movs	r2, #34	; 0x22
 8003534:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68da      	ldr	r2, [r3, #12]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800354e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	695a      	ldr	r2, [r3, #20]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f042 0201 	orr.w	r2, r2, #1
 800355e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68da      	ldr	r2, [r3, #12]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f042 0220 	orr.w	r2, r2, #32
 800356e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003570:	2300      	movs	r3, #0
 8003572:	e000      	b.n	8003576 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003574:	2302      	movs	r3, #2
  }
}
 8003576:	4618      	mov	r0, r3
 8003578:	3714      	adds	r7, #20
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
	...

08003584 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b088      	sub	sp, #32
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80035a4:	2300      	movs	r3, #0
 80035a6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80035a8:	2300      	movs	r3, #0
 80035aa:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	f003 030f 	and.w	r3, r3, #15
 80035b2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d10d      	bne.n	80035d6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	f003 0320 	and.w	r3, r3, #32
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d008      	beq.n	80035d6 <HAL_UART_IRQHandler+0x52>
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	f003 0320 	and.w	r3, r3, #32
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d003      	beq.n	80035d6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 f98c 	bl	80038ec <UART_Receive_IT>
      return;
 80035d4:	e0d1      	b.n	800377a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	f000 80b0 	beq.w	800373e <HAL_UART_IRQHandler+0x1ba>
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	f003 0301 	and.w	r3, r3, #1
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d105      	bne.n	80035f4 <HAL_UART_IRQHandler+0x70>
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	f000 80a5 	beq.w	800373e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00a      	beq.n	8003614 <HAL_UART_IRQHandler+0x90>
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003604:	2b00      	cmp	r3, #0
 8003606:	d005      	beq.n	8003614 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800360c:	f043 0201 	orr.w	r2, r3, #1
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	f003 0304 	and.w	r3, r3, #4
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00a      	beq.n	8003634 <HAL_UART_IRQHandler+0xb0>
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	f003 0301 	and.w	r3, r3, #1
 8003624:	2b00      	cmp	r3, #0
 8003626:	d005      	beq.n	8003634 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800362c:	f043 0202 	orr.w	r2, r3, #2
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00a      	beq.n	8003654 <HAL_UART_IRQHandler+0xd0>
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	f003 0301 	and.w	r3, r3, #1
 8003644:	2b00      	cmp	r3, #0
 8003646:	d005      	beq.n	8003654 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800364c:	f043 0204 	orr.w	r2, r3, #4
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	f003 0308 	and.w	r3, r3, #8
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00f      	beq.n	800367e <HAL_UART_IRQHandler+0xfa>
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	f003 0320 	and.w	r3, r3, #32
 8003664:	2b00      	cmp	r3, #0
 8003666:	d104      	bne.n	8003672 <HAL_UART_IRQHandler+0xee>
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	2b00      	cmp	r3, #0
 8003670:	d005      	beq.n	800367e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003676:	f043 0208 	orr.w	r2, r3, #8
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003682:	2b00      	cmp	r3, #0
 8003684:	d078      	beq.n	8003778 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	f003 0320 	and.w	r3, r3, #32
 800368c:	2b00      	cmp	r3, #0
 800368e:	d007      	beq.n	80036a0 <HAL_UART_IRQHandler+0x11c>
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	f003 0320 	and.w	r3, r3, #32
 8003696:	2b00      	cmp	r3, #0
 8003698:	d002      	beq.n	80036a0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 f926 	bl	80038ec <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036aa:	2b40      	cmp	r3, #64	; 0x40
 80036ac:	bf0c      	ite	eq
 80036ae:	2301      	moveq	r3, #1
 80036b0:	2300      	movne	r3, #0
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ba:	f003 0308 	and.w	r3, r3, #8
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d102      	bne.n	80036c8 <HAL_UART_IRQHandler+0x144>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d031      	beq.n	800372c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f000 f86f 	bl	80037ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	695b      	ldr	r3, [r3, #20]
 80036d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d8:	2b40      	cmp	r3, #64	; 0x40
 80036da:	d123      	bne.n	8003724 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	695a      	ldr	r2, [r3, #20]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036ea:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d013      	beq.n	800371c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036f8:	4a21      	ldr	r2, [pc, #132]	; (8003780 <HAL_UART_IRQHandler+0x1fc>)
 80036fa:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003700:	4618      	mov	r0, r3
 8003702:	f7fe fb65 	bl	8001dd0 <HAL_DMA_Abort_IT>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d016      	beq.n	800373a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003710:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003716:	4610      	mov	r0, r2
 8003718:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800371a:	e00e      	b.n	800373a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f000 f83b 	bl	8003798 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003722:	e00a      	b.n	800373a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f000 f837 	bl	8003798 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800372a:	e006      	b.n	800373a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f000 f833 	bl	8003798 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003738:	e01e      	b.n	8003778 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800373a:	bf00      	nop
    return;
 800373c:	e01c      	b.n	8003778 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003744:	2b00      	cmp	r3, #0
 8003746:	d008      	beq.n	800375a <HAL_UART_IRQHandler+0x1d6>
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800374e:	2b00      	cmp	r3, #0
 8003750:	d003      	beq.n	800375a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 f85c 	bl	8003810 <UART_Transmit_IT>
    return;
 8003758:	e00f      	b.n	800377a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003760:	2b00      	cmp	r3, #0
 8003762:	d00a      	beq.n	800377a <HAL_UART_IRQHandler+0x1f6>
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800376a:	2b00      	cmp	r3, #0
 800376c:	d005      	beq.n	800377a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 f8a4 	bl	80038bc <UART_EndTransmit_IT>
    return;
 8003774:	bf00      	nop
 8003776:	e000      	b.n	800377a <HAL_UART_IRQHandler+0x1f6>
    return;
 8003778:	bf00      	nop
  }
}
 800377a:	3720      	adds	r7, #32
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	080037e9 	.word	0x080037e9

08003784 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800378c:	bf00      	nop
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80037a0:	bf00      	nop
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68da      	ldr	r2, [r3, #12]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80037c2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	695a      	ldr	r2, [r3, #20]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f022 0201 	bic.w	r2, r2, #1
 80037d2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2220      	movs	r2, #32
 80037d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80037dc:	bf00      	nop
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr

080037e8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003802:	68f8      	ldr	r0, [r7, #12]
 8003804:	f7ff ffc8 	bl	8003798 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003808:	bf00      	nop
 800380a:	3710      	adds	r7, #16
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003810:	b480      	push	{r7}
 8003812:	b085      	sub	sp, #20
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800381e:	b2db      	uxtb	r3, r3
 8003820:	2b21      	cmp	r3, #33	; 0x21
 8003822:	d144      	bne.n	80038ae <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800382c:	d11a      	bne.n	8003864 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a1b      	ldr	r3, [r3, #32]
 8003832:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	881b      	ldrh	r3, [r3, #0]
 8003838:	461a      	mov	r2, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003842:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d105      	bne.n	8003858 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a1b      	ldr	r3, [r3, #32]
 8003850:	1c9a      	adds	r2, r3, #2
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	621a      	str	r2, [r3, #32]
 8003856:	e00e      	b.n	8003876 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a1b      	ldr	r3, [r3, #32]
 800385c:	1c5a      	adds	r2, r3, #1
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	621a      	str	r2, [r3, #32]
 8003862:	e008      	b.n	8003876 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a1b      	ldr	r3, [r3, #32]
 8003868:	1c59      	adds	r1, r3, #1
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	6211      	str	r1, [r2, #32]
 800386e:	781a      	ldrb	r2, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800387a:	b29b      	uxth	r3, r3
 800387c:	3b01      	subs	r3, #1
 800387e:	b29b      	uxth	r3, r3
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	4619      	mov	r1, r3
 8003884:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003886:	2b00      	cmp	r3, #0
 8003888:	d10f      	bne.n	80038aa <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68da      	ldr	r2, [r3, #12]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003898:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68da      	ldr	r2, [r3, #12]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038a8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80038aa:	2300      	movs	r3, #0
 80038ac:	e000      	b.n	80038b0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80038ae:	2302      	movs	r3, #2
  }
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3714      	adds	r7, #20
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68da      	ldr	r2, [r3, #12]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038d2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2220      	movs	r2, #32
 80038d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f7ff ff51 	bl	8003784 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3708      	adds	r7, #8
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	2b22      	cmp	r3, #34	; 0x22
 80038fe:	d171      	bne.n	80039e4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003908:	d123      	bne.n	8003952 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d10e      	bne.n	8003936 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	b29b      	uxth	r3, r3
 8003920:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003924:	b29a      	uxth	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800392e:	1c9a      	adds	r2, r3, #2
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	629a      	str	r2, [r3, #40]	; 0x28
 8003934:	e029      	b.n	800398a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	b29b      	uxth	r3, r3
 800393e:	b2db      	uxtb	r3, r3
 8003940:	b29a      	uxth	r2, r3
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800394a:	1c5a      	adds	r2, r3, #1
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	629a      	str	r2, [r3, #40]	; 0x28
 8003950:	e01b      	b.n	800398a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d10a      	bne.n	8003970 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	6858      	ldr	r0, [r3, #4]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003964:	1c59      	adds	r1, r3, #1
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	6291      	str	r1, [r2, #40]	; 0x28
 800396a:	b2c2      	uxtb	r2, r0
 800396c:	701a      	strb	r2, [r3, #0]
 800396e:	e00c      	b.n	800398a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	b2da      	uxtb	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800397c:	1c58      	adds	r0, r3, #1
 800397e:	6879      	ldr	r1, [r7, #4]
 8003980:	6288      	str	r0, [r1, #40]	; 0x28
 8003982:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003986:	b2d2      	uxtb	r2, r2
 8003988:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800398e:	b29b      	uxth	r3, r3
 8003990:	3b01      	subs	r3, #1
 8003992:	b29b      	uxth	r3, r3
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	4619      	mov	r1, r3
 8003998:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800399a:	2b00      	cmp	r3, #0
 800399c:	d120      	bne.n	80039e0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68da      	ldr	r2, [r3, #12]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f022 0220 	bic.w	r2, r2, #32
 80039ac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68da      	ldr	r2, [r3, #12]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039bc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	695a      	ldr	r2, [r3, #20]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f022 0201 	bic.w	r2, r2, #1
 80039cc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2220      	movs	r2, #32
 80039d2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f7fc ffea 	bl	80009b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80039dc:	2300      	movs	r3, #0
 80039de:	e002      	b.n	80039e6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80039e0:	2300      	movs	r3, #0
 80039e2:	e000      	b.n	80039e6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80039e4:	2302      	movs	r3, #2
  }
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3710      	adds	r7, #16
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
	...

080039f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039f4:	b085      	sub	sp, #20
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	691b      	ldr	r3, [r3, #16]
 8003a00:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	68da      	ldr	r2, [r3, #12]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689a      	ldr	r2, [r3, #8]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	691b      	ldr	r3, [r3, #16]
 8003a18:	431a      	orrs	r2, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	431a      	orrs	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	69db      	ldr	r3, [r3, #28]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003a32:	f023 030c 	bic.w	r3, r3, #12
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	6812      	ldr	r2, [r2, #0]
 8003a3a:	68f9      	ldr	r1, [r7, #12]
 8003a3c:	430b      	orrs	r3, r1
 8003a3e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	695b      	ldr	r3, [r3, #20]
 8003a46:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	699a      	ldr	r2, [r3, #24]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	430a      	orrs	r2, r1
 8003a54:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	69db      	ldr	r3, [r3, #28]
 8003a5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a5e:	f040 818b 	bne.w	8003d78 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4ac1      	ldr	r2, [pc, #772]	; (8003d6c <UART_SetConfig+0x37c>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d005      	beq.n	8003a78 <UART_SetConfig+0x88>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4abf      	ldr	r2, [pc, #764]	; (8003d70 <UART_SetConfig+0x380>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	f040 80bd 	bne.w	8003bf2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a78:	f7ff fa38 	bl	8002eec <HAL_RCC_GetPCLK2Freq>
 8003a7c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	461d      	mov	r5, r3
 8003a82:	f04f 0600 	mov.w	r6, #0
 8003a86:	46a8      	mov	r8, r5
 8003a88:	46b1      	mov	r9, r6
 8003a8a:	eb18 0308 	adds.w	r3, r8, r8
 8003a8e:	eb49 0409 	adc.w	r4, r9, r9
 8003a92:	4698      	mov	r8, r3
 8003a94:	46a1      	mov	r9, r4
 8003a96:	eb18 0805 	adds.w	r8, r8, r5
 8003a9a:	eb49 0906 	adc.w	r9, r9, r6
 8003a9e:	f04f 0100 	mov.w	r1, #0
 8003aa2:	f04f 0200 	mov.w	r2, #0
 8003aa6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003aaa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003aae:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003ab2:	4688      	mov	r8, r1
 8003ab4:	4691      	mov	r9, r2
 8003ab6:	eb18 0005 	adds.w	r0, r8, r5
 8003aba:	eb49 0106 	adc.w	r1, r9, r6
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	461d      	mov	r5, r3
 8003ac4:	f04f 0600 	mov.w	r6, #0
 8003ac8:	196b      	adds	r3, r5, r5
 8003aca:	eb46 0406 	adc.w	r4, r6, r6
 8003ace:	461a      	mov	r2, r3
 8003ad0:	4623      	mov	r3, r4
 8003ad2:	f7fc fb85 	bl	80001e0 <__aeabi_uldivmod>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	460c      	mov	r4, r1
 8003ada:	461a      	mov	r2, r3
 8003adc:	4ba5      	ldr	r3, [pc, #660]	; (8003d74 <UART_SetConfig+0x384>)
 8003ade:	fba3 2302 	umull	r2, r3, r3, r2
 8003ae2:	095b      	lsrs	r3, r3, #5
 8003ae4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	461d      	mov	r5, r3
 8003aec:	f04f 0600 	mov.w	r6, #0
 8003af0:	46a9      	mov	r9, r5
 8003af2:	46b2      	mov	sl, r6
 8003af4:	eb19 0309 	adds.w	r3, r9, r9
 8003af8:	eb4a 040a 	adc.w	r4, sl, sl
 8003afc:	4699      	mov	r9, r3
 8003afe:	46a2      	mov	sl, r4
 8003b00:	eb19 0905 	adds.w	r9, r9, r5
 8003b04:	eb4a 0a06 	adc.w	sl, sl, r6
 8003b08:	f04f 0100 	mov.w	r1, #0
 8003b0c:	f04f 0200 	mov.w	r2, #0
 8003b10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b14:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b18:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b1c:	4689      	mov	r9, r1
 8003b1e:	4692      	mov	sl, r2
 8003b20:	eb19 0005 	adds.w	r0, r9, r5
 8003b24:	eb4a 0106 	adc.w	r1, sl, r6
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	461d      	mov	r5, r3
 8003b2e:	f04f 0600 	mov.w	r6, #0
 8003b32:	196b      	adds	r3, r5, r5
 8003b34:	eb46 0406 	adc.w	r4, r6, r6
 8003b38:	461a      	mov	r2, r3
 8003b3a:	4623      	mov	r3, r4
 8003b3c:	f7fc fb50 	bl	80001e0 <__aeabi_uldivmod>
 8003b40:	4603      	mov	r3, r0
 8003b42:	460c      	mov	r4, r1
 8003b44:	461a      	mov	r2, r3
 8003b46:	4b8b      	ldr	r3, [pc, #556]	; (8003d74 <UART_SetConfig+0x384>)
 8003b48:	fba3 1302 	umull	r1, r3, r3, r2
 8003b4c:	095b      	lsrs	r3, r3, #5
 8003b4e:	2164      	movs	r1, #100	; 0x64
 8003b50:	fb01 f303 	mul.w	r3, r1, r3
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	00db      	lsls	r3, r3, #3
 8003b58:	3332      	adds	r3, #50	; 0x32
 8003b5a:	4a86      	ldr	r2, [pc, #536]	; (8003d74 <UART_SetConfig+0x384>)
 8003b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b60:	095b      	lsrs	r3, r3, #5
 8003b62:	005b      	lsls	r3, r3, #1
 8003b64:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b68:	4498      	add	r8, r3
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	461d      	mov	r5, r3
 8003b6e:	f04f 0600 	mov.w	r6, #0
 8003b72:	46a9      	mov	r9, r5
 8003b74:	46b2      	mov	sl, r6
 8003b76:	eb19 0309 	adds.w	r3, r9, r9
 8003b7a:	eb4a 040a 	adc.w	r4, sl, sl
 8003b7e:	4699      	mov	r9, r3
 8003b80:	46a2      	mov	sl, r4
 8003b82:	eb19 0905 	adds.w	r9, r9, r5
 8003b86:	eb4a 0a06 	adc.w	sl, sl, r6
 8003b8a:	f04f 0100 	mov.w	r1, #0
 8003b8e:	f04f 0200 	mov.w	r2, #0
 8003b92:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b96:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b9a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b9e:	4689      	mov	r9, r1
 8003ba0:	4692      	mov	sl, r2
 8003ba2:	eb19 0005 	adds.w	r0, r9, r5
 8003ba6:	eb4a 0106 	adc.w	r1, sl, r6
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	461d      	mov	r5, r3
 8003bb0:	f04f 0600 	mov.w	r6, #0
 8003bb4:	196b      	adds	r3, r5, r5
 8003bb6:	eb46 0406 	adc.w	r4, r6, r6
 8003bba:	461a      	mov	r2, r3
 8003bbc:	4623      	mov	r3, r4
 8003bbe:	f7fc fb0f 	bl	80001e0 <__aeabi_uldivmod>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	460c      	mov	r4, r1
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	4b6a      	ldr	r3, [pc, #424]	; (8003d74 <UART_SetConfig+0x384>)
 8003bca:	fba3 1302 	umull	r1, r3, r3, r2
 8003bce:	095b      	lsrs	r3, r3, #5
 8003bd0:	2164      	movs	r1, #100	; 0x64
 8003bd2:	fb01 f303 	mul.w	r3, r1, r3
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	00db      	lsls	r3, r3, #3
 8003bda:	3332      	adds	r3, #50	; 0x32
 8003bdc:	4a65      	ldr	r2, [pc, #404]	; (8003d74 <UART_SetConfig+0x384>)
 8003bde:	fba2 2303 	umull	r2, r3, r2, r3
 8003be2:	095b      	lsrs	r3, r3, #5
 8003be4:	f003 0207 	and.w	r2, r3, #7
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4442      	add	r2, r8
 8003bee:	609a      	str	r2, [r3, #8]
 8003bf0:	e26f      	b.n	80040d2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003bf2:	f7ff f967 	bl	8002ec4 <HAL_RCC_GetPCLK1Freq>
 8003bf6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	461d      	mov	r5, r3
 8003bfc:	f04f 0600 	mov.w	r6, #0
 8003c00:	46a8      	mov	r8, r5
 8003c02:	46b1      	mov	r9, r6
 8003c04:	eb18 0308 	adds.w	r3, r8, r8
 8003c08:	eb49 0409 	adc.w	r4, r9, r9
 8003c0c:	4698      	mov	r8, r3
 8003c0e:	46a1      	mov	r9, r4
 8003c10:	eb18 0805 	adds.w	r8, r8, r5
 8003c14:	eb49 0906 	adc.w	r9, r9, r6
 8003c18:	f04f 0100 	mov.w	r1, #0
 8003c1c:	f04f 0200 	mov.w	r2, #0
 8003c20:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003c24:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003c28:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003c2c:	4688      	mov	r8, r1
 8003c2e:	4691      	mov	r9, r2
 8003c30:	eb18 0005 	adds.w	r0, r8, r5
 8003c34:	eb49 0106 	adc.w	r1, r9, r6
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	461d      	mov	r5, r3
 8003c3e:	f04f 0600 	mov.w	r6, #0
 8003c42:	196b      	adds	r3, r5, r5
 8003c44:	eb46 0406 	adc.w	r4, r6, r6
 8003c48:	461a      	mov	r2, r3
 8003c4a:	4623      	mov	r3, r4
 8003c4c:	f7fc fac8 	bl	80001e0 <__aeabi_uldivmod>
 8003c50:	4603      	mov	r3, r0
 8003c52:	460c      	mov	r4, r1
 8003c54:	461a      	mov	r2, r3
 8003c56:	4b47      	ldr	r3, [pc, #284]	; (8003d74 <UART_SetConfig+0x384>)
 8003c58:	fba3 2302 	umull	r2, r3, r3, r2
 8003c5c:	095b      	lsrs	r3, r3, #5
 8003c5e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	461d      	mov	r5, r3
 8003c66:	f04f 0600 	mov.w	r6, #0
 8003c6a:	46a9      	mov	r9, r5
 8003c6c:	46b2      	mov	sl, r6
 8003c6e:	eb19 0309 	adds.w	r3, r9, r9
 8003c72:	eb4a 040a 	adc.w	r4, sl, sl
 8003c76:	4699      	mov	r9, r3
 8003c78:	46a2      	mov	sl, r4
 8003c7a:	eb19 0905 	adds.w	r9, r9, r5
 8003c7e:	eb4a 0a06 	adc.w	sl, sl, r6
 8003c82:	f04f 0100 	mov.w	r1, #0
 8003c86:	f04f 0200 	mov.w	r2, #0
 8003c8a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c8e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c92:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c96:	4689      	mov	r9, r1
 8003c98:	4692      	mov	sl, r2
 8003c9a:	eb19 0005 	adds.w	r0, r9, r5
 8003c9e:	eb4a 0106 	adc.w	r1, sl, r6
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	461d      	mov	r5, r3
 8003ca8:	f04f 0600 	mov.w	r6, #0
 8003cac:	196b      	adds	r3, r5, r5
 8003cae:	eb46 0406 	adc.w	r4, r6, r6
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	4623      	mov	r3, r4
 8003cb6:	f7fc fa93 	bl	80001e0 <__aeabi_uldivmod>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	460c      	mov	r4, r1
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	4b2c      	ldr	r3, [pc, #176]	; (8003d74 <UART_SetConfig+0x384>)
 8003cc2:	fba3 1302 	umull	r1, r3, r3, r2
 8003cc6:	095b      	lsrs	r3, r3, #5
 8003cc8:	2164      	movs	r1, #100	; 0x64
 8003cca:	fb01 f303 	mul.w	r3, r1, r3
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	00db      	lsls	r3, r3, #3
 8003cd2:	3332      	adds	r3, #50	; 0x32
 8003cd4:	4a27      	ldr	r2, [pc, #156]	; (8003d74 <UART_SetConfig+0x384>)
 8003cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cda:	095b      	lsrs	r3, r3, #5
 8003cdc:	005b      	lsls	r3, r3, #1
 8003cde:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ce2:	4498      	add	r8, r3
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	461d      	mov	r5, r3
 8003ce8:	f04f 0600 	mov.w	r6, #0
 8003cec:	46a9      	mov	r9, r5
 8003cee:	46b2      	mov	sl, r6
 8003cf0:	eb19 0309 	adds.w	r3, r9, r9
 8003cf4:	eb4a 040a 	adc.w	r4, sl, sl
 8003cf8:	4699      	mov	r9, r3
 8003cfa:	46a2      	mov	sl, r4
 8003cfc:	eb19 0905 	adds.w	r9, r9, r5
 8003d00:	eb4a 0a06 	adc.w	sl, sl, r6
 8003d04:	f04f 0100 	mov.w	r1, #0
 8003d08:	f04f 0200 	mov.w	r2, #0
 8003d0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d10:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d14:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d18:	4689      	mov	r9, r1
 8003d1a:	4692      	mov	sl, r2
 8003d1c:	eb19 0005 	adds.w	r0, r9, r5
 8003d20:	eb4a 0106 	adc.w	r1, sl, r6
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	461d      	mov	r5, r3
 8003d2a:	f04f 0600 	mov.w	r6, #0
 8003d2e:	196b      	adds	r3, r5, r5
 8003d30:	eb46 0406 	adc.w	r4, r6, r6
 8003d34:	461a      	mov	r2, r3
 8003d36:	4623      	mov	r3, r4
 8003d38:	f7fc fa52 	bl	80001e0 <__aeabi_uldivmod>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	460c      	mov	r4, r1
 8003d40:	461a      	mov	r2, r3
 8003d42:	4b0c      	ldr	r3, [pc, #48]	; (8003d74 <UART_SetConfig+0x384>)
 8003d44:	fba3 1302 	umull	r1, r3, r3, r2
 8003d48:	095b      	lsrs	r3, r3, #5
 8003d4a:	2164      	movs	r1, #100	; 0x64
 8003d4c:	fb01 f303 	mul.w	r3, r1, r3
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	00db      	lsls	r3, r3, #3
 8003d54:	3332      	adds	r3, #50	; 0x32
 8003d56:	4a07      	ldr	r2, [pc, #28]	; (8003d74 <UART_SetConfig+0x384>)
 8003d58:	fba2 2303 	umull	r2, r3, r2, r3
 8003d5c:	095b      	lsrs	r3, r3, #5
 8003d5e:	f003 0207 	and.w	r2, r3, #7
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4442      	add	r2, r8
 8003d68:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003d6a:	e1b2      	b.n	80040d2 <UART_SetConfig+0x6e2>
 8003d6c:	40011000 	.word	0x40011000
 8003d70:	40011400 	.word	0x40011400
 8003d74:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4ad7      	ldr	r2, [pc, #860]	; (80040dc <UART_SetConfig+0x6ec>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d005      	beq.n	8003d8e <UART_SetConfig+0x39e>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4ad6      	ldr	r2, [pc, #856]	; (80040e0 <UART_SetConfig+0x6f0>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	f040 80d1 	bne.w	8003f30 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d8e:	f7ff f8ad 	bl	8002eec <HAL_RCC_GetPCLK2Freq>
 8003d92:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	469a      	mov	sl, r3
 8003d98:	f04f 0b00 	mov.w	fp, #0
 8003d9c:	46d0      	mov	r8, sl
 8003d9e:	46d9      	mov	r9, fp
 8003da0:	eb18 0308 	adds.w	r3, r8, r8
 8003da4:	eb49 0409 	adc.w	r4, r9, r9
 8003da8:	4698      	mov	r8, r3
 8003daa:	46a1      	mov	r9, r4
 8003dac:	eb18 080a 	adds.w	r8, r8, sl
 8003db0:	eb49 090b 	adc.w	r9, r9, fp
 8003db4:	f04f 0100 	mov.w	r1, #0
 8003db8:	f04f 0200 	mov.w	r2, #0
 8003dbc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003dc0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003dc4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003dc8:	4688      	mov	r8, r1
 8003dca:	4691      	mov	r9, r2
 8003dcc:	eb1a 0508 	adds.w	r5, sl, r8
 8003dd0:	eb4b 0609 	adc.w	r6, fp, r9
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	4619      	mov	r1, r3
 8003dda:	f04f 0200 	mov.w	r2, #0
 8003dde:	f04f 0300 	mov.w	r3, #0
 8003de2:	f04f 0400 	mov.w	r4, #0
 8003de6:	0094      	lsls	r4, r2, #2
 8003de8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003dec:	008b      	lsls	r3, r1, #2
 8003dee:	461a      	mov	r2, r3
 8003df0:	4623      	mov	r3, r4
 8003df2:	4628      	mov	r0, r5
 8003df4:	4631      	mov	r1, r6
 8003df6:	f7fc f9f3 	bl	80001e0 <__aeabi_uldivmod>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	460c      	mov	r4, r1
 8003dfe:	461a      	mov	r2, r3
 8003e00:	4bb8      	ldr	r3, [pc, #736]	; (80040e4 <UART_SetConfig+0x6f4>)
 8003e02:	fba3 2302 	umull	r2, r3, r3, r2
 8003e06:	095b      	lsrs	r3, r3, #5
 8003e08:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	469b      	mov	fp, r3
 8003e10:	f04f 0c00 	mov.w	ip, #0
 8003e14:	46d9      	mov	r9, fp
 8003e16:	46e2      	mov	sl, ip
 8003e18:	eb19 0309 	adds.w	r3, r9, r9
 8003e1c:	eb4a 040a 	adc.w	r4, sl, sl
 8003e20:	4699      	mov	r9, r3
 8003e22:	46a2      	mov	sl, r4
 8003e24:	eb19 090b 	adds.w	r9, r9, fp
 8003e28:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003e2c:	f04f 0100 	mov.w	r1, #0
 8003e30:	f04f 0200 	mov.w	r2, #0
 8003e34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e38:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e3c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e40:	4689      	mov	r9, r1
 8003e42:	4692      	mov	sl, r2
 8003e44:	eb1b 0509 	adds.w	r5, fp, r9
 8003e48:	eb4c 060a 	adc.w	r6, ip, sl
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	4619      	mov	r1, r3
 8003e52:	f04f 0200 	mov.w	r2, #0
 8003e56:	f04f 0300 	mov.w	r3, #0
 8003e5a:	f04f 0400 	mov.w	r4, #0
 8003e5e:	0094      	lsls	r4, r2, #2
 8003e60:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003e64:	008b      	lsls	r3, r1, #2
 8003e66:	461a      	mov	r2, r3
 8003e68:	4623      	mov	r3, r4
 8003e6a:	4628      	mov	r0, r5
 8003e6c:	4631      	mov	r1, r6
 8003e6e:	f7fc f9b7 	bl	80001e0 <__aeabi_uldivmod>
 8003e72:	4603      	mov	r3, r0
 8003e74:	460c      	mov	r4, r1
 8003e76:	461a      	mov	r2, r3
 8003e78:	4b9a      	ldr	r3, [pc, #616]	; (80040e4 <UART_SetConfig+0x6f4>)
 8003e7a:	fba3 1302 	umull	r1, r3, r3, r2
 8003e7e:	095b      	lsrs	r3, r3, #5
 8003e80:	2164      	movs	r1, #100	; 0x64
 8003e82:	fb01 f303 	mul.w	r3, r1, r3
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	011b      	lsls	r3, r3, #4
 8003e8a:	3332      	adds	r3, #50	; 0x32
 8003e8c:	4a95      	ldr	r2, [pc, #596]	; (80040e4 <UART_SetConfig+0x6f4>)
 8003e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e92:	095b      	lsrs	r3, r3, #5
 8003e94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e98:	4498      	add	r8, r3
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	469b      	mov	fp, r3
 8003e9e:	f04f 0c00 	mov.w	ip, #0
 8003ea2:	46d9      	mov	r9, fp
 8003ea4:	46e2      	mov	sl, ip
 8003ea6:	eb19 0309 	adds.w	r3, r9, r9
 8003eaa:	eb4a 040a 	adc.w	r4, sl, sl
 8003eae:	4699      	mov	r9, r3
 8003eb0:	46a2      	mov	sl, r4
 8003eb2:	eb19 090b 	adds.w	r9, r9, fp
 8003eb6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003eba:	f04f 0100 	mov.w	r1, #0
 8003ebe:	f04f 0200 	mov.w	r2, #0
 8003ec2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ec6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003eca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ece:	4689      	mov	r9, r1
 8003ed0:	4692      	mov	sl, r2
 8003ed2:	eb1b 0509 	adds.w	r5, fp, r9
 8003ed6:	eb4c 060a 	adc.w	r6, ip, sl
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	4619      	mov	r1, r3
 8003ee0:	f04f 0200 	mov.w	r2, #0
 8003ee4:	f04f 0300 	mov.w	r3, #0
 8003ee8:	f04f 0400 	mov.w	r4, #0
 8003eec:	0094      	lsls	r4, r2, #2
 8003eee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003ef2:	008b      	lsls	r3, r1, #2
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	4623      	mov	r3, r4
 8003ef8:	4628      	mov	r0, r5
 8003efa:	4631      	mov	r1, r6
 8003efc:	f7fc f970 	bl	80001e0 <__aeabi_uldivmod>
 8003f00:	4603      	mov	r3, r0
 8003f02:	460c      	mov	r4, r1
 8003f04:	461a      	mov	r2, r3
 8003f06:	4b77      	ldr	r3, [pc, #476]	; (80040e4 <UART_SetConfig+0x6f4>)
 8003f08:	fba3 1302 	umull	r1, r3, r3, r2
 8003f0c:	095b      	lsrs	r3, r3, #5
 8003f0e:	2164      	movs	r1, #100	; 0x64
 8003f10:	fb01 f303 	mul.w	r3, r1, r3
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	011b      	lsls	r3, r3, #4
 8003f18:	3332      	adds	r3, #50	; 0x32
 8003f1a:	4a72      	ldr	r2, [pc, #456]	; (80040e4 <UART_SetConfig+0x6f4>)
 8003f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f20:	095b      	lsrs	r3, r3, #5
 8003f22:	f003 020f 	and.w	r2, r3, #15
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4442      	add	r2, r8
 8003f2c:	609a      	str	r2, [r3, #8]
 8003f2e:	e0d0      	b.n	80040d2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f30:	f7fe ffc8 	bl	8002ec4 <HAL_RCC_GetPCLK1Freq>
 8003f34:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	469a      	mov	sl, r3
 8003f3a:	f04f 0b00 	mov.w	fp, #0
 8003f3e:	46d0      	mov	r8, sl
 8003f40:	46d9      	mov	r9, fp
 8003f42:	eb18 0308 	adds.w	r3, r8, r8
 8003f46:	eb49 0409 	adc.w	r4, r9, r9
 8003f4a:	4698      	mov	r8, r3
 8003f4c:	46a1      	mov	r9, r4
 8003f4e:	eb18 080a 	adds.w	r8, r8, sl
 8003f52:	eb49 090b 	adc.w	r9, r9, fp
 8003f56:	f04f 0100 	mov.w	r1, #0
 8003f5a:	f04f 0200 	mov.w	r2, #0
 8003f5e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003f62:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003f66:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003f6a:	4688      	mov	r8, r1
 8003f6c:	4691      	mov	r9, r2
 8003f6e:	eb1a 0508 	adds.w	r5, sl, r8
 8003f72:	eb4b 0609 	adc.w	r6, fp, r9
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	f04f 0200 	mov.w	r2, #0
 8003f80:	f04f 0300 	mov.w	r3, #0
 8003f84:	f04f 0400 	mov.w	r4, #0
 8003f88:	0094      	lsls	r4, r2, #2
 8003f8a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f8e:	008b      	lsls	r3, r1, #2
 8003f90:	461a      	mov	r2, r3
 8003f92:	4623      	mov	r3, r4
 8003f94:	4628      	mov	r0, r5
 8003f96:	4631      	mov	r1, r6
 8003f98:	f7fc f922 	bl	80001e0 <__aeabi_uldivmod>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	460c      	mov	r4, r1
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	4b50      	ldr	r3, [pc, #320]	; (80040e4 <UART_SetConfig+0x6f4>)
 8003fa4:	fba3 2302 	umull	r2, r3, r3, r2
 8003fa8:	095b      	lsrs	r3, r3, #5
 8003faa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	469b      	mov	fp, r3
 8003fb2:	f04f 0c00 	mov.w	ip, #0
 8003fb6:	46d9      	mov	r9, fp
 8003fb8:	46e2      	mov	sl, ip
 8003fba:	eb19 0309 	adds.w	r3, r9, r9
 8003fbe:	eb4a 040a 	adc.w	r4, sl, sl
 8003fc2:	4699      	mov	r9, r3
 8003fc4:	46a2      	mov	sl, r4
 8003fc6:	eb19 090b 	adds.w	r9, r9, fp
 8003fca:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003fce:	f04f 0100 	mov.w	r1, #0
 8003fd2:	f04f 0200 	mov.w	r2, #0
 8003fd6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fda:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003fde:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003fe2:	4689      	mov	r9, r1
 8003fe4:	4692      	mov	sl, r2
 8003fe6:	eb1b 0509 	adds.w	r5, fp, r9
 8003fea:	eb4c 060a 	adc.w	r6, ip, sl
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	f04f 0200 	mov.w	r2, #0
 8003ff8:	f04f 0300 	mov.w	r3, #0
 8003ffc:	f04f 0400 	mov.w	r4, #0
 8004000:	0094      	lsls	r4, r2, #2
 8004002:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004006:	008b      	lsls	r3, r1, #2
 8004008:	461a      	mov	r2, r3
 800400a:	4623      	mov	r3, r4
 800400c:	4628      	mov	r0, r5
 800400e:	4631      	mov	r1, r6
 8004010:	f7fc f8e6 	bl	80001e0 <__aeabi_uldivmod>
 8004014:	4603      	mov	r3, r0
 8004016:	460c      	mov	r4, r1
 8004018:	461a      	mov	r2, r3
 800401a:	4b32      	ldr	r3, [pc, #200]	; (80040e4 <UART_SetConfig+0x6f4>)
 800401c:	fba3 1302 	umull	r1, r3, r3, r2
 8004020:	095b      	lsrs	r3, r3, #5
 8004022:	2164      	movs	r1, #100	; 0x64
 8004024:	fb01 f303 	mul.w	r3, r1, r3
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	011b      	lsls	r3, r3, #4
 800402c:	3332      	adds	r3, #50	; 0x32
 800402e:	4a2d      	ldr	r2, [pc, #180]	; (80040e4 <UART_SetConfig+0x6f4>)
 8004030:	fba2 2303 	umull	r2, r3, r2, r3
 8004034:	095b      	lsrs	r3, r3, #5
 8004036:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800403a:	4498      	add	r8, r3
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	469b      	mov	fp, r3
 8004040:	f04f 0c00 	mov.w	ip, #0
 8004044:	46d9      	mov	r9, fp
 8004046:	46e2      	mov	sl, ip
 8004048:	eb19 0309 	adds.w	r3, r9, r9
 800404c:	eb4a 040a 	adc.w	r4, sl, sl
 8004050:	4699      	mov	r9, r3
 8004052:	46a2      	mov	sl, r4
 8004054:	eb19 090b 	adds.w	r9, r9, fp
 8004058:	eb4a 0a0c 	adc.w	sl, sl, ip
 800405c:	f04f 0100 	mov.w	r1, #0
 8004060:	f04f 0200 	mov.w	r2, #0
 8004064:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004068:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800406c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004070:	4689      	mov	r9, r1
 8004072:	4692      	mov	sl, r2
 8004074:	eb1b 0509 	adds.w	r5, fp, r9
 8004078:	eb4c 060a 	adc.w	r6, ip, sl
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	4619      	mov	r1, r3
 8004082:	f04f 0200 	mov.w	r2, #0
 8004086:	f04f 0300 	mov.w	r3, #0
 800408a:	f04f 0400 	mov.w	r4, #0
 800408e:	0094      	lsls	r4, r2, #2
 8004090:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004094:	008b      	lsls	r3, r1, #2
 8004096:	461a      	mov	r2, r3
 8004098:	4623      	mov	r3, r4
 800409a:	4628      	mov	r0, r5
 800409c:	4631      	mov	r1, r6
 800409e:	f7fc f89f 	bl	80001e0 <__aeabi_uldivmod>
 80040a2:	4603      	mov	r3, r0
 80040a4:	460c      	mov	r4, r1
 80040a6:	461a      	mov	r2, r3
 80040a8:	4b0e      	ldr	r3, [pc, #56]	; (80040e4 <UART_SetConfig+0x6f4>)
 80040aa:	fba3 1302 	umull	r1, r3, r3, r2
 80040ae:	095b      	lsrs	r3, r3, #5
 80040b0:	2164      	movs	r1, #100	; 0x64
 80040b2:	fb01 f303 	mul.w	r3, r1, r3
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	011b      	lsls	r3, r3, #4
 80040ba:	3332      	adds	r3, #50	; 0x32
 80040bc:	4a09      	ldr	r2, [pc, #36]	; (80040e4 <UART_SetConfig+0x6f4>)
 80040be:	fba2 2303 	umull	r2, r3, r2, r3
 80040c2:	095b      	lsrs	r3, r3, #5
 80040c4:	f003 020f 	and.w	r2, r3, #15
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4442      	add	r2, r8
 80040ce:	609a      	str	r2, [r3, #8]
}
 80040d0:	e7ff      	b.n	80040d2 <UART_SetConfig+0x6e2>
 80040d2:	bf00      	nop
 80040d4:	3714      	adds	r7, #20
 80040d6:	46bd      	mov	sp, r7
 80040d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040dc:	40011000 	.word	0x40011000
 80040e0:	40011400 	.word	0x40011400
 80040e4:	51eb851f 	.word	0x51eb851f

080040e8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b085      	sub	sp, #20
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	4603      	mov	r3, r0
 80040f0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80040f2:	2300      	movs	r3, #0
 80040f4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80040f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040fa:	2b84      	cmp	r3, #132	; 0x84
 80040fc:	d005      	beq.n	800410a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80040fe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	4413      	add	r3, r2
 8004106:	3303      	adds	r3, #3
 8004108:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800410a:	68fb      	ldr	r3, [r7, #12]
}
 800410c:	4618      	mov	r0, r3
 800410e:	3714      	adds	r7, #20
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800411e:	f3ef 8305 	mrs	r3, IPSR
 8004122:	607b      	str	r3, [r7, #4]
  return(result);
 8004124:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004126:	2b00      	cmp	r3, #0
 8004128:	bf14      	ite	ne
 800412a:	2301      	movne	r3, #1
 800412c:	2300      	moveq	r3, #0
 800412e:	b2db      	uxtb	r3, r3
}
 8004130:	4618      	mov	r0, r3
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004140:	f001 f9f6 	bl	8005530 <vTaskStartScheduler>
  
  return osOK;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	bd80      	pop	{r7, pc}

0800414a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800414a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800414c:	b089      	sub	sp, #36	; 0x24
 800414e:	af04      	add	r7, sp, #16
 8004150:	6078      	str	r0, [r7, #4]
 8004152:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	695b      	ldr	r3, [r3, #20]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d020      	beq.n	800419e <osThreadCreate+0x54>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	699b      	ldr	r3, [r3, #24]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d01c      	beq.n	800419e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685c      	ldr	r4, [r3, #4]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681d      	ldr	r5, [r3, #0]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	691e      	ldr	r6, [r3, #16]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004176:	4618      	mov	r0, r3
 8004178:	f7ff ffb6 	bl	80040e8 <makeFreeRtosPriority>
 800417c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	695b      	ldr	r3, [r3, #20]
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004186:	9202      	str	r2, [sp, #8]
 8004188:	9301      	str	r3, [sp, #4]
 800418a:	9100      	str	r1, [sp, #0]
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	4632      	mov	r2, r6
 8004190:	4629      	mov	r1, r5
 8004192:	4620      	mov	r0, r4
 8004194:	f001 f811 	bl	80051ba <xTaskCreateStatic>
 8004198:	4603      	mov	r3, r0
 800419a:	60fb      	str	r3, [r7, #12]
 800419c:	e01c      	b.n	80041d8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685c      	ldr	r4, [r3, #4]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80041aa:	b29e      	uxth	r6, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80041b2:	4618      	mov	r0, r3
 80041b4:	f7ff ff98 	bl	80040e8 <makeFreeRtosPriority>
 80041b8:	4602      	mov	r2, r0
 80041ba:	f107 030c 	add.w	r3, r7, #12
 80041be:	9301      	str	r3, [sp, #4]
 80041c0:	9200      	str	r2, [sp, #0]
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	4632      	mov	r2, r6
 80041c6:	4629      	mov	r1, r5
 80041c8:	4620      	mov	r0, r4
 80041ca:	f001 f84f 	bl	800526c <xTaskCreate>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d001      	beq.n	80041d8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80041d4:	2300      	movs	r3, #0
 80041d6:	e000      	b.n	80041da <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80041d8:	68fb      	ldr	r3, [r7, #12]
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3714      	adds	r7, #20
 80041de:	46bd      	mov	sp, r7
 80041e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080041e2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80041e2:	b580      	push	{r7, lr}
 80041e4:	b084      	sub	sp, #16
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d001      	beq.n	80041f8 <osDelay+0x16>
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	e000      	b.n	80041fa <osDelay+0x18>
 80041f8:	2301      	movs	r3, #1
 80041fa:	4618      	mov	r0, r3
 80041fc:	f001 f964 	bl	80054c8 <vTaskDelay>
  
  return osOK;
 8004200:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004202:	4618      	mov	r0, r3
 8004204:	3710      	adds	r7, #16
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}

0800420a <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800420a:	b580      	push	{r7, lr}
 800420c:	b086      	sub	sp, #24
 800420e:	af02      	add	r7, sp, #8
 8004210:	6078      	str	r0, [r7, #4]
 8004212:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d010      	beq.n	800423e <osSemaphoreCreate+0x34>
    if (count == 1) {
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	2b01      	cmp	r3, #1
 8004220:	d10b      	bne.n	800423a <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685a      	ldr	r2, [r3, #4]
 8004226:	2303      	movs	r3, #3
 8004228:	9300      	str	r3, [sp, #0]
 800422a:	4613      	mov	r3, r2
 800422c:	2200      	movs	r2, #0
 800422e:	2100      	movs	r1, #0
 8004230:	2001      	movs	r0, #1
 8004232:	f000 f9e7 	bl	8004604 <xQueueGenericCreateStatic>
 8004236:	4603      	mov	r3, r0
 8004238:	e016      	b.n	8004268 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800423a:	2300      	movs	r3, #0
 800423c:	e014      	b.n	8004268 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d110      	bne.n	8004266 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8004244:	2203      	movs	r2, #3
 8004246:	2100      	movs	r1, #0
 8004248:	2001      	movs	r0, #1
 800424a:	f000 fa4d 	bl	80046e8 <xQueueGenericCreate>
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d005      	beq.n	8004262 <osSemaphoreCreate+0x58>
 8004256:	2300      	movs	r3, #0
 8004258:	2200      	movs	r2, #0
 800425a:	2100      	movs	r1, #0
 800425c:	68f8      	ldr	r0, [r7, #12]
 800425e:	f000 fa9f 	bl	80047a0 <xQueueGenericSend>
      return sema;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	e000      	b.n	8004268 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8004266:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8004268:	4618      	mov	r0, r3
 800426a:	3710      	adds	r7, #16
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800427a:	2300      	movs	r3, #0
 800427c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d101      	bne.n	8004288 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8004284:	2380      	movs	r3, #128	; 0x80
 8004286:	e03a      	b.n	80042fe <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8004288:	2300      	movs	r3, #0
 800428a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004292:	d103      	bne.n	800429c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8004294:	f04f 33ff 	mov.w	r3, #4294967295
 8004298:	60fb      	str	r3, [r7, #12]
 800429a:	e009      	b.n	80042b0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d006      	beq.n	80042b0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d101      	bne.n	80042b0 <osSemaphoreWait+0x40>
      ticks = 1;
 80042ac:	2301      	movs	r3, #1
 80042ae:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80042b0:	f7ff ff32 	bl	8004118 <inHandlerMode>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d017      	beq.n	80042ea <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80042ba:	f107 0308 	add.w	r3, r7, #8
 80042be:	461a      	mov	r2, r3
 80042c0:	2100      	movs	r1, #0
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 fdd4 	bl	8004e70 <xQueueReceiveFromISR>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d001      	beq.n	80042d2 <osSemaphoreWait+0x62>
      return osErrorOS;
 80042ce:	23ff      	movs	r3, #255	; 0xff
 80042d0:	e015      	b.n	80042fe <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d011      	beq.n	80042fc <osSemaphoreWait+0x8c>
 80042d8:	4b0b      	ldr	r3, [pc, #44]	; (8004308 <osSemaphoreWait+0x98>)
 80042da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042de:	601a      	str	r2, [r3, #0]
 80042e0:	f3bf 8f4f 	dsb	sy
 80042e4:	f3bf 8f6f 	isb	sy
 80042e8:	e008      	b.n	80042fc <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80042ea:	68f9      	ldr	r1, [r7, #12]
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f000 fcb7 	bl	8004c60 <xQueueSemaphoreTake>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d001      	beq.n	80042fc <osSemaphoreWait+0x8c>
    return osErrorOS;
 80042f8:	23ff      	movs	r3, #255	; 0xff
 80042fa:	e000      	b.n	80042fe <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	e000ed04 	.word	0xe000ed04

0800430c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004314:	2300      	movs	r3, #0
 8004316:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004318:	2300      	movs	r3, #0
 800431a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800431c:	f7ff fefc 	bl	8004118 <inHandlerMode>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d016      	beq.n	8004354 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004326:	f107 0308 	add.w	r3, r7, #8
 800432a:	4619      	mov	r1, r3
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f000 fb31 	bl	8004994 <xQueueGiveFromISR>
 8004332:	4603      	mov	r3, r0
 8004334:	2b01      	cmp	r3, #1
 8004336:	d001      	beq.n	800433c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8004338:	23ff      	movs	r3, #255	; 0xff
 800433a:	e017      	b.n	800436c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d013      	beq.n	800436a <osSemaphoreRelease+0x5e>
 8004342:	4b0c      	ldr	r3, [pc, #48]	; (8004374 <osSemaphoreRelease+0x68>)
 8004344:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004348:	601a      	str	r2, [r3, #0]
 800434a:	f3bf 8f4f 	dsb	sy
 800434e:	f3bf 8f6f 	isb	sy
 8004352:	e00a      	b.n	800436a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8004354:	2300      	movs	r3, #0
 8004356:	2200      	movs	r2, #0
 8004358:	2100      	movs	r1, #0
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 fa20 	bl	80047a0 <xQueueGenericSend>
 8004360:	4603      	mov	r3, r0
 8004362:	2b01      	cmp	r3, #1
 8004364:	d001      	beq.n	800436a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8004366:	23ff      	movs	r3, #255	; 0xff
 8004368:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800436a:	68fb      	ldr	r3, [r7, #12]
}
 800436c:	4618      	mov	r0, r3
 800436e:	3710      	adds	r7, #16
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}
 8004374:	e000ed04 	.word	0xe000ed04

08004378 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8004378:	b590      	push	{r4, r7, lr}
 800437a:	b085      	sub	sp, #20
 800437c:	af02      	add	r7, sp, #8
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d012      	beq.n	80043b0 <osMessageCreate+0x38>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00e      	beq.n	80043b0 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6818      	ldr	r0, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6859      	ldr	r1, [r3, #4]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	689a      	ldr	r2, [r3, #8]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	68dc      	ldr	r4, [r3, #12]
 80043a2:	2300      	movs	r3, #0
 80043a4:	9300      	str	r3, [sp, #0]
 80043a6:	4623      	mov	r3, r4
 80043a8:	f000 f92c 	bl	8004604 <xQueueGenericCreateStatic>
 80043ac:	4603      	mov	r3, r0
 80043ae:	e008      	b.n	80043c2 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6818      	ldr	r0, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	4619      	mov	r1, r3
 80043bc:	f000 f994 	bl	80046e8 <xQueueGenericCreate>
 80043c0:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	370c      	adds	r7, #12
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd90      	pop	{r4, r7, pc}

080043ca <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80043ca:	b480      	push	{r7}
 80043cc:	b083      	sub	sp, #12
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f103 0208 	add.w	r2, r3, #8
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f04f 32ff 	mov.w	r2, #4294967295
 80043e2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f103 0208 	add.w	r2, r3, #8
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f103 0208 	add.w	r2, r3, #8
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80043fe:	bf00      	nop
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr

0800440a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800440a:	b480      	push	{r7}
 800440c:	b083      	sub	sp, #12
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004418:	bf00      	nop
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004424:	b480      	push	{r7}
 8004426:	b085      	sub	sp, #20
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	689a      	ldr	r2, [r3, #8]
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	683a      	ldr	r2, [r7, #0]
 8004448:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	683a      	ldr	r2, [r7, #0]
 800444e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	1c5a      	adds	r2, r3, #1
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	601a      	str	r2, [r3, #0]
}
 8004460:	bf00      	nop
 8004462:	3714      	adds	r7, #20
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800446c:	b480      	push	{r7}
 800446e:	b085      	sub	sp, #20
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004482:	d103      	bne.n	800448c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	60fb      	str	r3, [r7, #12]
 800448a:	e00c      	b.n	80044a6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	3308      	adds	r3, #8
 8004490:	60fb      	str	r3, [r7, #12]
 8004492:	e002      	b.n	800449a <vListInsert+0x2e>
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	60fb      	str	r3, [r7, #12]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68ba      	ldr	r2, [r7, #8]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d2f6      	bcs.n	8004494 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	685a      	ldr	r2, [r3, #4]
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	683a      	ldr	r2, [r7, #0]
 80044b4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	68fa      	ldr	r2, [r7, #12]
 80044ba:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	683a      	ldr	r2, [r7, #0]
 80044c0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	1c5a      	adds	r2, r3, #1
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	601a      	str	r2, [r3, #0]
}
 80044d2:	bf00      	nop
 80044d4:	3714      	adds	r7, #20
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr

080044de <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80044de:	b480      	push	{r7}
 80044e0:	b085      	sub	sp, #20
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	6892      	ldr	r2, [r2, #8]
 80044f4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	6852      	ldr	r2, [r2, #4]
 80044fe:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	429a      	cmp	r2, r3
 8004508:	d103      	bne.n	8004512 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	689a      	ldr	r2, [r3, #8]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	1e5a      	subs	r2, r3, #1
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
}
 8004526:	4618      	mov	r0, r3
 8004528:	3714      	adds	r7, #20
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr
	...

08004534 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d109      	bne.n	800455c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800454c:	f383 8811 	msr	BASEPRI, r3
 8004550:	f3bf 8f6f 	isb	sy
 8004554:	f3bf 8f4f 	dsb	sy
 8004558:	60bb      	str	r3, [r7, #8]
 800455a:	e7fe      	b.n	800455a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800455c:	f001 ff4e 	bl	80063fc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004568:	68f9      	ldr	r1, [r7, #12]
 800456a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800456c:	fb01 f303 	mul.w	r3, r1, r3
 8004570:	441a      	add	r2, r3
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2200      	movs	r2, #0
 800457a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800458c:	3b01      	subs	r3, #1
 800458e:	68f9      	ldr	r1, [r7, #12]
 8004590:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004592:	fb01 f303 	mul.w	r3, r1, r3
 8004596:	441a      	add	r2, r3
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	22ff      	movs	r2, #255	; 0xff
 80045a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	22ff      	movs	r2, #255	; 0xff
 80045a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d114      	bne.n	80045dc <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d01a      	beq.n	80045f0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	3310      	adds	r3, #16
 80045be:	4618      	mov	r0, r3
 80045c0:	f001 f9f8 	bl	80059b4 <xTaskRemoveFromEventList>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d012      	beq.n	80045f0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80045ca:	4b0d      	ldr	r3, [pc, #52]	; (8004600 <xQueueGenericReset+0xcc>)
 80045cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045d0:	601a      	str	r2, [r3, #0]
 80045d2:	f3bf 8f4f 	dsb	sy
 80045d6:	f3bf 8f6f 	isb	sy
 80045da:	e009      	b.n	80045f0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	3310      	adds	r3, #16
 80045e0:	4618      	mov	r0, r3
 80045e2:	f7ff fef2 	bl	80043ca <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	3324      	adds	r3, #36	; 0x24
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7ff feed 	bl	80043ca <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80045f0:	f001 ff32 	bl	8006458 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80045f4:	2301      	movs	r3, #1
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3710      	adds	r7, #16
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	e000ed04 	.word	0xe000ed04

08004604 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004604:	b580      	push	{r7, lr}
 8004606:	b08e      	sub	sp, #56	; 0x38
 8004608:	af02      	add	r7, sp, #8
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	607a      	str	r2, [r7, #4]
 8004610:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d109      	bne.n	800462c <xQueueGenericCreateStatic+0x28>
 8004618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800461c:	f383 8811 	msr	BASEPRI, r3
 8004620:	f3bf 8f6f 	isb	sy
 8004624:	f3bf 8f4f 	dsb	sy
 8004628:	62bb      	str	r3, [r7, #40]	; 0x28
 800462a:	e7fe      	b.n	800462a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d109      	bne.n	8004646 <xQueueGenericCreateStatic+0x42>
 8004632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004636:	f383 8811 	msr	BASEPRI, r3
 800463a:	f3bf 8f6f 	isb	sy
 800463e:	f3bf 8f4f 	dsb	sy
 8004642:	627b      	str	r3, [r7, #36]	; 0x24
 8004644:	e7fe      	b.n	8004644 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d002      	beq.n	8004652 <xQueueGenericCreateStatic+0x4e>
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d001      	beq.n	8004656 <xQueueGenericCreateStatic+0x52>
 8004652:	2301      	movs	r3, #1
 8004654:	e000      	b.n	8004658 <xQueueGenericCreateStatic+0x54>
 8004656:	2300      	movs	r3, #0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d109      	bne.n	8004670 <xQueueGenericCreateStatic+0x6c>
 800465c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004660:	f383 8811 	msr	BASEPRI, r3
 8004664:	f3bf 8f6f 	isb	sy
 8004668:	f3bf 8f4f 	dsb	sy
 800466c:	623b      	str	r3, [r7, #32]
 800466e:	e7fe      	b.n	800466e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d102      	bne.n	800467c <xQueueGenericCreateStatic+0x78>
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d101      	bne.n	8004680 <xQueueGenericCreateStatic+0x7c>
 800467c:	2301      	movs	r3, #1
 800467e:	e000      	b.n	8004682 <xQueueGenericCreateStatic+0x7e>
 8004680:	2300      	movs	r3, #0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d109      	bne.n	800469a <xQueueGenericCreateStatic+0x96>
 8004686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800468a:	f383 8811 	msr	BASEPRI, r3
 800468e:	f3bf 8f6f 	isb	sy
 8004692:	f3bf 8f4f 	dsb	sy
 8004696:	61fb      	str	r3, [r7, #28]
 8004698:	e7fe      	b.n	8004698 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800469a:	2348      	movs	r3, #72	; 0x48
 800469c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	2b48      	cmp	r3, #72	; 0x48
 80046a2:	d009      	beq.n	80046b8 <xQueueGenericCreateStatic+0xb4>
 80046a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a8:	f383 8811 	msr	BASEPRI, r3
 80046ac:	f3bf 8f6f 	isb	sy
 80046b0:	f3bf 8f4f 	dsb	sy
 80046b4:	61bb      	str	r3, [r7, #24]
 80046b6:	e7fe      	b.n	80046b6 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80046bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00d      	beq.n	80046de <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80046c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80046ca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80046ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d0:	9300      	str	r3, [sp, #0]
 80046d2:	4613      	mov	r3, r2
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	68b9      	ldr	r1, [r7, #8]
 80046d8:	68f8      	ldr	r0, [r7, #12]
 80046da:	f000 f842 	bl	8004762 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80046de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3730      	adds	r7, #48	; 0x30
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b08a      	sub	sp, #40	; 0x28
 80046ec:	af02      	add	r7, sp, #8
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	4613      	mov	r3, r2
 80046f4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d109      	bne.n	8004710 <xQueueGenericCreate+0x28>
 80046fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004700:	f383 8811 	msr	BASEPRI, r3
 8004704:	f3bf 8f6f 	isb	sy
 8004708:	f3bf 8f4f 	dsb	sy
 800470c:	613b      	str	r3, [r7, #16]
 800470e:	e7fe      	b.n	800470e <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d102      	bne.n	800471c <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004716:	2300      	movs	r3, #0
 8004718:	61fb      	str	r3, [r7, #28]
 800471a:	e004      	b.n	8004726 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	68ba      	ldr	r2, [r7, #8]
 8004720:	fb02 f303 	mul.w	r3, r2, r3
 8004724:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	3348      	adds	r3, #72	; 0x48
 800472a:	4618      	mov	r0, r3
 800472c:	f001 ff80 	bl	8006630 <pvPortMalloc>
 8004730:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d00f      	beq.n	8004758 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	3348      	adds	r3, #72	; 0x48
 800473c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004746:	79fa      	ldrb	r2, [r7, #7]
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	9300      	str	r3, [sp, #0]
 800474c:	4613      	mov	r3, r2
 800474e:	697a      	ldr	r2, [r7, #20]
 8004750:	68b9      	ldr	r1, [r7, #8]
 8004752:	68f8      	ldr	r0, [r7, #12]
 8004754:	f000 f805 	bl	8004762 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004758:	69bb      	ldr	r3, [r7, #24]
	}
 800475a:	4618      	mov	r0, r3
 800475c:	3720      	adds	r7, #32
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}

08004762 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004762:	b580      	push	{r7, lr}
 8004764:	b084      	sub	sp, #16
 8004766:	af00      	add	r7, sp, #0
 8004768:	60f8      	str	r0, [r7, #12]
 800476a:	60b9      	str	r1, [r7, #8]
 800476c:	607a      	str	r2, [r7, #4]
 800476e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d103      	bne.n	800477e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	69ba      	ldr	r2, [r7, #24]
 800477a:	601a      	str	r2, [r3, #0]
 800477c:	e002      	b.n	8004784 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	68fa      	ldr	r2, [r7, #12]
 8004788:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	68ba      	ldr	r2, [r7, #8]
 800478e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004790:	2101      	movs	r1, #1
 8004792:	69b8      	ldr	r0, [r7, #24]
 8004794:	f7ff fece 	bl	8004534 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004798:	bf00      	nop
 800479a:	3710      	adds	r7, #16
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}

080047a0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b08e      	sub	sp, #56	; 0x38
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	607a      	str	r2, [r7, #4]
 80047ac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80047ae:	2300      	movs	r3, #0
 80047b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80047b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d109      	bne.n	80047d0 <xQueueGenericSend+0x30>
 80047bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c0:	f383 8811 	msr	BASEPRI, r3
 80047c4:	f3bf 8f6f 	isb	sy
 80047c8:	f3bf 8f4f 	dsb	sy
 80047cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80047ce:	e7fe      	b.n	80047ce <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d103      	bne.n	80047de <xQueueGenericSend+0x3e>
 80047d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d101      	bne.n	80047e2 <xQueueGenericSend+0x42>
 80047de:	2301      	movs	r3, #1
 80047e0:	e000      	b.n	80047e4 <xQueueGenericSend+0x44>
 80047e2:	2300      	movs	r3, #0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d109      	bne.n	80047fc <xQueueGenericSend+0x5c>
 80047e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ec:	f383 8811 	msr	BASEPRI, r3
 80047f0:	f3bf 8f6f 	isb	sy
 80047f4:	f3bf 8f4f 	dsb	sy
 80047f8:	627b      	str	r3, [r7, #36]	; 0x24
 80047fa:	e7fe      	b.n	80047fa <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d103      	bne.n	800480a <xQueueGenericSend+0x6a>
 8004802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004806:	2b01      	cmp	r3, #1
 8004808:	d101      	bne.n	800480e <xQueueGenericSend+0x6e>
 800480a:	2301      	movs	r3, #1
 800480c:	e000      	b.n	8004810 <xQueueGenericSend+0x70>
 800480e:	2300      	movs	r3, #0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d109      	bne.n	8004828 <xQueueGenericSend+0x88>
 8004814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004818:	f383 8811 	msr	BASEPRI, r3
 800481c:	f3bf 8f6f 	isb	sy
 8004820:	f3bf 8f4f 	dsb	sy
 8004824:	623b      	str	r3, [r7, #32]
 8004826:	e7fe      	b.n	8004826 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004828:	f001 fa80 	bl	8005d2c <xTaskGetSchedulerState>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d102      	bne.n	8004838 <xQueueGenericSend+0x98>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d101      	bne.n	800483c <xQueueGenericSend+0x9c>
 8004838:	2301      	movs	r3, #1
 800483a:	e000      	b.n	800483e <xQueueGenericSend+0x9e>
 800483c:	2300      	movs	r3, #0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d109      	bne.n	8004856 <xQueueGenericSend+0xb6>
 8004842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004846:	f383 8811 	msr	BASEPRI, r3
 800484a:	f3bf 8f6f 	isb	sy
 800484e:	f3bf 8f4f 	dsb	sy
 8004852:	61fb      	str	r3, [r7, #28]
 8004854:	e7fe      	b.n	8004854 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004856:	f001 fdd1 	bl	80063fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800485a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800485c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800485e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004862:	429a      	cmp	r2, r3
 8004864:	d302      	bcc.n	800486c <xQueueGenericSend+0xcc>
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	2b02      	cmp	r3, #2
 800486a:	d129      	bne.n	80048c0 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800486c:	683a      	ldr	r2, [r7, #0]
 800486e:	68b9      	ldr	r1, [r7, #8]
 8004870:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004872:	f000 fb92 	bl	8004f9a <prvCopyDataToQueue>
 8004876:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800487a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487c:	2b00      	cmp	r3, #0
 800487e:	d010      	beq.n	80048a2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004882:	3324      	adds	r3, #36	; 0x24
 8004884:	4618      	mov	r0, r3
 8004886:	f001 f895 	bl	80059b4 <xTaskRemoveFromEventList>
 800488a:	4603      	mov	r3, r0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d013      	beq.n	80048b8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004890:	4b3f      	ldr	r3, [pc, #252]	; (8004990 <xQueueGenericSend+0x1f0>)
 8004892:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004896:	601a      	str	r2, [r3, #0]
 8004898:	f3bf 8f4f 	dsb	sy
 800489c:	f3bf 8f6f 	isb	sy
 80048a0:	e00a      	b.n	80048b8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80048a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d007      	beq.n	80048b8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80048a8:	4b39      	ldr	r3, [pc, #228]	; (8004990 <xQueueGenericSend+0x1f0>)
 80048aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048ae:	601a      	str	r2, [r3, #0]
 80048b0:	f3bf 8f4f 	dsb	sy
 80048b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80048b8:	f001 fdce 	bl	8006458 <vPortExitCritical>
				return pdPASS;
 80048bc:	2301      	movs	r3, #1
 80048be:	e063      	b.n	8004988 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d103      	bne.n	80048ce <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80048c6:	f001 fdc7 	bl	8006458 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80048ca:	2300      	movs	r3, #0
 80048cc:	e05c      	b.n	8004988 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80048ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d106      	bne.n	80048e2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80048d4:	f107 0314 	add.w	r3, r7, #20
 80048d8:	4618      	mov	r0, r3
 80048da:	f001 f8cd 	bl	8005a78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80048de:	2301      	movs	r3, #1
 80048e0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80048e2:	f001 fdb9 	bl	8006458 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80048e6:	f000 fe81 	bl	80055ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80048ea:	f001 fd87 	bl	80063fc <vPortEnterCritical>
 80048ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80048f4:	b25b      	sxtb	r3, r3
 80048f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048fa:	d103      	bne.n	8004904 <xQueueGenericSend+0x164>
 80048fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048fe:	2200      	movs	r2, #0
 8004900:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004906:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800490a:	b25b      	sxtb	r3, r3
 800490c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004910:	d103      	bne.n	800491a <xQueueGenericSend+0x17a>
 8004912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004914:	2200      	movs	r2, #0
 8004916:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800491a:	f001 fd9d 	bl	8006458 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800491e:	1d3a      	adds	r2, r7, #4
 8004920:	f107 0314 	add.w	r3, r7, #20
 8004924:	4611      	mov	r1, r2
 8004926:	4618      	mov	r0, r3
 8004928:	f001 f8bc 	bl	8005aa4 <xTaskCheckForTimeOut>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d124      	bne.n	800497c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004932:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004934:	f000 fc29 	bl	800518a <prvIsQueueFull>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d018      	beq.n	8004970 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800493e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004940:	3310      	adds	r3, #16
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	4611      	mov	r1, r2
 8004946:	4618      	mov	r0, r3
 8004948:	f001 f810 	bl	800596c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800494c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800494e:	f000 fbb4 	bl	80050ba <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004952:	f000 fe59 	bl	8005608 <xTaskResumeAll>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	f47f af7c 	bne.w	8004856 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800495e:	4b0c      	ldr	r3, [pc, #48]	; (8004990 <xQueueGenericSend+0x1f0>)
 8004960:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004964:	601a      	str	r2, [r3, #0]
 8004966:	f3bf 8f4f 	dsb	sy
 800496a:	f3bf 8f6f 	isb	sy
 800496e:	e772      	b.n	8004856 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004970:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004972:	f000 fba2 	bl	80050ba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004976:	f000 fe47 	bl	8005608 <xTaskResumeAll>
 800497a:	e76c      	b.n	8004856 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800497c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800497e:	f000 fb9c 	bl	80050ba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004982:	f000 fe41 	bl	8005608 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004986:	2300      	movs	r3, #0
		}
	}
}
 8004988:	4618      	mov	r0, r3
 800498a:	3738      	adds	r7, #56	; 0x38
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	e000ed04 	.word	0xe000ed04

08004994 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b08e      	sub	sp, #56	; 0x38
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80049a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d109      	bne.n	80049bc <xQueueGiveFromISR+0x28>
 80049a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ac:	f383 8811 	msr	BASEPRI, r3
 80049b0:	f3bf 8f6f 	isb	sy
 80049b4:	f3bf 8f4f 	dsb	sy
 80049b8:	623b      	str	r3, [r7, #32]
 80049ba:	e7fe      	b.n	80049ba <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80049bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d009      	beq.n	80049d8 <xQueueGiveFromISR+0x44>
 80049c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c8:	f383 8811 	msr	BASEPRI, r3
 80049cc:	f3bf 8f6f 	isb	sy
 80049d0:	f3bf 8f4f 	dsb	sy
 80049d4:	61fb      	str	r3, [r7, #28]
 80049d6:	e7fe      	b.n	80049d6 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80049d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d103      	bne.n	80049e8 <xQueueGiveFromISR+0x54>
 80049e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d101      	bne.n	80049ec <xQueueGiveFromISR+0x58>
 80049e8:	2301      	movs	r3, #1
 80049ea:	e000      	b.n	80049ee <xQueueGiveFromISR+0x5a>
 80049ec:	2300      	movs	r3, #0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d109      	bne.n	8004a06 <xQueueGiveFromISR+0x72>
 80049f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f6:	f383 8811 	msr	BASEPRI, r3
 80049fa:	f3bf 8f6f 	isb	sy
 80049fe:	f3bf 8f4f 	dsb	sy
 8004a02:	61bb      	str	r3, [r7, #24]
 8004a04:	e7fe      	b.n	8004a04 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004a06:	f001 fdd5 	bl	80065b4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004a0a:	f3ef 8211 	mrs	r2, BASEPRI
 8004a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a12:	f383 8811 	msr	BASEPRI, r3
 8004a16:	f3bf 8f6f 	isb	sy
 8004a1a:	f3bf 8f4f 	dsb	sy
 8004a1e:	617a      	str	r2, [r7, #20]
 8004a20:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004a22:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004a24:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a2a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d22b      	bcs.n	8004a8e <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a42:	1c5a      	adds	r2, r3, #1
 8004a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a46:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004a48:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a50:	d112      	bne.n	8004a78 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d016      	beq.n	8004a88 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a5c:	3324      	adds	r3, #36	; 0x24
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f000 ffa8 	bl	80059b4 <xTaskRemoveFromEventList>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00e      	beq.n	8004a88 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00b      	beq.n	8004a88 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	2201      	movs	r2, #1
 8004a74:	601a      	str	r2, [r3, #0]
 8004a76:	e007      	b.n	8004a88 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004a78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	b25a      	sxtb	r2, r3
 8004a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	637b      	str	r3, [r7, #52]	; 0x34
 8004a8c:	e001      	b.n	8004a92 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	637b      	str	r3, [r7, #52]	; 0x34
 8004a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a94:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3738      	adds	r7, #56	; 0x38
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
	...

08004aa8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b08c      	sub	sp, #48	; 0x30
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d109      	bne.n	8004ad6 <xQueueReceive+0x2e>
	__asm volatile
 8004ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac6:	f383 8811 	msr	BASEPRI, r3
 8004aca:	f3bf 8f6f 	isb	sy
 8004ace:	f3bf 8f4f 	dsb	sy
 8004ad2:	623b      	str	r3, [r7, #32]
 8004ad4:	e7fe      	b.n	8004ad4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d103      	bne.n	8004ae4 <xQueueReceive+0x3c>
 8004adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d101      	bne.n	8004ae8 <xQueueReceive+0x40>
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e000      	b.n	8004aea <xQueueReceive+0x42>
 8004ae8:	2300      	movs	r3, #0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d109      	bne.n	8004b02 <xQueueReceive+0x5a>
 8004aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af2:	f383 8811 	msr	BASEPRI, r3
 8004af6:	f3bf 8f6f 	isb	sy
 8004afa:	f3bf 8f4f 	dsb	sy
 8004afe:	61fb      	str	r3, [r7, #28]
 8004b00:	e7fe      	b.n	8004b00 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b02:	f001 f913 	bl	8005d2c <xTaskGetSchedulerState>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d102      	bne.n	8004b12 <xQueueReceive+0x6a>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d101      	bne.n	8004b16 <xQueueReceive+0x6e>
 8004b12:	2301      	movs	r3, #1
 8004b14:	e000      	b.n	8004b18 <xQueueReceive+0x70>
 8004b16:	2300      	movs	r3, #0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d109      	bne.n	8004b30 <xQueueReceive+0x88>
 8004b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b20:	f383 8811 	msr	BASEPRI, r3
 8004b24:	f3bf 8f6f 	isb	sy
 8004b28:	f3bf 8f4f 	dsb	sy
 8004b2c:	61bb      	str	r3, [r7, #24]
 8004b2e:	e7fe      	b.n	8004b2e <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b30:	f001 fc64 	bl	80063fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b38:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d01f      	beq.n	8004b80 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004b40:	68b9      	ldr	r1, [r7, #8]
 8004b42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b44:	f000 fa93 	bl	800506e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4a:	1e5a      	subs	r2, r3, #1
 8004b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b4e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d00f      	beq.n	8004b78 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b5a:	3310      	adds	r3, #16
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f000 ff29 	bl	80059b4 <xTaskRemoveFromEventList>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d007      	beq.n	8004b78 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004b68:	4b3c      	ldr	r3, [pc, #240]	; (8004c5c <xQueueReceive+0x1b4>)
 8004b6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b6e:	601a      	str	r2, [r3, #0]
 8004b70:	f3bf 8f4f 	dsb	sy
 8004b74:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004b78:	f001 fc6e 	bl	8006458 <vPortExitCritical>
				return pdPASS;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e069      	b.n	8004c54 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d103      	bne.n	8004b8e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004b86:	f001 fc67 	bl	8006458 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	e062      	b.n	8004c54 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d106      	bne.n	8004ba2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b94:	f107 0310 	add.w	r3, r7, #16
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f000 ff6d 	bl	8005a78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004ba2:	f001 fc59 	bl	8006458 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ba6:	f000 fd21 	bl	80055ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004baa:	f001 fc27 	bl	80063fc <vPortEnterCritical>
 8004bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004bb4:	b25b      	sxtb	r3, r3
 8004bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bba:	d103      	bne.n	8004bc4 <xQueueReceive+0x11c>
 8004bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004bca:	b25b      	sxtb	r3, r3
 8004bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd0:	d103      	bne.n	8004bda <xQueueReceive+0x132>
 8004bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004bda:	f001 fc3d 	bl	8006458 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004bde:	1d3a      	adds	r2, r7, #4
 8004be0:	f107 0310 	add.w	r3, r7, #16
 8004be4:	4611      	mov	r1, r2
 8004be6:	4618      	mov	r0, r3
 8004be8:	f000 ff5c 	bl	8005aa4 <xTaskCheckForTimeOut>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d123      	bne.n	8004c3a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004bf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bf4:	f000 fab3 	bl	800515e <prvIsQueueEmpty>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d017      	beq.n	8004c2e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c00:	3324      	adds	r3, #36	; 0x24
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	4611      	mov	r1, r2
 8004c06:	4618      	mov	r0, r3
 8004c08:	f000 feb0 	bl	800596c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004c0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c0e:	f000 fa54 	bl	80050ba <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004c12:	f000 fcf9 	bl	8005608 <xTaskResumeAll>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d189      	bne.n	8004b30 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004c1c:	4b0f      	ldr	r3, [pc, #60]	; (8004c5c <xQueueReceive+0x1b4>)
 8004c1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c22:	601a      	str	r2, [r3, #0]
 8004c24:	f3bf 8f4f 	dsb	sy
 8004c28:	f3bf 8f6f 	isb	sy
 8004c2c:	e780      	b.n	8004b30 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004c2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c30:	f000 fa43 	bl	80050ba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c34:	f000 fce8 	bl	8005608 <xTaskResumeAll>
 8004c38:	e77a      	b.n	8004b30 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004c3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c3c:	f000 fa3d 	bl	80050ba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c40:	f000 fce2 	bl	8005608 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c46:	f000 fa8a 	bl	800515e <prvIsQueueEmpty>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	f43f af6f 	beq.w	8004b30 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004c52:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3730      	adds	r7, #48	; 0x30
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	e000ed04 	.word	0xe000ed04

08004c60 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b08e      	sub	sp, #56	; 0x38
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004c72:	2300      	movs	r3, #0
 8004c74:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d109      	bne.n	8004c90 <xQueueSemaphoreTake+0x30>
 8004c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c80:	f383 8811 	msr	BASEPRI, r3
 8004c84:	f3bf 8f6f 	isb	sy
 8004c88:	f3bf 8f4f 	dsb	sy
 8004c8c:	623b      	str	r3, [r7, #32]
 8004c8e:	e7fe      	b.n	8004c8e <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d009      	beq.n	8004cac <xQueueSemaphoreTake+0x4c>
 8004c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c9c:	f383 8811 	msr	BASEPRI, r3
 8004ca0:	f3bf 8f6f 	isb	sy
 8004ca4:	f3bf 8f4f 	dsb	sy
 8004ca8:	61fb      	str	r3, [r7, #28]
 8004caa:	e7fe      	b.n	8004caa <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004cac:	f001 f83e 	bl	8005d2c <xTaskGetSchedulerState>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d102      	bne.n	8004cbc <xQueueSemaphoreTake+0x5c>
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d101      	bne.n	8004cc0 <xQueueSemaphoreTake+0x60>
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e000      	b.n	8004cc2 <xQueueSemaphoreTake+0x62>
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d109      	bne.n	8004cda <xQueueSemaphoreTake+0x7a>
 8004cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cca:	f383 8811 	msr	BASEPRI, r3
 8004cce:	f3bf 8f6f 	isb	sy
 8004cd2:	f3bf 8f4f 	dsb	sy
 8004cd6:	61bb      	str	r3, [r7, #24]
 8004cd8:	e7fe      	b.n	8004cd8 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004cda:	f001 fb8f 	bl	80063fc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce2:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d024      	beq.n	8004d34 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cec:	1e5a      	subs	r2, r3, #1
 8004cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cf0:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d104      	bne.n	8004d04 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8004cfa:	f001 f9dd 	bl	80060b8 <pvTaskIncrementMutexHeldCount>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d02:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d00f      	beq.n	8004d2c <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d0e:	3310      	adds	r3, #16
 8004d10:	4618      	mov	r0, r3
 8004d12:	f000 fe4f 	bl	80059b4 <xTaskRemoveFromEventList>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d007      	beq.n	8004d2c <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004d1c:	4b53      	ldr	r3, [pc, #332]	; (8004e6c <xQueueSemaphoreTake+0x20c>)
 8004d1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d22:	601a      	str	r2, [r3, #0]
 8004d24:	f3bf 8f4f 	dsb	sy
 8004d28:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004d2c:	f001 fb94 	bl	8006458 <vPortExitCritical>
				return pdPASS;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e096      	b.n	8004e62 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d110      	bne.n	8004d5c <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d009      	beq.n	8004d54 <xQueueSemaphoreTake+0xf4>
 8004d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d44:	f383 8811 	msr	BASEPRI, r3
 8004d48:	f3bf 8f6f 	isb	sy
 8004d4c:	f3bf 8f4f 	dsb	sy
 8004d50:	617b      	str	r3, [r7, #20]
 8004d52:	e7fe      	b.n	8004d52 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004d54:	f001 fb80 	bl	8006458 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	e082      	b.n	8004e62 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d106      	bne.n	8004d70 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004d62:	f107 030c 	add.w	r3, r7, #12
 8004d66:	4618      	mov	r0, r3
 8004d68:	f000 fe86 	bl	8005a78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004d70:	f001 fb72 	bl	8006458 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004d74:	f000 fc3a 	bl	80055ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d78:	f001 fb40 	bl	80063fc <vPortEnterCritical>
 8004d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d82:	b25b      	sxtb	r3, r3
 8004d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d88:	d103      	bne.n	8004d92 <xQueueSemaphoreTake+0x132>
 8004d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d98:	b25b      	sxtb	r3, r3
 8004d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d9e:	d103      	bne.n	8004da8 <xQueueSemaphoreTake+0x148>
 8004da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004da8:	f001 fb56 	bl	8006458 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004dac:	463a      	mov	r2, r7
 8004dae:	f107 030c 	add.w	r3, r7, #12
 8004db2:	4611      	mov	r1, r2
 8004db4:	4618      	mov	r0, r3
 8004db6:	f000 fe75 	bl	8005aa4 <xTaskCheckForTimeOut>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d132      	bne.n	8004e26 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004dc0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004dc2:	f000 f9cc 	bl	800515e <prvIsQueueEmpty>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d026      	beq.n	8004e1a <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d109      	bne.n	8004de8 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8004dd4:	f001 fb12 	bl	80063fc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8004dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f000 ffc3 	bl	8005d68 <xTaskPriorityInherit>
 8004de2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004de4:	f001 fb38 	bl	8006458 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dea:	3324      	adds	r3, #36	; 0x24
 8004dec:	683a      	ldr	r2, [r7, #0]
 8004dee:	4611      	mov	r1, r2
 8004df0:	4618      	mov	r0, r3
 8004df2:	f000 fdbb 	bl	800596c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004df6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004df8:	f000 f95f 	bl	80050ba <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004dfc:	f000 fc04 	bl	8005608 <xTaskResumeAll>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	f47f af69 	bne.w	8004cda <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8004e08:	4b18      	ldr	r3, [pc, #96]	; (8004e6c <xQueueSemaphoreTake+0x20c>)
 8004e0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e0e:	601a      	str	r2, [r3, #0]
 8004e10:	f3bf 8f4f 	dsb	sy
 8004e14:	f3bf 8f6f 	isb	sy
 8004e18:	e75f      	b.n	8004cda <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004e1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004e1c:	f000 f94d 	bl	80050ba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e20:	f000 fbf2 	bl	8005608 <xTaskResumeAll>
 8004e24:	e759      	b.n	8004cda <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004e26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004e28:	f000 f947 	bl	80050ba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e2c:	f000 fbec 	bl	8005608 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004e32:	f000 f994 	bl	800515e <prvIsQueueEmpty>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	f43f af4e 	beq.w	8004cda <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d00d      	beq.n	8004e60 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8004e44:	f001 fada 	bl	80063fc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004e48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004e4a:	f000 f88e 	bl	8004f6a <prvGetDisinheritPriorityAfterTimeout>
 8004e4e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8004e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e56:	4618      	mov	r0, r3
 8004e58:	f001 f890 	bl	8005f7c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004e5c:	f001 fafc 	bl	8006458 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004e60:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3738      	adds	r7, #56	; 0x38
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	e000ed04 	.word	0xe000ed04

08004e70 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b08e      	sub	sp, #56	; 0x38
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	60b9      	str	r1, [r7, #8]
 8004e7a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d109      	bne.n	8004e9a <xQueueReceiveFromISR+0x2a>
 8004e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e8a:	f383 8811 	msr	BASEPRI, r3
 8004e8e:	f3bf 8f6f 	isb	sy
 8004e92:	f3bf 8f4f 	dsb	sy
 8004e96:	623b      	str	r3, [r7, #32]
 8004e98:	e7fe      	b.n	8004e98 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d103      	bne.n	8004ea8 <xQueueReceiveFromISR+0x38>
 8004ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d101      	bne.n	8004eac <xQueueReceiveFromISR+0x3c>
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e000      	b.n	8004eae <xQueueReceiveFromISR+0x3e>
 8004eac:	2300      	movs	r3, #0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d109      	bne.n	8004ec6 <xQueueReceiveFromISR+0x56>
 8004eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb6:	f383 8811 	msr	BASEPRI, r3
 8004eba:	f3bf 8f6f 	isb	sy
 8004ebe:	f3bf 8f4f 	dsb	sy
 8004ec2:	61fb      	str	r3, [r7, #28]
 8004ec4:	e7fe      	b.n	8004ec4 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004ec6:	f001 fb75 	bl	80065b4 <vPortValidateInterruptPriority>
	__asm volatile
 8004eca:	f3ef 8211 	mrs	r2, BASEPRI
 8004ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed2:	f383 8811 	msr	BASEPRI, r3
 8004ed6:	f3bf 8f6f 	isb	sy
 8004eda:	f3bf 8f4f 	dsb	sy
 8004ede:	61ba      	str	r2, [r7, #24]
 8004ee0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004ee2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d02f      	beq.n	8004f52 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ef8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004efc:	68b9      	ldr	r1, [r7, #8]
 8004efe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f00:	f000 f8b5 	bl	800506e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f06:	1e5a      	subs	r2, r3, #1
 8004f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f0a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004f0c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f14:	d112      	bne.n	8004f3c <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d016      	beq.n	8004f4c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f20:	3310      	adds	r3, #16
 8004f22:	4618      	mov	r0, r3
 8004f24:	f000 fd46 	bl	80059b4 <xTaskRemoveFromEventList>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d00e      	beq.n	8004f4c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d00b      	beq.n	8004f4c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	601a      	str	r2, [r3, #0]
 8004f3a:	e007      	b.n	8004f4c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004f3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f40:	3301      	adds	r3, #1
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	b25a      	sxtb	r2, r3
 8004f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	637b      	str	r3, [r7, #52]	; 0x34
 8004f50:	e001      	b.n	8004f56 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8004f52:	2300      	movs	r3, #0
 8004f54:	637b      	str	r3, [r7, #52]	; 0x34
 8004f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f58:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3738      	adds	r7, #56	; 0x38
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}

08004f6a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004f6a:	b480      	push	{r7}
 8004f6c:	b085      	sub	sp, #20
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d006      	beq.n	8004f88 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f1c3 0307 	rsb	r3, r3, #7
 8004f84:	60fb      	str	r3, [r7, #12]
 8004f86:	e001      	b.n	8004f8c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
	}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3714      	adds	r7, #20
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr

08004f9a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004f9a:	b580      	push	{r7, lr}
 8004f9c:	b086      	sub	sp, #24
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	60f8      	str	r0, [r7, #12]
 8004fa2:	60b9      	str	r1, [r7, #8]
 8004fa4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fae:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d10d      	bne.n	8004fd4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d14d      	bne.n	800505c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f000 ff55 	bl	8005e74 <xTaskPriorityDisinherit>
 8004fca:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	605a      	str	r2, [r3, #4]
 8004fd2:	e043      	b.n	800505c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d119      	bne.n	800500e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6898      	ldr	r0, [r3, #8]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	68b9      	ldr	r1, [r7, #8]
 8004fe6:	f001 fd1d 	bl	8006a24 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	689a      	ldr	r2, [r3, #8]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff2:	441a      	add	r2, r3
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	689a      	ldr	r2, [r3, #8]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	429a      	cmp	r2, r3
 8005002:	d32b      	bcc.n	800505c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	609a      	str	r2, [r3, #8]
 800500c:	e026      	b.n	800505c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	68d8      	ldr	r0, [r3, #12]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005016:	461a      	mov	r2, r3
 8005018:	68b9      	ldr	r1, [r7, #8]
 800501a:	f001 fd03 	bl	8006a24 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	68da      	ldr	r2, [r3, #12]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005026:	425b      	negs	r3, r3
 8005028:	441a      	add	r2, r3
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	68da      	ldr	r2, [r3, #12]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	429a      	cmp	r2, r3
 8005038:	d207      	bcs.n	800504a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	685a      	ldr	r2, [r3, #4]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005042:	425b      	negs	r3, r3
 8005044:	441a      	add	r2, r3
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2b02      	cmp	r3, #2
 800504e:	d105      	bne.n	800505c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d002      	beq.n	800505c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	3b01      	subs	r3, #1
 800505a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	1c5a      	adds	r2, r3, #1
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005064:	697b      	ldr	r3, [r7, #20]
}
 8005066:	4618      	mov	r0, r3
 8005068:	3718      	adds	r7, #24
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}

0800506e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800506e:	b580      	push	{r7, lr}
 8005070:	b082      	sub	sp, #8
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
 8005076:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507c:	2b00      	cmp	r3, #0
 800507e:	d018      	beq.n	80050b2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	68da      	ldr	r2, [r3, #12]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005088:	441a      	add	r2, r3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	68da      	ldr	r2, [r3, #12]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	429a      	cmp	r2, r3
 8005098:	d303      	bcc.n	80050a2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	68d9      	ldr	r1, [r3, #12]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050aa:	461a      	mov	r2, r3
 80050ac:	6838      	ldr	r0, [r7, #0]
 80050ae:	f001 fcb9 	bl	8006a24 <memcpy>
	}
}
 80050b2:	bf00      	nop
 80050b4:	3708      	adds	r7, #8
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}

080050ba <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80050ba:	b580      	push	{r7, lr}
 80050bc:	b084      	sub	sp, #16
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80050c2:	f001 f99b 	bl	80063fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050cc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80050ce:	e011      	b.n	80050f4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d012      	beq.n	80050fe <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	3324      	adds	r3, #36	; 0x24
 80050dc:	4618      	mov	r0, r3
 80050de:	f000 fc69 	bl	80059b4 <xTaskRemoveFromEventList>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d001      	beq.n	80050ec <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80050e8:	f000 fd3c 	bl	8005b64 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80050ec:	7bfb      	ldrb	r3, [r7, #15]
 80050ee:	3b01      	subs	r3, #1
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80050f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	dce9      	bgt.n	80050d0 <prvUnlockQueue+0x16>
 80050fc:	e000      	b.n	8005100 <prvUnlockQueue+0x46>
					break;
 80050fe:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	22ff      	movs	r2, #255	; 0xff
 8005104:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005108:	f001 f9a6 	bl	8006458 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800510c:	f001 f976 	bl	80063fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005116:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005118:	e011      	b.n	800513e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d012      	beq.n	8005148 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	3310      	adds	r3, #16
 8005126:	4618      	mov	r0, r3
 8005128:	f000 fc44 	bl	80059b4 <xTaskRemoveFromEventList>
 800512c:	4603      	mov	r3, r0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d001      	beq.n	8005136 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005132:	f000 fd17 	bl	8005b64 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005136:	7bbb      	ldrb	r3, [r7, #14]
 8005138:	3b01      	subs	r3, #1
 800513a:	b2db      	uxtb	r3, r3
 800513c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800513e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005142:	2b00      	cmp	r3, #0
 8005144:	dce9      	bgt.n	800511a <prvUnlockQueue+0x60>
 8005146:	e000      	b.n	800514a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005148:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	22ff      	movs	r2, #255	; 0xff
 800514e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005152:	f001 f981 	bl	8006458 <vPortExitCritical>
}
 8005156:	bf00      	nop
 8005158:	3710      	adds	r7, #16
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}

0800515e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800515e:	b580      	push	{r7, lr}
 8005160:	b084      	sub	sp, #16
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005166:	f001 f949 	bl	80063fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800516e:	2b00      	cmp	r3, #0
 8005170:	d102      	bne.n	8005178 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005172:	2301      	movs	r3, #1
 8005174:	60fb      	str	r3, [r7, #12]
 8005176:	e001      	b.n	800517c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005178:	2300      	movs	r3, #0
 800517a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800517c:	f001 f96c 	bl	8006458 <vPortExitCritical>

	return xReturn;
 8005180:	68fb      	ldr	r3, [r7, #12]
}
 8005182:	4618      	mov	r0, r3
 8005184:	3710      	adds	r7, #16
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}

0800518a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800518a:	b580      	push	{r7, lr}
 800518c:	b084      	sub	sp, #16
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005192:	f001 f933 	bl	80063fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800519e:	429a      	cmp	r2, r3
 80051a0:	d102      	bne.n	80051a8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80051a2:	2301      	movs	r3, #1
 80051a4:	60fb      	str	r3, [r7, #12]
 80051a6:	e001      	b.n	80051ac <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80051a8:	2300      	movs	r3, #0
 80051aa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80051ac:	f001 f954 	bl	8006458 <vPortExitCritical>

	return xReturn;
 80051b0:	68fb      	ldr	r3, [r7, #12]
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3710      	adds	r7, #16
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}

080051ba <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80051ba:	b580      	push	{r7, lr}
 80051bc:	b08e      	sub	sp, #56	; 0x38
 80051be:	af04      	add	r7, sp, #16
 80051c0:	60f8      	str	r0, [r7, #12]
 80051c2:	60b9      	str	r1, [r7, #8]
 80051c4:	607a      	str	r2, [r7, #4]
 80051c6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80051c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d109      	bne.n	80051e2 <xTaskCreateStatic+0x28>
	__asm volatile
 80051ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d2:	f383 8811 	msr	BASEPRI, r3
 80051d6:	f3bf 8f6f 	isb	sy
 80051da:	f3bf 8f4f 	dsb	sy
 80051de:	623b      	str	r3, [r7, #32]
 80051e0:	e7fe      	b.n	80051e0 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80051e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d109      	bne.n	80051fc <xTaskCreateStatic+0x42>
 80051e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ec:	f383 8811 	msr	BASEPRI, r3
 80051f0:	f3bf 8f6f 	isb	sy
 80051f4:	f3bf 8f4f 	dsb	sy
 80051f8:	61fb      	str	r3, [r7, #28]
 80051fa:	e7fe      	b.n	80051fa <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80051fc:	2354      	movs	r3, #84	; 0x54
 80051fe:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	2b54      	cmp	r3, #84	; 0x54
 8005204:	d009      	beq.n	800521a <xTaskCreateStatic+0x60>
 8005206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800520a:	f383 8811 	msr	BASEPRI, r3
 800520e:	f3bf 8f6f 	isb	sy
 8005212:	f3bf 8f4f 	dsb	sy
 8005216:	61bb      	str	r3, [r7, #24]
 8005218:	e7fe      	b.n	8005218 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800521a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800521c:	2b00      	cmp	r3, #0
 800521e:	d01e      	beq.n	800525e <xTaskCreateStatic+0xa4>
 8005220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005222:	2b00      	cmp	r3, #0
 8005224:	d01b      	beq.n	800525e <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005228:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800522a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800522e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005232:	2202      	movs	r2, #2
 8005234:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005238:	2300      	movs	r3, #0
 800523a:	9303      	str	r3, [sp, #12]
 800523c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523e:	9302      	str	r3, [sp, #8]
 8005240:	f107 0314 	add.w	r3, r7, #20
 8005244:	9301      	str	r3, [sp, #4]
 8005246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005248:	9300      	str	r3, [sp, #0]
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	68b9      	ldr	r1, [r7, #8]
 8005250:	68f8      	ldr	r0, [r7, #12]
 8005252:	f000 f850 	bl	80052f6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005256:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005258:	f000 f8cc 	bl	80053f4 <prvAddNewTaskToReadyList>
 800525c:	e001      	b.n	8005262 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800525e:	2300      	movs	r3, #0
 8005260:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005262:	697b      	ldr	r3, [r7, #20]
	}
 8005264:	4618      	mov	r0, r3
 8005266:	3728      	adds	r7, #40	; 0x28
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}

0800526c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800526c:	b580      	push	{r7, lr}
 800526e:	b08c      	sub	sp, #48	; 0x30
 8005270:	af04      	add	r7, sp, #16
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	603b      	str	r3, [r7, #0]
 8005278:	4613      	mov	r3, r2
 800527a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800527c:	88fb      	ldrh	r3, [r7, #6]
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	4618      	mov	r0, r3
 8005282:	f001 f9d5 	bl	8006630 <pvPortMalloc>
 8005286:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00e      	beq.n	80052ac <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800528e:	2054      	movs	r0, #84	; 0x54
 8005290:	f001 f9ce 	bl	8006630 <pvPortMalloc>
 8005294:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d003      	beq.n	80052a4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	697a      	ldr	r2, [r7, #20]
 80052a0:	631a      	str	r2, [r3, #48]	; 0x30
 80052a2:	e005      	b.n	80052b0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80052a4:	6978      	ldr	r0, [r7, #20]
 80052a6:	f001 fa85 	bl	80067b4 <vPortFree>
 80052aa:	e001      	b.n	80052b0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80052ac:	2300      	movs	r3, #0
 80052ae:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d017      	beq.n	80052e6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80052be:	88fa      	ldrh	r2, [r7, #6]
 80052c0:	2300      	movs	r3, #0
 80052c2:	9303      	str	r3, [sp, #12]
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	9302      	str	r3, [sp, #8]
 80052c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ca:	9301      	str	r3, [sp, #4]
 80052cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ce:	9300      	str	r3, [sp, #0]
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	68b9      	ldr	r1, [r7, #8]
 80052d4:	68f8      	ldr	r0, [r7, #12]
 80052d6:	f000 f80e 	bl	80052f6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80052da:	69f8      	ldr	r0, [r7, #28]
 80052dc:	f000 f88a 	bl	80053f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80052e0:	2301      	movs	r3, #1
 80052e2:	61bb      	str	r3, [r7, #24]
 80052e4:	e002      	b.n	80052ec <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80052e6:	f04f 33ff 	mov.w	r3, #4294967295
 80052ea:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80052ec:	69bb      	ldr	r3, [r7, #24]
	}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3720      	adds	r7, #32
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}

080052f6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80052f6:	b580      	push	{r7, lr}
 80052f8:	b088      	sub	sp, #32
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	60f8      	str	r0, [r7, #12]
 80052fe:	60b9      	str	r1, [r7, #8]
 8005300:	607a      	str	r2, [r7, #4]
 8005302:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005306:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800530e:	3b01      	subs	r3, #1
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	4413      	add	r3, r2
 8005314:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	f023 0307 	bic.w	r3, r3, #7
 800531c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	f003 0307 	and.w	r3, r3, #7
 8005324:	2b00      	cmp	r3, #0
 8005326:	d009      	beq.n	800533c <prvInitialiseNewTask+0x46>
 8005328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800532c:	f383 8811 	msr	BASEPRI, r3
 8005330:	f3bf 8f6f 	isb	sy
 8005334:	f3bf 8f4f 	dsb	sy
 8005338:	617b      	str	r3, [r7, #20]
 800533a:	e7fe      	b.n	800533a <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800533c:	2300      	movs	r3, #0
 800533e:	61fb      	str	r3, [r7, #28]
 8005340:	e012      	b.n	8005368 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005342:	68ba      	ldr	r2, [r7, #8]
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	4413      	add	r3, r2
 8005348:	7819      	ldrb	r1, [r3, #0]
 800534a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	4413      	add	r3, r2
 8005350:	3334      	adds	r3, #52	; 0x34
 8005352:	460a      	mov	r2, r1
 8005354:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005356:	68ba      	ldr	r2, [r7, #8]
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	4413      	add	r3, r2
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d006      	beq.n	8005370 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	3301      	adds	r3, #1
 8005366:	61fb      	str	r3, [r7, #28]
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	2b0f      	cmp	r3, #15
 800536c:	d9e9      	bls.n	8005342 <prvInitialiseNewTask+0x4c>
 800536e:	e000      	b.n	8005372 <prvInitialiseNewTask+0x7c>
		{
			break;
 8005370:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005374:	2200      	movs	r2, #0
 8005376:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800537a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800537c:	2b06      	cmp	r3, #6
 800537e:	d901      	bls.n	8005384 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005380:	2306      	movs	r3, #6
 8005382:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005386:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005388:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800538a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800538c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800538e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005392:	2200      	movs	r2, #0
 8005394:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005398:	3304      	adds	r3, #4
 800539a:	4618      	mov	r0, r3
 800539c:	f7ff f835 	bl	800440a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80053a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a2:	3318      	adds	r3, #24
 80053a4:	4618      	mov	r0, r3
 80053a6:	f7ff f830 	bl	800440a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80053aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b2:	f1c3 0207 	rsb	r2, r3, #7
 80053b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80053ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053be:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80053c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c2:	2200      	movs	r2, #0
 80053c4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80053c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c8:	2200      	movs	r2, #0
 80053ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80053ce:	683a      	ldr	r2, [r7, #0]
 80053d0:	68f9      	ldr	r1, [r7, #12]
 80053d2:	69b8      	ldr	r0, [r7, #24]
 80053d4:	f000 feea 	bl	80061ac <pxPortInitialiseStack>
 80053d8:	4602      	mov	r2, r0
 80053da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053dc:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80053de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d002      	beq.n	80053ea <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80053e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053ea:	bf00      	nop
 80053ec:	3720      	adds	r7, #32
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
	...

080053f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b082      	sub	sp, #8
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80053fc:	f000 fffe 	bl	80063fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005400:	4b2a      	ldr	r3, [pc, #168]	; (80054ac <prvAddNewTaskToReadyList+0xb8>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	3301      	adds	r3, #1
 8005406:	4a29      	ldr	r2, [pc, #164]	; (80054ac <prvAddNewTaskToReadyList+0xb8>)
 8005408:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800540a:	4b29      	ldr	r3, [pc, #164]	; (80054b0 <prvAddNewTaskToReadyList+0xbc>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d109      	bne.n	8005426 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005412:	4a27      	ldr	r2, [pc, #156]	; (80054b0 <prvAddNewTaskToReadyList+0xbc>)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005418:	4b24      	ldr	r3, [pc, #144]	; (80054ac <prvAddNewTaskToReadyList+0xb8>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2b01      	cmp	r3, #1
 800541e:	d110      	bne.n	8005442 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005420:	f000 fbc4 	bl	8005bac <prvInitialiseTaskLists>
 8005424:	e00d      	b.n	8005442 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005426:	4b23      	ldr	r3, [pc, #140]	; (80054b4 <prvAddNewTaskToReadyList+0xc0>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d109      	bne.n	8005442 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800542e:	4b20      	ldr	r3, [pc, #128]	; (80054b0 <prvAddNewTaskToReadyList+0xbc>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005438:	429a      	cmp	r2, r3
 800543a:	d802      	bhi.n	8005442 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800543c:	4a1c      	ldr	r2, [pc, #112]	; (80054b0 <prvAddNewTaskToReadyList+0xbc>)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005442:	4b1d      	ldr	r3, [pc, #116]	; (80054b8 <prvAddNewTaskToReadyList+0xc4>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	3301      	adds	r3, #1
 8005448:	4a1b      	ldr	r2, [pc, #108]	; (80054b8 <prvAddNewTaskToReadyList+0xc4>)
 800544a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005450:	2201      	movs	r2, #1
 8005452:	409a      	lsls	r2, r3
 8005454:	4b19      	ldr	r3, [pc, #100]	; (80054bc <prvAddNewTaskToReadyList+0xc8>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4313      	orrs	r3, r2
 800545a:	4a18      	ldr	r2, [pc, #96]	; (80054bc <prvAddNewTaskToReadyList+0xc8>)
 800545c:	6013      	str	r3, [r2, #0]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005462:	4613      	mov	r3, r2
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	4413      	add	r3, r2
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	4a15      	ldr	r2, [pc, #84]	; (80054c0 <prvAddNewTaskToReadyList+0xcc>)
 800546c:	441a      	add	r2, r3
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	3304      	adds	r3, #4
 8005472:	4619      	mov	r1, r3
 8005474:	4610      	mov	r0, r2
 8005476:	f7fe ffd5 	bl	8004424 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800547a:	f000 ffed 	bl	8006458 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800547e:	4b0d      	ldr	r3, [pc, #52]	; (80054b4 <prvAddNewTaskToReadyList+0xc0>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00e      	beq.n	80054a4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005486:	4b0a      	ldr	r3, [pc, #40]	; (80054b0 <prvAddNewTaskToReadyList+0xbc>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005490:	429a      	cmp	r2, r3
 8005492:	d207      	bcs.n	80054a4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005494:	4b0b      	ldr	r3, [pc, #44]	; (80054c4 <prvAddNewTaskToReadyList+0xd0>)
 8005496:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800549a:	601a      	str	r2, [r3, #0]
 800549c:	f3bf 8f4f 	dsb	sy
 80054a0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054a4:	bf00      	nop
 80054a6:	3708      	adds	r7, #8
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	20000380 	.word	0x20000380
 80054b0:	20000280 	.word	0x20000280
 80054b4:	2000038c 	.word	0x2000038c
 80054b8:	2000039c 	.word	0x2000039c
 80054bc:	20000388 	.word	0x20000388
 80054c0:	20000284 	.word	0x20000284
 80054c4:	e000ed04 	.word	0xe000ed04

080054c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80054d0:	2300      	movs	r3, #0
 80054d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d016      	beq.n	8005508 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80054da:	4b13      	ldr	r3, [pc, #76]	; (8005528 <vTaskDelay+0x60>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d009      	beq.n	80054f6 <vTaskDelay+0x2e>
 80054e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e6:	f383 8811 	msr	BASEPRI, r3
 80054ea:	f3bf 8f6f 	isb	sy
 80054ee:	f3bf 8f4f 	dsb	sy
 80054f2:	60bb      	str	r3, [r7, #8]
 80054f4:	e7fe      	b.n	80054f4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80054f6:	f000 f879 	bl	80055ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80054fa:	2100      	movs	r1, #0
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f000 fdef 	bl	80060e0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005502:	f000 f881 	bl	8005608 <xTaskResumeAll>
 8005506:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d107      	bne.n	800551e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800550e:	4b07      	ldr	r3, [pc, #28]	; (800552c <vTaskDelay+0x64>)
 8005510:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005514:	601a      	str	r2, [r3, #0]
 8005516:	f3bf 8f4f 	dsb	sy
 800551a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800551e:	bf00      	nop
 8005520:	3710      	adds	r7, #16
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	200003a8 	.word	0x200003a8
 800552c:	e000ed04 	.word	0xe000ed04

08005530 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b08a      	sub	sp, #40	; 0x28
 8005534:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005536:	2300      	movs	r3, #0
 8005538:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800553a:	2300      	movs	r3, #0
 800553c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800553e:	463a      	mov	r2, r7
 8005540:	1d39      	adds	r1, r7, #4
 8005542:	f107 0308 	add.w	r3, r7, #8
 8005546:	4618      	mov	r0, r3
 8005548:	f7fa ffca 	bl	80004e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800554c:	6839      	ldr	r1, [r7, #0]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	68ba      	ldr	r2, [r7, #8]
 8005552:	9202      	str	r2, [sp, #8]
 8005554:	9301      	str	r3, [sp, #4]
 8005556:	2300      	movs	r3, #0
 8005558:	9300      	str	r3, [sp, #0]
 800555a:	2300      	movs	r3, #0
 800555c:	460a      	mov	r2, r1
 800555e:	491d      	ldr	r1, [pc, #116]	; (80055d4 <vTaskStartScheduler+0xa4>)
 8005560:	481d      	ldr	r0, [pc, #116]	; (80055d8 <vTaskStartScheduler+0xa8>)
 8005562:	f7ff fe2a 	bl	80051ba <xTaskCreateStatic>
 8005566:	4602      	mov	r2, r0
 8005568:	4b1c      	ldr	r3, [pc, #112]	; (80055dc <vTaskStartScheduler+0xac>)
 800556a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800556c:	4b1b      	ldr	r3, [pc, #108]	; (80055dc <vTaskStartScheduler+0xac>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d002      	beq.n	800557a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005574:	2301      	movs	r3, #1
 8005576:	617b      	str	r3, [r7, #20]
 8005578:	e001      	b.n	800557e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800557a:	2300      	movs	r3, #0
 800557c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	2b01      	cmp	r3, #1
 8005582:	d115      	bne.n	80055b0 <vTaskStartScheduler+0x80>
 8005584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005588:	f383 8811 	msr	BASEPRI, r3
 800558c:	f3bf 8f6f 	isb	sy
 8005590:	f3bf 8f4f 	dsb	sy
 8005594:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005596:	4b12      	ldr	r3, [pc, #72]	; (80055e0 <vTaskStartScheduler+0xb0>)
 8005598:	f04f 32ff 	mov.w	r2, #4294967295
 800559c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800559e:	4b11      	ldr	r3, [pc, #68]	; (80055e4 <vTaskStartScheduler+0xb4>)
 80055a0:	2201      	movs	r2, #1
 80055a2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80055a4:	4b10      	ldr	r3, [pc, #64]	; (80055e8 <vTaskStartScheduler+0xb8>)
 80055a6:	2200      	movs	r2, #0
 80055a8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80055aa:	f000 fe89 	bl	80062c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80055ae:	e00d      	b.n	80055cc <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055b6:	d109      	bne.n	80055cc <vTaskStartScheduler+0x9c>
 80055b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055bc:	f383 8811 	msr	BASEPRI, r3
 80055c0:	f3bf 8f6f 	isb	sy
 80055c4:	f3bf 8f4f 	dsb	sy
 80055c8:	60fb      	str	r3, [r7, #12]
 80055ca:	e7fe      	b.n	80055ca <vTaskStartScheduler+0x9a>
}
 80055cc:	bf00      	nop
 80055ce:	3718      	adds	r7, #24
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	08006b28 	.word	0x08006b28
 80055d8:	08005b7d 	.word	0x08005b7d
 80055dc:	200003a4 	.word	0x200003a4
 80055e0:	200003a0 	.word	0x200003a0
 80055e4:	2000038c 	.word	0x2000038c
 80055e8:	20000384 	.word	0x20000384

080055ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80055ec:	b480      	push	{r7}
 80055ee:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80055f0:	4b04      	ldr	r3, [pc, #16]	; (8005604 <vTaskSuspendAll+0x18>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	3301      	adds	r3, #1
 80055f6:	4a03      	ldr	r2, [pc, #12]	; (8005604 <vTaskSuspendAll+0x18>)
 80055f8:	6013      	str	r3, [r2, #0]
}
 80055fa:	bf00      	nop
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr
 8005604:	200003a8 	.word	0x200003a8

08005608 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800560e:	2300      	movs	r3, #0
 8005610:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005612:	2300      	movs	r3, #0
 8005614:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005616:	4b41      	ldr	r3, [pc, #260]	; (800571c <xTaskResumeAll+0x114>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d109      	bne.n	8005632 <xTaskResumeAll+0x2a>
 800561e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005622:	f383 8811 	msr	BASEPRI, r3
 8005626:	f3bf 8f6f 	isb	sy
 800562a:	f3bf 8f4f 	dsb	sy
 800562e:	603b      	str	r3, [r7, #0]
 8005630:	e7fe      	b.n	8005630 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005632:	f000 fee3 	bl	80063fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005636:	4b39      	ldr	r3, [pc, #228]	; (800571c <xTaskResumeAll+0x114>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	3b01      	subs	r3, #1
 800563c:	4a37      	ldr	r2, [pc, #220]	; (800571c <xTaskResumeAll+0x114>)
 800563e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005640:	4b36      	ldr	r3, [pc, #216]	; (800571c <xTaskResumeAll+0x114>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d161      	bne.n	800570c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005648:	4b35      	ldr	r3, [pc, #212]	; (8005720 <xTaskResumeAll+0x118>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d05d      	beq.n	800570c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005650:	e02e      	b.n	80056b0 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005652:	4b34      	ldr	r3, [pc, #208]	; (8005724 <xTaskResumeAll+0x11c>)
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	3318      	adds	r3, #24
 800565e:	4618      	mov	r0, r3
 8005660:	f7fe ff3d 	bl	80044de <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	3304      	adds	r3, #4
 8005668:	4618      	mov	r0, r3
 800566a:	f7fe ff38 	bl	80044de <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005672:	2201      	movs	r2, #1
 8005674:	409a      	lsls	r2, r3
 8005676:	4b2c      	ldr	r3, [pc, #176]	; (8005728 <xTaskResumeAll+0x120>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4313      	orrs	r3, r2
 800567c:	4a2a      	ldr	r2, [pc, #168]	; (8005728 <xTaskResumeAll+0x120>)
 800567e:	6013      	str	r3, [r2, #0]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005684:	4613      	mov	r3, r2
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	4413      	add	r3, r2
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	4a27      	ldr	r2, [pc, #156]	; (800572c <xTaskResumeAll+0x124>)
 800568e:	441a      	add	r2, r3
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	3304      	adds	r3, #4
 8005694:	4619      	mov	r1, r3
 8005696:	4610      	mov	r0, r2
 8005698:	f7fe fec4 	bl	8004424 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056a0:	4b23      	ldr	r3, [pc, #140]	; (8005730 <xTaskResumeAll+0x128>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d302      	bcc.n	80056b0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80056aa:	4b22      	ldr	r3, [pc, #136]	; (8005734 <xTaskResumeAll+0x12c>)
 80056ac:	2201      	movs	r2, #1
 80056ae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80056b0:	4b1c      	ldr	r3, [pc, #112]	; (8005724 <xTaskResumeAll+0x11c>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d1cc      	bne.n	8005652 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d001      	beq.n	80056c2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80056be:	f000 fb0f 	bl	8005ce0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80056c2:	4b1d      	ldr	r3, [pc, #116]	; (8005738 <xTaskResumeAll+0x130>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d010      	beq.n	80056f0 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80056ce:	f000 f837 	bl	8005740 <xTaskIncrementTick>
 80056d2:	4603      	mov	r3, r0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d002      	beq.n	80056de <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80056d8:	4b16      	ldr	r3, [pc, #88]	; (8005734 <xTaskResumeAll+0x12c>)
 80056da:	2201      	movs	r2, #1
 80056dc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	3b01      	subs	r3, #1
 80056e2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d1f1      	bne.n	80056ce <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80056ea:	4b13      	ldr	r3, [pc, #76]	; (8005738 <xTaskResumeAll+0x130>)
 80056ec:	2200      	movs	r2, #0
 80056ee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80056f0:	4b10      	ldr	r3, [pc, #64]	; (8005734 <xTaskResumeAll+0x12c>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d009      	beq.n	800570c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80056f8:	2301      	movs	r3, #1
 80056fa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80056fc:	4b0f      	ldr	r3, [pc, #60]	; (800573c <xTaskResumeAll+0x134>)
 80056fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005702:	601a      	str	r2, [r3, #0]
 8005704:	f3bf 8f4f 	dsb	sy
 8005708:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800570c:	f000 fea4 	bl	8006458 <vPortExitCritical>

	return xAlreadyYielded;
 8005710:	68bb      	ldr	r3, [r7, #8]
}
 8005712:	4618      	mov	r0, r3
 8005714:	3710      	adds	r7, #16
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	200003a8 	.word	0x200003a8
 8005720:	20000380 	.word	0x20000380
 8005724:	20000340 	.word	0x20000340
 8005728:	20000388 	.word	0x20000388
 800572c:	20000284 	.word	0x20000284
 8005730:	20000280 	.word	0x20000280
 8005734:	20000394 	.word	0x20000394
 8005738:	20000390 	.word	0x20000390
 800573c:	e000ed04 	.word	0xe000ed04

08005740 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b086      	sub	sp, #24
 8005744:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005746:	2300      	movs	r3, #0
 8005748:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800574a:	4b50      	ldr	r3, [pc, #320]	; (800588c <xTaskIncrementTick+0x14c>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	2b00      	cmp	r3, #0
 8005750:	f040 808c 	bne.w	800586c <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005754:	4b4e      	ldr	r3, [pc, #312]	; (8005890 <xTaskIncrementTick+0x150>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	3301      	adds	r3, #1
 800575a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800575c:	4a4c      	ldr	r2, [pc, #304]	; (8005890 <xTaskIncrementTick+0x150>)
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d11f      	bne.n	80057a8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005768:	4b4a      	ldr	r3, [pc, #296]	; (8005894 <xTaskIncrementTick+0x154>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d009      	beq.n	8005786 <xTaskIncrementTick+0x46>
 8005772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005776:	f383 8811 	msr	BASEPRI, r3
 800577a:	f3bf 8f6f 	isb	sy
 800577e:	f3bf 8f4f 	dsb	sy
 8005782:	603b      	str	r3, [r7, #0]
 8005784:	e7fe      	b.n	8005784 <xTaskIncrementTick+0x44>
 8005786:	4b43      	ldr	r3, [pc, #268]	; (8005894 <xTaskIncrementTick+0x154>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	60fb      	str	r3, [r7, #12]
 800578c:	4b42      	ldr	r3, [pc, #264]	; (8005898 <xTaskIncrementTick+0x158>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a40      	ldr	r2, [pc, #256]	; (8005894 <xTaskIncrementTick+0x154>)
 8005792:	6013      	str	r3, [r2, #0]
 8005794:	4a40      	ldr	r2, [pc, #256]	; (8005898 <xTaskIncrementTick+0x158>)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	6013      	str	r3, [r2, #0]
 800579a:	4b40      	ldr	r3, [pc, #256]	; (800589c <xTaskIncrementTick+0x15c>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	3301      	adds	r3, #1
 80057a0:	4a3e      	ldr	r2, [pc, #248]	; (800589c <xTaskIncrementTick+0x15c>)
 80057a2:	6013      	str	r3, [r2, #0]
 80057a4:	f000 fa9c 	bl	8005ce0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80057a8:	4b3d      	ldr	r3, [pc, #244]	; (80058a0 <xTaskIncrementTick+0x160>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	693a      	ldr	r2, [r7, #16]
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d34d      	bcc.n	800584e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057b2:	4b38      	ldr	r3, [pc, #224]	; (8005894 <xTaskIncrementTick+0x154>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d101      	bne.n	80057c0 <xTaskIncrementTick+0x80>
 80057bc:	2301      	movs	r3, #1
 80057be:	e000      	b.n	80057c2 <xTaskIncrementTick+0x82>
 80057c0:	2300      	movs	r3, #0
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d004      	beq.n	80057d0 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057c6:	4b36      	ldr	r3, [pc, #216]	; (80058a0 <xTaskIncrementTick+0x160>)
 80057c8:	f04f 32ff 	mov.w	r2, #4294967295
 80057cc:	601a      	str	r2, [r3, #0]
					break;
 80057ce:	e03e      	b.n	800584e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80057d0:	4b30      	ldr	r3, [pc, #192]	; (8005894 <xTaskIncrementTick+0x154>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80057e0:	693a      	ldr	r2, [r7, #16]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d203      	bcs.n	80057f0 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80057e8:	4a2d      	ldr	r2, [pc, #180]	; (80058a0 <xTaskIncrementTick+0x160>)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6013      	str	r3, [r2, #0]
						break;
 80057ee:	e02e      	b.n	800584e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	3304      	adds	r3, #4
 80057f4:	4618      	mov	r0, r3
 80057f6:	f7fe fe72 	bl	80044de <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d004      	beq.n	800580c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	3318      	adds	r3, #24
 8005806:	4618      	mov	r0, r3
 8005808:	f7fe fe69 	bl	80044de <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005810:	2201      	movs	r2, #1
 8005812:	409a      	lsls	r2, r3
 8005814:	4b23      	ldr	r3, [pc, #140]	; (80058a4 <xTaskIncrementTick+0x164>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4313      	orrs	r3, r2
 800581a:	4a22      	ldr	r2, [pc, #136]	; (80058a4 <xTaskIncrementTick+0x164>)
 800581c:	6013      	str	r3, [r2, #0]
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005822:	4613      	mov	r3, r2
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	4413      	add	r3, r2
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	4a1f      	ldr	r2, [pc, #124]	; (80058a8 <xTaskIncrementTick+0x168>)
 800582c:	441a      	add	r2, r3
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	3304      	adds	r3, #4
 8005832:	4619      	mov	r1, r3
 8005834:	4610      	mov	r0, r2
 8005836:	f7fe fdf5 	bl	8004424 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800583e:	4b1b      	ldr	r3, [pc, #108]	; (80058ac <xTaskIncrementTick+0x16c>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005844:	429a      	cmp	r2, r3
 8005846:	d3b4      	bcc.n	80057b2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005848:	2301      	movs	r3, #1
 800584a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800584c:	e7b1      	b.n	80057b2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800584e:	4b17      	ldr	r3, [pc, #92]	; (80058ac <xTaskIncrementTick+0x16c>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005854:	4914      	ldr	r1, [pc, #80]	; (80058a8 <xTaskIncrementTick+0x168>)
 8005856:	4613      	mov	r3, r2
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	4413      	add	r3, r2
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	440b      	add	r3, r1
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2b01      	cmp	r3, #1
 8005864:	d907      	bls.n	8005876 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8005866:	2301      	movs	r3, #1
 8005868:	617b      	str	r3, [r7, #20]
 800586a:	e004      	b.n	8005876 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800586c:	4b10      	ldr	r3, [pc, #64]	; (80058b0 <xTaskIncrementTick+0x170>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	3301      	adds	r3, #1
 8005872:	4a0f      	ldr	r2, [pc, #60]	; (80058b0 <xTaskIncrementTick+0x170>)
 8005874:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005876:	4b0f      	ldr	r3, [pc, #60]	; (80058b4 <xTaskIncrementTick+0x174>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d001      	beq.n	8005882 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800587e:	2301      	movs	r3, #1
 8005880:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005882:	697b      	ldr	r3, [r7, #20]
}
 8005884:	4618      	mov	r0, r3
 8005886:	3718      	adds	r7, #24
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}
 800588c:	200003a8 	.word	0x200003a8
 8005890:	20000384 	.word	0x20000384
 8005894:	20000338 	.word	0x20000338
 8005898:	2000033c 	.word	0x2000033c
 800589c:	20000398 	.word	0x20000398
 80058a0:	200003a0 	.word	0x200003a0
 80058a4:	20000388 	.word	0x20000388
 80058a8:	20000284 	.word	0x20000284
 80058ac:	20000280 	.word	0x20000280
 80058b0:	20000390 	.word	0x20000390
 80058b4:	20000394 	.word	0x20000394

080058b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80058b8:	b480      	push	{r7}
 80058ba:	b087      	sub	sp, #28
 80058bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80058be:	4b26      	ldr	r3, [pc, #152]	; (8005958 <vTaskSwitchContext+0xa0>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d003      	beq.n	80058ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80058c6:	4b25      	ldr	r3, [pc, #148]	; (800595c <vTaskSwitchContext+0xa4>)
 80058c8:	2201      	movs	r2, #1
 80058ca:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80058cc:	e03e      	b.n	800594c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80058ce:	4b23      	ldr	r3, [pc, #140]	; (800595c <vTaskSwitchContext+0xa4>)
 80058d0:	2200      	movs	r2, #0
 80058d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80058d4:	4b22      	ldr	r3, [pc, #136]	; (8005960 <vTaskSwitchContext+0xa8>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	fab3 f383 	clz	r3, r3
 80058e0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80058e2:	7afb      	ldrb	r3, [r7, #11]
 80058e4:	f1c3 031f 	rsb	r3, r3, #31
 80058e8:	617b      	str	r3, [r7, #20]
 80058ea:	491e      	ldr	r1, [pc, #120]	; (8005964 <vTaskSwitchContext+0xac>)
 80058ec:	697a      	ldr	r2, [r7, #20]
 80058ee:	4613      	mov	r3, r2
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	4413      	add	r3, r2
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	440b      	add	r3, r1
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d109      	bne.n	8005912 <vTaskSwitchContext+0x5a>
	__asm volatile
 80058fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005902:	f383 8811 	msr	BASEPRI, r3
 8005906:	f3bf 8f6f 	isb	sy
 800590a:	f3bf 8f4f 	dsb	sy
 800590e:	607b      	str	r3, [r7, #4]
 8005910:	e7fe      	b.n	8005910 <vTaskSwitchContext+0x58>
 8005912:	697a      	ldr	r2, [r7, #20]
 8005914:	4613      	mov	r3, r2
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	4413      	add	r3, r2
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	4a11      	ldr	r2, [pc, #68]	; (8005964 <vTaskSwitchContext+0xac>)
 800591e:	4413      	add	r3, r2
 8005920:	613b      	str	r3, [r7, #16]
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	685a      	ldr	r2, [r3, #4]
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	605a      	str	r2, [r3, #4]
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	685a      	ldr	r2, [r3, #4]
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	3308      	adds	r3, #8
 8005934:	429a      	cmp	r2, r3
 8005936:	d104      	bne.n	8005942 <vTaskSwitchContext+0x8a>
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	685a      	ldr	r2, [r3, #4]
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	605a      	str	r2, [r3, #4]
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	4a07      	ldr	r2, [pc, #28]	; (8005968 <vTaskSwitchContext+0xb0>)
 800594a:	6013      	str	r3, [r2, #0]
}
 800594c:	bf00      	nop
 800594e:	371c      	adds	r7, #28
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr
 8005958:	200003a8 	.word	0x200003a8
 800595c:	20000394 	.word	0x20000394
 8005960:	20000388 	.word	0x20000388
 8005964:	20000284 	.word	0x20000284
 8005968:	20000280 	.word	0x20000280

0800596c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d109      	bne.n	8005990 <vTaskPlaceOnEventList+0x24>
 800597c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005980:	f383 8811 	msr	BASEPRI, r3
 8005984:	f3bf 8f6f 	isb	sy
 8005988:	f3bf 8f4f 	dsb	sy
 800598c:	60fb      	str	r3, [r7, #12]
 800598e:	e7fe      	b.n	800598e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005990:	4b07      	ldr	r3, [pc, #28]	; (80059b0 <vTaskPlaceOnEventList+0x44>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	3318      	adds	r3, #24
 8005996:	4619      	mov	r1, r3
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f7fe fd67 	bl	800446c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800599e:	2101      	movs	r1, #1
 80059a0:	6838      	ldr	r0, [r7, #0]
 80059a2:	f000 fb9d 	bl	80060e0 <prvAddCurrentTaskToDelayedList>
}
 80059a6:	bf00      	nop
 80059a8:	3710      	adds	r7, #16
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	20000280 	.word	0x20000280

080059b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b086      	sub	sp, #24
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d109      	bne.n	80059de <xTaskRemoveFromEventList+0x2a>
 80059ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ce:	f383 8811 	msr	BASEPRI, r3
 80059d2:	f3bf 8f6f 	isb	sy
 80059d6:	f3bf 8f4f 	dsb	sy
 80059da:	60fb      	str	r3, [r7, #12]
 80059dc:	e7fe      	b.n	80059dc <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	3318      	adds	r3, #24
 80059e2:	4618      	mov	r0, r3
 80059e4:	f7fe fd7b 	bl	80044de <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059e8:	4b1d      	ldr	r3, [pc, #116]	; (8005a60 <xTaskRemoveFromEventList+0xac>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d11c      	bne.n	8005a2a <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	3304      	adds	r3, #4
 80059f4:	4618      	mov	r0, r3
 80059f6:	f7fe fd72 	bl	80044de <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059fe:	2201      	movs	r2, #1
 8005a00:	409a      	lsls	r2, r3
 8005a02:	4b18      	ldr	r3, [pc, #96]	; (8005a64 <xTaskRemoveFromEventList+0xb0>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	4a16      	ldr	r2, [pc, #88]	; (8005a64 <xTaskRemoveFromEventList+0xb0>)
 8005a0a:	6013      	str	r3, [r2, #0]
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a10:	4613      	mov	r3, r2
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	4413      	add	r3, r2
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	4a13      	ldr	r2, [pc, #76]	; (8005a68 <xTaskRemoveFromEventList+0xb4>)
 8005a1a:	441a      	add	r2, r3
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	3304      	adds	r3, #4
 8005a20:	4619      	mov	r1, r3
 8005a22:	4610      	mov	r0, r2
 8005a24:	f7fe fcfe 	bl	8004424 <vListInsertEnd>
 8005a28:	e005      	b.n	8005a36 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	3318      	adds	r3, #24
 8005a2e:	4619      	mov	r1, r3
 8005a30:	480e      	ldr	r0, [pc, #56]	; (8005a6c <xTaskRemoveFromEventList+0xb8>)
 8005a32:	f7fe fcf7 	bl	8004424 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a3a:	4b0d      	ldr	r3, [pc, #52]	; (8005a70 <xTaskRemoveFromEventList+0xbc>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d905      	bls.n	8005a50 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005a44:	2301      	movs	r3, #1
 8005a46:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005a48:	4b0a      	ldr	r3, [pc, #40]	; (8005a74 <xTaskRemoveFromEventList+0xc0>)
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	601a      	str	r2, [r3, #0]
 8005a4e:	e001      	b.n	8005a54 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8005a50:	2300      	movs	r3, #0
 8005a52:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005a54:	697b      	ldr	r3, [r7, #20]
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3718      	adds	r7, #24
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
 8005a5e:	bf00      	nop
 8005a60:	200003a8 	.word	0x200003a8
 8005a64:	20000388 	.word	0x20000388
 8005a68:	20000284 	.word	0x20000284
 8005a6c:	20000340 	.word	0x20000340
 8005a70:	20000280 	.word	0x20000280
 8005a74:	20000394 	.word	0x20000394

08005a78 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005a80:	4b06      	ldr	r3, [pc, #24]	; (8005a9c <vTaskInternalSetTimeOutState+0x24>)
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005a88:	4b05      	ldr	r3, [pc, #20]	; (8005aa0 <vTaskInternalSetTimeOutState+0x28>)
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	605a      	str	r2, [r3, #4]
}
 8005a90:	bf00      	nop
 8005a92:	370c      	adds	r7, #12
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr
 8005a9c:	20000398 	.word	0x20000398
 8005aa0:	20000384 	.word	0x20000384

08005aa4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b088      	sub	sp, #32
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d109      	bne.n	8005ac8 <xTaskCheckForTimeOut+0x24>
 8005ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab8:	f383 8811 	msr	BASEPRI, r3
 8005abc:	f3bf 8f6f 	isb	sy
 8005ac0:	f3bf 8f4f 	dsb	sy
 8005ac4:	613b      	str	r3, [r7, #16]
 8005ac6:	e7fe      	b.n	8005ac6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d109      	bne.n	8005ae2 <xTaskCheckForTimeOut+0x3e>
 8005ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad2:	f383 8811 	msr	BASEPRI, r3
 8005ad6:	f3bf 8f6f 	isb	sy
 8005ada:	f3bf 8f4f 	dsb	sy
 8005ade:	60fb      	str	r3, [r7, #12]
 8005ae0:	e7fe      	b.n	8005ae0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8005ae2:	f000 fc8b 	bl	80063fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005ae6:	4b1d      	ldr	r3, [pc, #116]	; (8005b5c <xTaskCheckForTimeOut+0xb8>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	69ba      	ldr	r2, [r7, #24]
 8005af2:	1ad3      	subs	r3, r2, r3
 8005af4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005afe:	d102      	bne.n	8005b06 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005b00:	2300      	movs	r3, #0
 8005b02:	61fb      	str	r3, [r7, #28]
 8005b04:	e023      	b.n	8005b4e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	4b15      	ldr	r3, [pc, #84]	; (8005b60 <xTaskCheckForTimeOut+0xbc>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d007      	beq.n	8005b22 <xTaskCheckForTimeOut+0x7e>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	69ba      	ldr	r2, [r7, #24]
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d302      	bcc.n	8005b22 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	61fb      	str	r3, [r7, #28]
 8005b20:	e015      	b.n	8005b4e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	697a      	ldr	r2, [r7, #20]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d20b      	bcs.n	8005b44 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	1ad2      	subs	r2, r2, r3
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f7ff ff9d 	bl	8005a78 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	61fb      	str	r3, [r7, #28]
 8005b42:	e004      	b.n	8005b4e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	2200      	movs	r2, #0
 8005b48:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005b4e:	f000 fc83 	bl	8006458 <vPortExitCritical>

	return xReturn;
 8005b52:	69fb      	ldr	r3, [r7, #28]
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3720      	adds	r7, #32
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}
 8005b5c:	20000384 	.word	0x20000384
 8005b60:	20000398 	.word	0x20000398

08005b64 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005b64:	b480      	push	{r7}
 8005b66:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005b68:	4b03      	ldr	r3, [pc, #12]	; (8005b78 <vTaskMissedYield+0x14>)
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	601a      	str	r2, [r3, #0]
}
 8005b6e:	bf00      	nop
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr
 8005b78:	20000394 	.word	0x20000394

08005b7c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b082      	sub	sp, #8
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005b84:	f000 f852 	bl	8005c2c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005b88:	4b06      	ldr	r3, [pc, #24]	; (8005ba4 <prvIdleTask+0x28>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d9f9      	bls.n	8005b84 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005b90:	4b05      	ldr	r3, [pc, #20]	; (8005ba8 <prvIdleTask+0x2c>)
 8005b92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b96:	601a      	str	r2, [r3, #0]
 8005b98:	f3bf 8f4f 	dsb	sy
 8005b9c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005ba0:	e7f0      	b.n	8005b84 <prvIdleTask+0x8>
 8005ba2:	bf00      	nop
 8005ba4:	20000284 	.word	0x20000284
 8005ba8:	e000ed04 	.word	0xe000ed04

08005bac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b082      	sub	sp, #8
 8005bb0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	607b      	str	r3, [r7, #4]
 8005bb6:	e00c      	b.n	8005bd2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005bb8:	687a      	ldr	r2, [r7, #4]
 8005bba:	4613      	mov	r3, r2
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	4413      	add	r3, r2
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	4a12      	ldr	r2, [pc, #72]	; (8005c0c <prvInitialiseTaskLists+0x60>)
 8005bc4:	4413      	add	r3, r2
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f7fe fbff 	bl	80043ca <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	3301      	adds	r3, #1
 8005bd0:	607b      	str	r3, [r7, #4]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2b06      	cmp	r3, #6
 8005bd6:	d9ef      	bls.n	8005bb8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005bd8:	480d      	ldr	r0, [pc, #52]	; (8005c10 <prvInitialiseTaskLists+0x64>)
 8005bda:	f7fe fbf6 	bl	80043ca <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005bde:	480d      	ldr	r0, [pc, #52]	; (8005c14 <prvInitialiseTaskLists+0x68>)
 8005be0:	f7fe fbf3 	bl	80043ca <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005be4:	480c      	ldr	r0, [pc, #48]	; (8005c18 <prvInitialiseTaskLists+0x6c>)
 8005be6:	f7fe fbf0 	bl	80043ca <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005bea:	480c      	ldr	r0, [pc, #48]	; (8005c1c <prvInitialiseTaskLists+0x70>)
 8005bec:	f7fe fbed 	bl	80043ca <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005bf0:	480b      	ldr	r0, [pc, #44]	; (8005c20 <prvInitialiseTaskLists+0x74>)
 8005bf2:	f7fe fbea 	bl	80043ca <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005bf6:	4b0b      	ldr	r3, [pc, #44]	; (8005c24 <prvInitialiseTaskLists+0x78>)
 8005bf8:	4a05      	ldr	r2, [pc, #20]	; (8005c10 <prvInitialiseTaskLists+0x64>)
 8005bfa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005bfc:	4b0a      	ldr	r3, [pc, #40]	; (8005c28 <prvInitialiseTaskLists+0x7c>)
 8005bfe:	4a05      	ldr	r2, [pc, #20]	; (8005c14 <prvInitialiseTaskLists+0x68>)
 8005c00:	601a      	str	r2, [r3, #0]
}
 8005c02:	bf00      	nop
 8005c04:	3708      	adds	r7, #8
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	bf00      	nop
 8005c0c:	20000284 	.word	0x20000284
 8005c10:	20000310 	.word	0x20000310
 8005c14:	20000324 	.word	0x20000324
 8005c18:	20000340 	.word	0x20000340
 8005c1c:	20000354 	.word	0x20000354
 8005c20:	2000036c 	.word	0x2000036c
 8005c24:	20000338 	.word	0x20000338
 8005c28:	2000033c 	.word	0x2000033c

08005c2c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b082      	sub	sp, #8
 8005c30:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c32:	e019      	b.n	8005c68 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005c34:	f000 fbe2 	bl	80063fc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005c38:	4b0f      	ldr	r3, [pc, #60]	; (8005c78 <prvCheckTasksWaitingTermination+0x4c>)
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	3304      	adds	r3, #4
 8005c44:	4618      	mov	r0, r3
 8005c46:	f7fe fc4a 	bl	80044de <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005c4a:	4b0c      	ldr	r3, [pc, #48]	; (8005c7c <prvCheckTasksWaitingTermination+0x50>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	3b01      	subs	r3, #1
 8005c50:	4a0a      	ldr	r2, [pc, #40]	; (8005c7c <prvCheckTasksWaitingTermination+0x50>)
 8005c52:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005c54:	4b0a      	ldr	r3, [pc, #40]	; (8005c80 <prvCheckTasksWaitingTermination+0x54>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	3b01      	subs	r3, #1
 8005c5a:	4a09      	ldr	r2, [pc, #36]	; (8005c80 <prvCheckTasksWaitingTermination+0x54>)
 8005c5c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005c5e:	f000 fbfb 	bl	8006458 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 f80e 	bl	8005c84 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c68:	4b05      	ldr	r3, [pc, #20]	; (8005c80 <prvCheckTasksWaitingTermination+0x54>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d1e1      	bne.n	8005c34 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005c70:	bf00      	nop
 8005c72:	3708      	adds	r7, #8
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}
 8005c78:	20000354 	.word	0x20000354
 8005c7c:	20000380 	.word	0x20000380
 8005c80:	20000368 	.word	0x20000368

08005c84 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d108      	bne.n	8005ca8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f000 fd8a 	bl	80067b4 <vPortFree>
				vPortFree( pxTCB );
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f000 fd87 	bl	80067b4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005ca6:	e017      	b.n	8005cd8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d103      	bne.n	8005cba <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 fd7e 	bl	80067b4 <vPortFree>
	}
 8005cb8:	e00e      	b.n	8005cd8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005cc0:	2b02      	cmp	r3, #2
 8005cc2:	d009      	beq.n	8005cd8 <prvDeleteTCB+0x54>
 8005cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc8:	f383 8811 	msr	BASEPRI, r3
 8005ccc:	f3bf 8f6f 	isb	sy
 8005cd0:	f3bf 8f4f 	dsb	sy
 8005cd4:	60fb      	str	r3, [r7, #12]
 8005cd6:	e7fe      	b.n	8005cd6 <prvDeleteTCB+0x52>
	}
 8005cd8:	bf00      	nop
 8005cda:	3710      	adds	r7, #16
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b083      	sub	sp, #12
 8005ce4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ce6:	4b0f      	ldr	r3, [pc, #60]	; (8005d24 <prvResetNextTaskUnblockTime+0x44>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d101      	bne.n	8005cf4 <prvResetNextTaskUnblockTime+0x14>
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e000      	b.n	8005cf6 <prvResetNextTaskUnblockTime+0x16>
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d004      	beq.n	8005d04 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005cfa:	4b0b      	ldr	r3, [pc, #44]	; (8005d28 <prvResetNextTaskUnblockTime+0x48>)
 8005cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8005d00:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005d02:	e008      	b.n	8005d16 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005d04:	4b07      	ldr	r3, [pc, #28]	; (8005d24 <prvResetNextTaskUnblockTime+0x44>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	4a05      	ldr	r2, [pc, #20]	; (8005d28 <prvResetNextTaskUnblockTime+0x48>)
 8005d14:	6013      	str	r3, [r2, #0]
}
 8005d16:	bf00      	nop
 8005d18:	370c      	adds	r7, #12
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
 8005d22:	bf00      	nop
 8005d24:	20000338 	.word	0x20000338
 8005d28:	200003a0 	.word	0x200003a0

08005d2c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005d32:	4b0b      	ldr	r3, [pc, #44]	; (8005d60 <xTaskGetSchedulerState+0x34>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d102      	bne.n	8005d40 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	607b      	str	r3, [r7, #4]
 8005d3e:	e008      	b.n	8005d52 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d40:	4b08      	ldr	r3, [pc, #32]	; (8005d64 <xTaskGetSchedulerState+0x38>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d102      	bne.n	8005d4e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005d48:	2302      	movs	r3, #2
 8005d4a:	607b      	str	r3, [r7, #4]
 8005d4c:	e001      	b.n	8005d52 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005d52:	687b      	ldr	r3, [r7, #4]
	}
 8005d54:	4618      	mov	r0, r3
 8005d56:	370c      	adds	r7, #12
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr
 8005d60:	2000038c 	.word	0x2000038c
 8005d64:	200003a8 	.word	0x200003a8

08005d68 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005d74:	2300      	movs	r3, #0
 8005d76:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d06e      	beq.n	8005e5c <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d82:	4b39      	ldr	r3, [pc, #228]	; (8005e68 <xTaskPriorityInherit+0x100>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d25e      	bcs.n	8005e4a <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	699b      	ldr	r3, [r3, #24]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	db06      	blt.n	8005da2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d94:	4b34      	ldr	r3, [pc, #208]	; (8005e68 <xTaskPriorityInherit+0x100>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d9a:	f1c3 0207 	rsb	r2, r3, #7
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	6959      	ldr	r1, [r3, #20]
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005daa:	4613      	mov	r3, r2
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	4413      	add	r3, r2
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	4a2e      	ldr	r2, [pc, #184]	; (8005e6c <xTaskPriorityInherit+0x104>)
 8005db4:	4413      	add	r3, r2
 8005db6:	4299      	cmp	r1, r3
 8005db8:	d101      	bne.n	8005dbe <xTaskPriorityInherit+0x56>
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e000      	b.n	8005dc0 <xTaskPriorityInherit+0x58>
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d03a      	beq.n	8005e3a <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	3304      	adds	r3, #4
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f7fe fb88 	bl	80044de <uxListRemove>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d115      	bne.n	8005e00 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dd8:	4924      	ldr	r1, [pc, #144]	; (8005e6c <xTaskPriorityInherit+0x104>)
 8005dda:	4613      	mov	r3, r2
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	4413      	add	r3, r2
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	440b      	add	r3, r1
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d10a      	bne.n	8005e00 <xTaskPriorityInherit+0x98>
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dee:	2201      	movs	r2, #1
 8005df0:	fa02 f303 	lsl.w	r3, r2, r3
 8005df4:	43da      	mvns	r2, r3
 8005df6:	4b1e      	ldr	r3, [pc, #120]	; (8005e70 <xTaskPriorityInherit+0x108>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4013      	ands	r3, r2
 8005dfc:	4a1c      	ldr	r2, [pc, #112]	; (8005e70 <xTaskPriorityInherit+0x108>)
 8005dfe:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005e00:	4b19      	ldr	r3, [pc, #100]	; (8005e68 <xTaskPriorityInherit+0x100>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e0e:	2201      	movs	r2, #1
 8005e10:	409a      	lsls	r2, r3
 8005e12:	4b17      	ldr	r3, [pc, #92]	; (8005e70 <xTaskPriorityInherit+0x108>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	4a15      	ldr	r2, [pc, #84]	; (8005e70 <xTaskPriorityInherit+0x108>)
 8005e1a:	6013      	str	r3, [r2, #0]
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e20:	4613      	mov	r3, r2
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	4413      	add	r3, r2
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	4a10      	ldr	r2, [pc, #64]	; (8005e6c <xTaskPriorityInherit+0x104>)
 8005e2a:	441a      	add	r2, r3
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	3304      	adds	r3, #4
 8005e30:	4619      	mov	r1, r3
 8005e32:	4610      	mov	r0, r2
 8005e34:	f7fe faf6 	bl	8004424 <vListInsertEnd>
 8005e38:	e004      	b.n	8005e44 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005e3a:	4b0b      	ldr	r3, [pc, #44]	; (8005e68 <xTaskPriorityInherit+0x100>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005e44:	2301      	movs	r3, #1
 8005e46:	60fb      	str	r3, [r7, #12]
 8005e48:	e008      	b.n	8005e5c <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e4e:	4b06      	ldr	r3, [pc, #24]	; (8005e68 <xTaskPriorityInherit+0x100>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d201      	bcs.n	8005e5c <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
	}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3710      	adds	r7, #16
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	bf00      	nop
 8005e68:	20000280 	.word	0x20000280
 8005e6c:	20000284 	.word	0x20000284
 8005e70:	20000388 	.word	0x20000388

08005e74 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b086      	sub	sp, #24
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005e80:	2300      	movs	r3, #0
 8005e82:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d06c      	beq.n	8005f64 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005e8a:	4b39      	ldr	r3, [pc, #228]	; (8005f70 <xTaskPriorityDisinherit+0xfc>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	693a      	ldr	r2, [r7, #16]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d009      	beq.n	8005ea8 <xTaskPriorityDisinherit+0x34>
 8005e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e98:	f383 8811 	msr	BASEPRI, r3
 8005e9c:	f3bf 8f6f 	isb	sy
 8005ea0:	f3bf 8f4f 	dsb	sy
 8005ea4:	60fb      	str	r3, [r7, #12]
 8005ea6:	e7fe      	b.n	8005ea6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d109      	bne.n	8005ec4 <xTaskPriorityDisinherit+0x50>
 8005eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb4:	f383 8811 	msr	BASEPRI, r3
 8005eb8:	f3bf 8f6f 	isb	sy
 8005ebc:	f3bf 8f4f 	dsb	sy
 8005ec0:	60bb      	str	r3, [r7, #8]
 8005ec2:	e7fe      	b.n	8005ec2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ec8:	1e5a      	subs	r2, r3, #1
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d044      	beq.n	8005f64 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d140      	bne.n	8005f64 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	3304      	adds	r3, #4
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f7fe faf9 	bl	80044de <uxListRemove>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d115      	bne.n	8005f1e <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ef6:	491f      	ldr	r1, [pc, #124]	; (8005f74 <xTaskPriorityDisinherit+0x100>)
 8005ef8:	4613      	mov	r3, r2
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	4413      	add	r3, r2
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	440b      	add	r3, r1
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d10a      	bne.n	8005f1e <xTaskPriorityDisinherit+0xaa>
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f12:	43da      	mvns	r2, r3
 8005f14:	4b18      	ldr	r3, [pc, #96]	; (8005f78 <xTaskPriorityDisinherit+0x104>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4013      	ands	r3, r2
 8005f1a:	4a17      	ldr	r2, [pc, #92]	; (8005f78 <xTaskPriorityDisinherit+0x104>)
 8005f1c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f2a:	f1c3 0207 	rsb	r2, r3, #7
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f36:	2201      	movs	r2, #1
 8005f38:	409a      	lsls	r2, r3
 8005f3a:	4b0f      	ldr	r3, [pc, #60]	; (8005f78 <xTaskPriorityDisinherit+0x104>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	4a0d      	ldr	r2, [pc, #52]	; (8005f78 <xTaskPriorityDisinherit+0x104>)
 8005f42:	6013      	str	r3, [r2, #0]
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f48:	4613      	mov	r3, r2
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	4413      	add	r3, r2
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	4a08      	ldr	r2, [pc, #32]	; (8005f74 <xTaskPriorityDisinherit+0x100>)
 8005f52:	441a      	add	r2, r3
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	3304      	adds	r3, #4
 8005f58:	4619      	mov	r1, r3
 8005f5a:	4610      	mov	r0, r2
 8005f5c:	f7fe fa62 	bl	8004424 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005f60:	2301      	movs	r3, #1
 8005f62:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005f64:	697b      	ldr	r3, [r7, #20]
	}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3718      	adds	r7, #24
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	20000280 	.word	0x20000280
 8005f74:	20000284 	.word	0x20000284
 8005f78:	20000388 	.word	0x20000388

08005f7c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b088      	sub	sp, #32
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	f000 8086 	beq.w	80060a2 <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d109      	bne.n	8005fb2 <vTaskPriorityDisinheritAfterTimeout+0x36>
 8005f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa2:	f383 8811 	msr	BASEPRI, r3
 8005fa6:	f3bf 8f6f 	isb	sy
 8005faa:	f3bf 8f4f 	dsb	sy
 8005fae:	60fb      	str	r3, [r7, #12]
 8005fb0:	e7fe      	b.n	8005fb0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fb6:	683a      	ldr	r2, [r7, #0]
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d902      	bls.n	8005fc2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	61fb      	str	r3, [r7, #28]
 8005fc0:	e002      	b.n	8005fc8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005fc2:	69bb      	ldr	r3, [r7, #24]
 8005fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fc6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fcc:	69fa      	ldr	r2, [r7, #28]
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d067      	beq.n	80060a2 <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fd6:	697a      	ldr	r2, [r7, #20]
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d162      	bne.n	80060a2 <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005fdc:	4b33      	ldr	r3, [pc, #204]	; (80060ac <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	69ba      	ldr	r2, [r7, #24]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d109      	bne.n	8005ffa <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8005fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fea:	f383 8811 	msr	BASEPRI, r3
 8005fee:	f3bf 8f6f 	isb	sy
 8005ff2:	f3bf 8f4f 	dsb	sy
 8005ff6:	60bb      	str	r3, [r7, #8]
 8005ff8:	e7fe      	b.n	8005ff8 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005ffa:	69bb      	ldr	r3, [r7, #24]
 8005ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ffe:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	69fa      	ldr	r2, [r7, #28]
 8006004:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006006:	69bb      	ldr	r3, [r7, #24]
 8006008:	699b      	ldr	r3, [r3, #24]
 800600a:	2b00      	cmp	r3, #0
 800600c:	db04      	blt.n	8006018 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	f1c3 0207 	rsb	r2, r3, #7
 8006014:	69bb      	ldr	r3, [r7, #24]
 8006016:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	6959      	ldr	r1, [r3, #20]
 800601c:	693a      	ldr	r2, [r7, #16]
 800601e:	4613      	mov	r3, r2
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	4413      	add	r3, r2
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	4a22      	ldr	r2, [pc, #136]	; (80060b0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8006028:	4413      	add	r3, r2
 800602a:	4299      	cmp	r1, r3
 800602c:	d101      	bne.n	8006032 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 800602e:	2301      	movs	r3, #1
 8006030:	e000      	b.n	8006034 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8006032:	2300      	movs	r3, #0
 8006034:	2b00      	cmp	r3, #0
 8006036:	d034      	beq.n	80060a2 <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	3304      	adds	r3, #4
 800603c:	4618      	mov	r0, r3
 800603e:	f7fe fa4e 	bl	80044de <uxListRemove>
 8006042:	4603      	mov	r3, r0
 8006044:	2b00      	cmp	r3, #0
 8006046:	d115      	bne.n	8006074 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006048:	69bb      	ldr	r3, [r7, #24]
 800604a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800604c:	4918      	ldr	r1, [pc, #96]	; (80060b0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800604e:	4613      	mov	r3, r2
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	4413      	add	r3, r2
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	440b      	add	r3, r1
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d10a      	bne.n	8006074 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006062:	2201      	movs	r2, #1
 8006064:	fa02 f303 	lsl.w	r3, r2, r3
 8006068:	43da      	mvns	r2, r3
 800606a:	4b12      	ldr	r3, [pc, #72]	; (80060b4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4013      	ands	r3, r2
 8006070:	4a10      	ldr	r2, [pc, #64]	; (80060b4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006072:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006078:	2201      	movs	r2, #1
 800607a:	409a      	lsls	r2, r3
 800607c:	4b0d      	ldr	r3, [pc, #52]	; (80060b4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4313      	orrs	r3, r2
 8006082:	4a0c      	ldr	r2, [pc, #48]	; (80060b4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006084:	6013      	str	r3, [r2, #0]
 8006086:	69bb      	ldr	r3, [r7, #24]
 8006088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800608a:	4613      	mov	r3, r2
 800608c:	009b      	lsls	r3, r3, #2
 800608e:	4413      	add	r3, r2
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	4a07      	ldr	r2, [pc, #28]	; (80060b0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8006094:	441a      	add	r2, r3
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	3304      	adds	r3, #4
 800609a:	4619      	mov	r1, r3
 800609c:	4610      	mov	r0, r2
 800609e:	f7fe f9c1 	bl	8004424 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80060a2:	bf00      	nop
 80060a4:	3720      	adds	r7, #32
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop
 80060ac:	20000280 	.word	0x20000280
 80060b0:	20000284 	.word	0x20000284
 80060b4:	20000388 	.word	0x20000388

080060b8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80060b8:	b480      	push	{r7}
 80060ba:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80060bc:	4b07      	ldr	r3, [pc, #28]	; (80060dc <pvTaskIncrementMutexHeldCount+0x24>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d004      	beq.n	80060ce <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80060c4:	4b05      	ldr	r3, [pc, #20]	; (80060dc <pvTaskIncrementMutexHeldCount+0x24>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80060ca:	3201      	adds	r2, #1
 80060cc:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80060ce:	4b03      	ldr	r3, [pc, #12]	; (80060dc <pvTaskIncrementMutexHeldCount+0x24>)
 80060d0:	681b      	ldr	r3, [r3, #0]
	}
 80060d2:	4618      	mov	r0, r3
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr
 80060dc:	20000280 	.word	0x20000280

080060e0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80060ea:	4b29      	ldr	r3, [pc, #164]	; (8006190 <prvAddCurrentTaskToDelayedList+0xb0>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060f0:	4b28      	ldr	r3, [pc, #160]	; (8006194 <prvAddCurrentTaskToDelayedList+0xb4>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	3304      	adds	r3, #4
 80060f6:	4618      	mov	r0, r3
 80060f8:	f7fe f9f1 	bl	80044de <uxListRemove>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d10b      	bne.n	800611a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006102:	4b24      	ldr	r3, [pc, #144]	; (8006194 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006108:	2201      	movs	r2, #1
 800610a:	fa02 f303 	lsl.w	r3, r2, r3
 800610e:	43da      	mvns	r2, r3
 8006110:	4b21      	ldr	r3, [pc, #132]	; (8006198 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4013      	ands	r3, r2
 8006116:	4a20      	ldr	r2, [pc, #128]	; (8006198 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006118:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006120:	d10a      	bne.n	8006138 <prvAddCurrentTaskToDelayedList+0x58>
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d007      	beq.n	8006138 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006128:	4b1a      	ldr	r3, [pc, #104]	; (8006194 <prvAddCurrentTaskToDelayedList+0xb4>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	3304      	adds	r3, #4
 800612e:	4619      	mov	r1, r3
 8006130:	481a      	ldr	r0, [pc, #104]	; (800619c <prvAddCurrentTaskToDelayedList+0xbc>)
 8006132:	f7fe f977 	bl	8004424 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006136:	e026      	b.n	8006186 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006138:	68fa      	ldr	r2, [r7, #12]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4413      	add	r3, r2
 800613e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006140:	4b14      	ldr	r3, [pc, #80]	; (8006194 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	68ba      	ldr	r2, [r7, #8]
 8006146:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006148:	68ba      	ldr	r2, [r7, #8]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	429a      	cmp	r2, r3
 800614e:	d209      	bcs.n	8006164 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006150:	4b13      	ldr	r3, [pc, #76]	; (80061a0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	4b0f      	ldr	r3, [pc, #60]	; (8006194 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	3304      	adds	r3, #4
 800615a:	4619      	mov	r1, r3
 800615c:	4610      	mov	r0, r2
 800615e:	f7fe f985 	bl	800446c <vListInsert>
}
 8006162:	e010      	b.n	8006186 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006164:	4b0f      	ldr	r3, [pc, #60]	; (80061a4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	4b0a      	ldr	r3, [pc, #40]	; (8006194 <prvAddCurrentTaskToDelayedList+0xb4>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	3304      	adds	r3, #4
 800616e:	4619      	mov	r1, r3
 8006170:	4610      	mov	r0, r2
 8006172:	f7fe f97b 	bl	800446c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006176:	4b0c      	ldr	r3, [pc, #48]	; (80061a8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68ba      	ldr	r2, [r7, #8]
 800617c:	429a      	cmp	r2, r3
 800617e:	d202      	bcs.n	8006186 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006180:	4a09      	ldr	r2, [pc, #36]	; (80061a8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	6013      	str	r3, [r2, #0]
}
 8006186:	bf00      	nop
 8006188:	3710      	adds	r7, #16
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
 800618e:	bf00      	nop
 8006190:	20000384 	.word	0x20000384
 8006194:	20000280 	.word	0x20000280
 8006198:	20000388 	.word	0x20000388
 800619c:	2000036c 	.word	0x2000036c
 80061a0:	2000033c 	.word	0x2000033c
 80061a4:	20000338 	.word	0x20000338
 80061a8:	200003a0 	.word	0x200003a0

080061ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80061ac:	b480      	push	{r7}
 80061ae:	b085      	sub	sp, #20
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	3b04      	subs	r3, #4
 80061bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80061c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	3b04      	subs	r3, #4
 80061ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	f023 0201 	bic.w	r2, r3, #1
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	3b04      	subs	r3, #4
 80061da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80061dc:	4a0c      	ldr	r2, [pc, #48]	; (8006210 <pxPortInitialiseStack+0x64>)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	3b14      	subs	r3, #20
 80061e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	3b04      	subs	r3, #4
 80061f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f06f 0202 	mvn.w	r2, #2
 80061fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	3b20      	subs	r3, #32
 8006200:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006202:	68fb      	ldr	r3, [r7, #12]
}
 8006204:	4618      	mov	r0, r3
 8006206:	3714      	adds	r7, #20
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr
 8006210:	08006215 	.word	0x08006215

08006214 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006214:	b480      	push	{r7}
 8006216:	b085      	sub	sp, #20
 8006218:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800621a:	2300      	movs	r3, #0
 800621c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800621e:	4b11      	ldr	r3, [pc, #68]	; (8006264 <prvTaskExitError+0x50>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006226:	d009      	beq.n	800623c <prvTaskExitError+0x28>
 8006228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800622c:	f383 8811 	msr	BASEPRI, r3
 8006230:	f3bf 8f6f 	isb	sy
 8006234:	f3bf 8f4f 	dsb	sy
 8006238:	60fb      	str	r3, [r7, #12]
 800623a:	e7fe      	b.n	800623a <prvTaskExitError+0x26>
 800623c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006240:	f383 8811 	msr	BASEPRI, r3
 8006244:	f3bf 8f6f 	isb	sy
 8006248:	f3bf 8f4f 	dsb	sy
 800624c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800624e:	bf00      	nop
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d0fc      	beq.n	8006250 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006256:	bf00      	nop
 8006258:	3714      	adds	r7, #20
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr
 8006262:	bf00      	nop
 8006264:	2000000c 	.word	0x2000000c
	...

08006270 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006270:	4b07      	ldr	r3, [pc, #28]	; (8006290 <pxCurrentTCBConst2>)
 8006272:	6819      	ldr	r1, [r3, #0]
 8006274:	6808      	ldr	r0, [r1, #0]
 8006276:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800627a:	f380 8809 	msr	PSP, r0
 800627e:	f3bf 8f6f 	isb	sy
 8006282:	f04f 0000 	mov.w	r0, #0
 8006286:	f380 8811 	msr	BASEPRI, r0
 800628a:	4770      	bx	lr
 800628c:	f3af 8000 	nop.w

08006290 <pxCurrentTCBConst2>:
 8006290:	20000280 	.word	0x20000280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006294:	bf00      	nop
 8006296:	bf00      	nop

08006298 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006298:	4808      	ldr	r0, [pc, #32]	; (80062bc <prvPortStartFirstTask+0x24>)
 800629a:	6800      	ldr	r0, [r0, #0]
 800629c:	6800      	ldr	r0, [r0, #0]
 800629e:	f380 8808 	msr	MSP, r0
 80062a2:	f04f 0000 	mov.w	r0, #0
 80062a6:	f380 8814 	msr	CONTROL, r0
 80062aa:	b662      	cpsie	i
 80062ac:	b661      	cpsie	f
 80062ae:	f3bf 8f4f 	dsb	sy
 80062b2:	f3bf 8f6f 	isb	sy
 80062b6:	df00      	svc	0
 80062b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80062ba:	bf00      	nop
 80062bc:	e000ed08 	.word	0xe000ed08

080062c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b086      	sub	sp, #24
 80062c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80062c6:	4b44      	ldr	r3, [pc, #272]	; (80063d8 <xPortStartScheduler+0x118>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a44      	ldr	r2, [pc, #272]	; (80063dc <xPortStartScheduler+0x11c>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d109      	bne.n	80062e4 <xPortStartScheduler+0x24>
 80062d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d4:	f383 8811 	msr	BASEPRI, r3
 80062d8:	f3bf 8f6f 	isb	sy
 80062dc:	f3bf 8f4f 	dsb	sy
 80062e0:	613b      	str	r3, [r7, #16]
 80062e2:	e7fe      	b.n	80062e2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80062e4:	4b3c      	ldr	r3, [pc, #240]	; (80063d8 <xPortStartScheduler+0x118>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a3d      	ldr	r2, [pc, #244]	; (80063e0 <xPortStartScheduler+0x120>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d109      	bne.n	8006302 <xPortStartScheduler+0x42>
 80062ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f2:	f383 8811 	msr	BASEPRI, r3
 80062f6:	f3bf 8f6f 	isb	sy
 80062fa:	f3bf 8f4f 	dsb	sy
 80062fe:	60fb      	str	r3, [r7, #12]
 8006300:	e7fe      	b.n	8006300 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006302:	4b38      	ldr	r3, [pc, #224]	; (80063e4 <xPortStartScheduler+0x124>)
 8006304:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	781b      	ldrb	r3, [r3, #0]
 800630a:	b2db      	uxtb	r3, r3
 800630c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	22ff      	movs	r2, #255	; 0xff
 8006312:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	b2db      	uxtb	r3, r3
 800631a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800631c:	78fb      	ldrb	r3, [r7, #3]
 800631e:	b2db      	uxtb	r3, r3
 8006320:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006324:	b2da      	uxtb	r2, r3
 8006326:	4b30      	ldr	r3, [pc, #192]	; (80063e8 <xPortStartScheduler+0x128>)
 8006328:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800632a:	4b30      	ldr	r3, [pc, #192]	; (80063ec <xPortStartScheduler+0x12c>)
 800632c:	2207      	movs	r2, #7
 800632e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006330:	e009      	b.n	8006346 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8006332:	4b2e      	ldr	r3, [pc, #184]	; (80063ec <xPortStartScheduler+0x12c>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	3b01      	subs	r3, #1
 8006338:	4a2c      	ldr	r2, [pc, #176]	; (80063ec <xPortStartScheduler+0x12c>)
 800633a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800633c:	78fb      	ldrb	r3, [r7, #3]
 800633e:	b2db      	uxtb	r3, r3
 8006340:	005b      	lsls	r3, r3, #1
 8006342:	b2db      	uxtb	r3, r3
 8006344:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006346:	78fb      	ldrb	r3, [r7, #3]
 8006348:	b2db      	uxtb	r3, r3
 800634a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800634e:	2b80      	cmp	r3, #128	; 0x80
 8006350:	d0ef      	beq.n	8006332 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006352:	4b26      	ldr	r3, [pc, #152]	; (80063ec <xPortStartScheduler+0x12c>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f1c3 0307 	rsb	r3, r3, #7
 800635a:	2b04      	cmp	r3, #4
 800635c:	d009      	beq.n	8006372 <xPortStartScheduler+0xb2>
 800635e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006362:	f383 8811 	msr	BASEPRI, r3
 8006366:	f3bf 8f6f 	isb	sy
 800636a:	f3bf 8f4f 	dsb	sy
 800636e:	60bb      	str	r3, [r7, #8]
 8006370:	e7fe      	b.n	8006370 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006372:	4b1e      	ldr	r3, [pc, #120]	; (80063ec <xPortStartScheduler+0x12c>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	021b      	lsls	r3, r3, #8
 8006378:	4a1c      	ldr	r2, [pc, #112]	; (80063ec <xPortStartScheduler+0x12c>)
 800637a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800637c:	4b1b      	ldr	r3, [pc, #108]	; (80063ec <xPortStartScheduler+0x12c>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006384:	4a19      	ldr	r2, [pc, #100]	; (80063ec <xPortStartScheduler+0x12c>)
 8006386:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	b2da      	uxtb	r2, r3
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006390:	4b17      	ldr	r3, [pc, #92]	; (80063f0 <xPortStartScheduler+0x130>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a16      	ldr	r2, [pc, #88]	; (80063f0 <xPortStartScheduler+0x130>)
 8006396:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800639a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800639c:	4b14      	ldr	r3, [pc, #80]	; (80063f0 <xPortStartScheduler+0x130>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a13      	ldr	r2, [pc, #76]	; (80063f0 <xPortStartScheduler+0x130>)
 80063a2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80063a6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80063a8:	f000 f8d6 	bl	8006558 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80063ac:	4b11      	ldr	r3, [pc, #68]	; (80063f4 <xPortStartScheduler+0x134>)
 80063ae:	2200      	movs	r2, #0
 80063b0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80063b2:	f000 f8f5 	bl	80065a0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80063b6:	4b10      	ldr	r3, [pc, #64]	; (80063f8 <xPortStartScheduler+0x138>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a0f      	ldr	r2, [pc, #60]	; (80063f8 <xPortStartScheduler+0x138>)
 80063bc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80063c0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80063c2:	f7ff ff69 	bl	8006298 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80063c6:	f7ff fa77 	bl	80058b8 <vTaskSwitchContext>
	prvTaskExitError();
 80063ca:	f7ff ff23 	bl	8006214 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80063ce:	2300      	movs	r3, #0
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3718      	adds	r7, #24
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}
 80063d8:	e000ed00 	.word	0xe000ed00
 80063dc:	410fc271 	.word	0x410fc271
 80063e0:	410fc270 	.word	0x410fc270
 80063e4:	e000e400 	.word	0xe000e400
 80063e8:	200003ac 	.word	0x200003ac
 80063ec:	200003b0 	.word	0x200003b0
 80063f0:	e000ed20 	.word	0xe000ed20
 80063f4:	2000000c 	.word	0x2000000c
 80063f8:	e000ef34 	.word	0xe000ef34

080063fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
 8006402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006406:	f383 8811 	msr	BASEPRI, r3
 800640a:	f3bf 8f6f 	isb	sy
 800640e:	f3bf 8f4f 	dsb	sy
 8006412:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006414:	4b0e      	ldr	r3, [pc, #56]	; (8006450 <vPortEnterCritical+0x54>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	3301      	adds	r3, #1
 800641a:	4a0d      	ldr	r2, [pc, #52]	; (8006450 <vPortEnterCritical+0x54>)
 800641c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800641e:	4b0c      	ldr	r3, [pc, #48]	; (8006450 <vPortEnterCritical+0x54>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	2b01      	cmp	r3, #1
 8006424:	d10e      	bne.n	8006444 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006426:	4b0b      	ldr	r3, [pc, #44]	; (8006454 <vPortEnterCritical+0x58>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	b2db      	uxtb	r3, r3
 800642c:	2b00      	cmp	r3, #0
 800642e:	d009      	beq.n	8006444 <vPortEnterCritical+0x48>
 8006430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006434:	f383 8811 	msr	BASEPRI, r3
 8006438:	f3bf 8f6f 	isb	sy
 800643c:	f3bf 8f4f 	dsb	sy
 8006440:	603b      	str	r3, [r7, #0]
 8006442:	e7fe      	b.n	8006442 <vPortEnterCritical+0x46>
	}
}
 8006444:	bf00      	nop
 8006446:	370c      	adds	r7, #12
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr
 8006450:	2000000c 	.word	0x2000000c
 8006454:	e000ed04 	.word	0xe000ed04

08006458 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006458:	b480      	push	{r7}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800645e:	4b11      	ldr	r3, [pc, #68]	; (80064a4 <vPortExitCritical+0x4c>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d109      	bne.n	800647a <vPortExitCritical+0x22>
 8006466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800646a:	f383 8811 	msr	BASEPRI, r3
 800646e:	f3bf 8f6f 	isb	sy
 8006472:	f3bf 8f4f 	dsb	sy
 8006476:	607b      	str	r3, [r7, #4]
 8006478:	e7fe      	b.n	8006478 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800647a:	4b0a      	ldr	r3, [pc, #40]	; (80064a4 <vPortExitCritical+0x4c>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	3b01      	subs	r3, #1
 8006480:	4a08      	ldr	r2, [pc, #32]	; (80064a4 <vPortExitCritical+0x4c>)
 8006482:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006484:	4b07      	ldr	r3, [pc, #28]	; (80064a4 <vPortExitCritical+0x4c>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d104      	bne.n	8006496 <vPortExitCritical+0x3e>
 800648c:	2300      	movs	r3, #0
 800648e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006496:	bf00      	nop
 8006498:	370c      	adds	r7, #12
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr
 80064a2:	bf00      	nop
 80064a4:	2000000c 	.word	0x2000000c
	...

080064b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80064b0:	f3ef 8009 	mrs	r0, PSP
 80064b4:	f3bf 8f6f 	isb	sy
 80064b8:	4b15      	ldr	r3, [pc, #84]	; (8006510 <pxCurrentTCBConst>)
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	f01e 0f10 	tst.w	lr, #16
 80064c0:	bf08      	it	eq
 80064c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80064c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064ca:	6010      	str	r0, [r2, #0]
 80064cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80064d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80064d4:	f380 8811 	msr	BASEPRI, r0
 80064d8:	f3bf 8f4f 	dsb	sy
 80064dc:	f3bf 8f6f 	isb	sy
 80064e0:	f7ff f9ea 	bl	80058b8 <vTaskSwitchContext>
 80064e4:	f04f 0000 	mov.w	r0, #0
 80064e8:	f380 8811 	msr	BASEPRI, r0
 80064ec:	bc09      	pop	{r0, r3}
 80064ee:	6819      	ldr	r1, [r3, #0]
 80064f0:	6808      	ldr	r0, [r1, #0]
 80064f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064f6:	f01e 0f10 	tst.w	lr, #16
 80064fa:	bf08      	it	eq
 80064fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006500:	f380 8809 	msr	PSP, r0
 8006504:	f3bf 8f6f 	isb	sy
 8006508:	4770      	bx	lr
 800650a:	bf00      	nop
 800650c:	f3af 8000 	nop.w

08006510 <pxCurrentTCBConst>:
 8006510:	20000280 	.word	0x20000280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006514:	bf00      	nop
 8006516:	bf00      	nop

08006518 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b082      	sub	sp, #8
 800651c:	af00      	add	r7, sp, #0
	__asm volatile
 800651e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006522:	f383 8811 	msr	BASEPRI, r3
 8006526:	f3bf 8f6f 	isb	sy
 800652a:	f3bf 8f4f 	dsb	sy
 800652e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006530:	f7ff f906 	bl	8005740 <xTaskIncrementTick>
 8006534:	4603      	mov	r3, r0
 8006536:	2b00      	cmp	r3, #0
 8006538:	d003      	beq.n	8006542 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800653a:	4b06      	ldr	r3, [pc, #24]	; (8006554 <SysTick_Handler+0x3c>)
 800653c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006540:	601a      	str	r2, [r3, #0]
 8006542:	2300      	movs	r3, #0
 8006544:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800654c:	bf00      	nop
 800654e:	3708      	adds	r7, #8
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}
 8006554:	e000ed04 	.word	0xe000ed04

08006558 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006558:	b480      	push	{r7}
 800655a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800655c:	4b0b      	ldr	r3, [pc, #44]	; (800658c <vPortSetupTimerInterrupt+0x34>)
 800655e:	2200      	movs	r2, #0
 8006560:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006562:	4b0b      	ldr	r3, [pc, #44]	; (8006590 <vPortSetupTimerInterrupt+0x38>)
 8006564:	2200      	movs	r2, #0
 8006566:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006568:	4b0a      	ldr	r3, [pc, #40]	; (8006594 <vPortSetupTimerInterrupt+0x3c>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a0a      	ldr	r2, [pc, #40]	; (8006598 <vPortSetupTimerInterrupt+0x40>)
 800656e:	fba2 2303 	umull	r2, r3, r2, r3
 8006572:	099b      	lsrs	r3, r3, #6
 8006574:	4a09      	ldr	r2, [pc, #36]	; (800659c <vPortSetupTimerInterrupt+0x44>)
 8006576:	3b01      	subs	r3, #1
 8006578:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800657a:	4b04      	ldr	r3, [pc, #16]	; (800658c <vPortSetupTimerInterrupt+0x34>)
 800657c:	2207      	movs	r2, #7
 800657e:	601a      	str	r2, [r3, #0]
}
 8006580:	bf00      	nop
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr
 800658a:	bf00      	nop
 800658c:	e000e010 	.word	0xe000e010
 8006590:	e000e018 	.word	0xe000e018
 8006594:	20000000 	.word	0x20000000
 8006598:	10624dd3 	.word	0x10624dd3
 800659c:	e000e014 	.word	0xe000e014

080065a0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80065a0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80065b0 <vPortEnableVFP+0x10>
 80065a4:	6801      	ldr	r1, [r0, #0]
 80065a6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80065aa:	6001      	str	r1, [r0, #0]
 80065ac:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80065ae:	bf00      	nop
 80065b0:	e000ed88 	.word	0xe000ed88

080065b4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80065b4:	b480      	push	{r7}
 80065b6:	b085      	sub	sp, #20
 80065b8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80065ba:	f3ef 8305 	mrs	r3, IPSR
 80065be:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2b0f      	cmp	r3, #15
 80065c4:	d913      	bls.n	80065ee <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80065c6:	4a16      	ldr	r2, [pc, #88]	; (8006620 <vPortValidateInterruptPriority+0x6c>)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	4413      	add	r3, r2
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80065d0:	4b14      	ldr	r3, [pc, #80]	; (8006624 <vPortValidateInterruptPriority+0x70>)
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	7afa      	ldrb	r2, [r7, #11]
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d209      	bcs.n	80065ee <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80065da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065de:	f383 8811 	msr	BASEPRI, r3
 80065e2:	f3bf 8f6f 	isb	sy
 80065e6:	f3bf 8f4f 	dsb	sy
 80065ea:	607b      	str	r3, [r7, #4]
 80065ec:	e7fe      	b.n	80065ec <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80065ee:	4b0e      	ldr	r3, [pc, #56]	; (8006628 <vPortValidateInterruptPriority+0x74>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80065f6:	4b0d      	ldr	r3, [pc, #52]	; (800662c <vPortValidateInterruptPriority+0x78>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d909      	bls.n	8006612 <vPortValidateInterruptPriority+0x5e>
 80065fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006602:	f383 8811 	msr	BASEPRI, r3
 8006606:	f3bf 8f6f 	isb	sy
 800660a:	f3bf 8f4f 	dsb	sy
 800660e:	603b      	str	r3, [r7, #0]
 8006610:	e7fe      	b.n	8006610 <vPortValidateInterruptPriority+0x5c>
	}
 8006612:	bf00      	nop
 8006614:	3714      	adds	r7, #20
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr
 800661e:	bf00      	nop
 8006620:	e000e3f0 	.word	0xe000e3f0
 8006624:	200003ac 	.word	0x200003ac
 8006628:	e000ed0c 	.word	0xe000ed0c
 800662c:	200003b0 	.word	0x200003b0

08006630 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b08a      	sub	sp, #40	; 0x28
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006638:	2300      	movs	r3, #0
 800663a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800663c:	f7fe ffd6 	bl	80055ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006640:	4b57      	ldr	r3, [pc, #348]	; (80067a0 <pvPortMalloc+0x170>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d101      	bne.n	800664c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006648:	f000 f90c 	bl	8006864 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800664c:	4b55      	ldr	r3, [pc, #340]	; (80067a4 <pvPortMalloc+0x174>)
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	4013      	ands	r3, r2
 8006654:	2b00      	cmp	r3, #0
 8006656:	f040 808c 	bne.w	8006772 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d01c      	beq.n	800669a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006660:	2208      	movs	r2, #8
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	4413      	add	r3, r2
 8006666:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f003 0307 	and.w	r3, r3, #7
 800666e:	2b00      	cmp	r3, #0
 8006670:	d013      	beq.n	800669a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f023 0307 	bic.w	r3, r3, #7
 8006678:	3308      	adds	r3, #8
 800667a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f003 0307 	and.w	r3, r3, #7
 8006682:	2b00      	cmp	r3, #0
 8006684:	d009      	beq.n	800669a <pvPortMalloc+0x6a>
 8006686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800668a:	f383 8811 	msr	BASEPRI, r3
 800668e:	f3bf 8f6f 	isb	sy
 8006692:	f3bf 8f4f 	dsb	sy
 8006696:	617b      	str	r3, [r7, #20]
 8006698:	e7fe      	b.n	8006698 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d068      	beq.n	8006772 <pvPortMalloc+0x142>
 80066a0:	4b41      	ldr	r3, [pc, #260]	; (80067a8 <pvPortMalloc+0x178>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d863      	bhi.n	8006772 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80066aa:	4b40      	ldr	r3, [pc, #256]	; (80067ac <pvPortMalloc+0x17c>)
 80066ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80066ae:	4b3f      	ldr	r3, [pc, #252]	; (80067ac <pvPortMalloc+0x17c>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80066b4:	e004      	b.n	80066c0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80066b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80066ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80066c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d903      	bls.n	80066d2 <pvPortMalloc+0xa2>
 80066ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d1f1      	bne.n	80066b6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80066d2:	4b33      	ldr	r3, [pc, #204]	; (80067a0 <pvPortMalloc+0x170>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066d8:	429a      	cmp	r2, r3
 80066da:	d04a      	beq.n	8006772 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80066dc:	6a3b      	ldr	r3, [r7, #32]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	2208      	movs	r2, #8
 80066e2:	4413      	add	r3, r2
 80066e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80066e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	6a3b      	ldr	r3, [r7, #32]
 80066ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80066ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f0:	685a      	ldr	r2, [r3, #4]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	1ad2      	subs	r2, r2, r3
 80066f6:	2308      	movs	r3, #8
 80066f8:	005b      	lsls	r3, r3, #1
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d91e      	bls.n	800673c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80066fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	4413      	add	r3, r2
 8006704:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006706:	69bb      	ldr	r3, [r7, #24]
 8006708:	f003 0307 	and.w	r3, r3, #7
 800670c:	2b00      	cmp	r3, #0
 800670e:	d009      	beq.n	8006724 <pvPortMalloc+0xf4>
 8006710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006714:	f383 8811 	msr	BASEPRI, r3
 8006718:	f3bf 8f6f 	isb	sy
 800671c:	f3bf 8f4f 	dsb	sy
 8006720:	613b      	str	r3, [r7, #16]
 8006722:	e7fe      	b.n	8006722 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006726:	685a      	ldr	r2, [r3, #4]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	1ad2      	subs	r2, r2, r3
 800672c:	69bb      	ldr	r3, [r7, #24]
 800672e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006736:	69b8      	ldr	r0, [r7, #24]
 8006738:	f000 f8f6 	bl	8006928 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800673c:	4b1a      	ldr	r3, [pc, #104]	; (80067a8 <pvPortMalloc+0x178>)
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	1ad3      	subs	r3, r2, r3
 8006746:	4a18      	ldr	r2, [pc, #96]	; (80067a8 <pvPortMalloc+0x178>)
 8006748:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800674a:	4b17      	ldr	r3, [pc, #92]	; (80067a8 <pvPortMalloc+0x178>)
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	4b18      	ldr	r3, [pc, #96]	; (80067b0 <pvPortMalloc+0x180>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	429a      	cmp	r2, r3
 8006754:	d203      	bcs.n	800675e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006756:	4b14      	ldr	r3, [pc, #80]	; (80067a8 <pvPortMalloc+0x178>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a15      	ldr	r2, [pc, #84]	; (80067b0 <pvPortMalloc+0x180>)
 800675c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800675e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006760:	685a      	ldr	r2, [r3, #4]
 8006762:	4b10      	ldr	r3, [pc, #64]	; (80067a4 <pvPortMalloc+0x174>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	431a      	orrs	r2, r3
 8006768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800676c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676e:	2200      	movs	r2, #0
 8006770:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006772:	f7fe ff49 	bl	8005608 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	f003 0307 	and.w	r3, r3, #7
 800677c:	2b00      	cmp	r3, #0
 800677e:	d009      	beq.n	8006794 <pvPortMalloc+0x164>
 8006780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006784:	f383 8811 	msr	BASEPRI, r3
 8006788:	f3bf 8f6f 	isb	sy
 800678c:	f3bf 8f4f 	dsb	sy
 8006790:	60fb      	str	r3, [r7, #12]
 8006792:	e7fe      	b.n	8006792 <pvPortMalloc+0x162>
	return pvReturn;
 8006794:	69fb      	ldr	r3, [r7, #28]
}
 8006796:	4618      	mov	r0, r3
 8006798:	3728      	adds	r7, #40	; 0x28
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}
 800679e:	bf00      	nop
 80067a0:	20003fbc 	.word	0x20003fbc
 80067a4:	20003fc8 	.word	0x20003fc8
 80067a8:	20003fc0 	.word	0x20003fc0
 80067ac:	20003fb4 	.word	0x20003fb4
 80067b0:	20003fc4 	.word	0x20003fc4

080067b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b086      	sub	sp, #24
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d046      	beq.n	8006854 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80067c6:	2308      	movs	r3, #8
 80067c8:	425b      	negs	r3, r3
 80067ca:	697a      	ldr	r2, [r7, #20]
 80067cc:	4413      	add	r3, r2
 80067ce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	685a      	ldr	r2, [r3, #4]
 80067d8:	4b20      	ldr	r3, [pc, #128]	; (800685c <vPortFree+0xa8>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4013      	ands	r3, r2
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d109      	bne.n	80067f6 <vPortFree+0x42>
 80067e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e6:	f383 8811 	msr	BASEPRI, r3
 80067ea:	f3bf 8f6f 	isb	sy
 80067ee:	f3bf 8f4f 	dsb	sy
 80067f2:	60fb      	str	r3, [r7, #12]
 80067f4:	e7fe      	b.n	80067f4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d009      	beq.n	8006812 <vPortFree+0x5e>
 80067fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006802:	f383 8811 	msr	BASEPRI, r3
 8006806:	f3bf 8f6f 	isb	sy
 800680a:	f3bf 8f4f 	dsb	sy
 800680e:	60bb      	str	r3, [r7, #8]
 8006810:	e7fe      	b.n	8006810 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	685a      	ldr	r2, [r3, #4]
 8006816:	4b11      	ldr	r3, [pc, #68]	; (800685c <vPortFree+0xa8>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4013      	ands	r3, r2
 800681c:	2b00      	cmp	r3, #0
 800681e:	d019      	beq.n	8006854 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d115      	bne.n	8006854 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	685a      	ldr	r2, [r3, #4]
 800682c:	4b0b      	ldr	r3, [pc, #44]	; (800685c <vPortFree+0xa8>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	43db      	mvns	r3, r3
 8006832:	401a      	ands	r2, r3
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006838:	f7fe fed8 	bl	80055ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	685a      	ldr	r2, [r3, #4]
 8006840:	4b07      	ldr	r3, [pc, #28]	; (8006860 <vPortFree+0xac>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4413      	add	r3, r2
 8006846:	4a06      	ldr	r2, [pc, #24]	; (8006860 <vPortFree+0xac>)
 8006848:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800684a:	6938      	ldr	r0, [r7, #16]
 800684c:	f000 f86c 	bl	8006928 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006850:	f7fe feda 	bl	8005608 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006854:	bf00      	nop
 8006856:	3718      	adds	r7, #24
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}
 800685c:	20003fc8 	.word	0x20003fc8
 8006860:	20003fc0 	.word	0x20003fc0

08006864 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006864:	b480      	push	{r7}
 8006866:	b085      	sub	sp, #20
 8006868:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800686a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800686e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006870:	4b27      	ldr	r3, [pc, #156]	; (8006910 <prvHeapInit+0xac>)
 8006872:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f003 0307 	and.w	r3, r3, #7
 800687a:	2b00      	cmp	r3, #0
 800687c:	d00c      	beq.n	8006898 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	3307      	adds	r3, #7
 8006882:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f023 0307 	bic.w	r3, r3, #7
 800688a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800688c:	68ba      	ldr	r2, [r7, #8]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	4a1f      	ldr	r2, [pc, #124]	; (8006910 <prvHeapInit+0xac>)
 8006894:	4413      	add	r3, r2
 8006896:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800689c:	4a1d      	ldr	r2, [pc, #116]	; (8006914 <prvHeapInit+0xb0>)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80068a2:	4b1c      	ldr	r3, [pc, #112]	; (8006914 <prvHeapInit+0xb0>)
 80068a4:	2200      	movs	r2, #0
 80068a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	68ba      	ldr	r2, [r7, #8]
 80068ac:	4413      	add	r3, r2
 80068ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80068b0:	2208      	movs	r2, #8
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	1a9b      	subs	r3, r3, r2
 80068b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f023 0307 	bic.w	r3, r3, #7
 80068be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	4a15      	ldr	r2, [pc, #84]	; (8006918 <prvHeapInit+0xb4>)
 80068c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80068c6:	4b14      	ldr	r3, [pc, #80]	; (8006918 <prvHeapInit+0xb4>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	2200      	movs	r2, #0
 80068cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80068ce:	4b12      	ldr	r3, [pc, #72]	; (8006918 <prvHeapInit+0xb4>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	2200      	movs	r2, #0
 80068d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	68fa      	ldr	r2, [r7, #12]
 80068de:	1ad2      	subs	r2, r2, r3
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80068e4:	4b0c      	ldr	r3, [pc, #48]	; (8006918 <prvHeapInit+0xb4>)
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	4a0a      	ldr	r2, [pc, #40]	; (800691c <prvHeapInit+0xb8>)
 80068f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	4a09      	ldr	r2, [pc, #36]	; (8006920 <prvHeapInit+0xbc>)
 80068fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80068fc:	4b09      	ldr	r3, [pc, #36]	; (8006924 <prvHeapInit+0xc0>)
 80068fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006902:	601a      	str	r2, [r3, #0]
}
 8006904:	bf00      	nop
 8006906:	3714      	adds	r7, #20
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr
 8006910:	200003b4 	.word	0x200003b4
 8006914:	20003fb4 	.word	0x20003fb4
 8006918:	20003fbc 	.word	0x20003fbc
 800691c:	20003fc4 	.word	0x20003fc4
 8006920:	20003fc0 	.word	0x20003fc0
 8006924:	20003fc8 	.word	0x20003fc8

08006928 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006928:	b480      	push	{r7}
 800692a:	b085      	sub	sp, #20
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006930:	4b28      	ldr	r3, [pc, #160]	; (80069d4 <prvInsertBlockIntoFreeList+0xac>)
 8006932:	60fb      	str	r3, [r7, #12]
 8006934:	e002      	b.n	800693c <prvInsertBlockIntoFreeList+0x14>
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	60fb      	str	r3, [r7, #12]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	429a      	cmp	r2, r3
 8006944:	d8f7      	bhi.n	8006936 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	68ba      	ldr	r2, [r7, #8]
 8006950:	4413      	add	r3, r2
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	429a      	cmp	r2, r3
 8006956:	d108      	bne.n	800696a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	685a      	ldr	r2, [r3, #4]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	441a      	add	r2, r3
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	68ba      	ldr	r2, [r7, #8]
 8006974:	441a      	add	r2, r3
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	429a      	cmp	r2, r3
 800697c:	d118      	bne.n	80069b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	4b15      	ldr	r3, [pc, #84]	; (80069d8 <prvInsertBlockIntoFreeList+0xb0>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	429a      	cmp	r2, r3
 8006988:	d00d      	beq.n	80069a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	685a      	ldr	r2, [r3, #4]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	441a      	add	r2, r3
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	601a      	str	r2, [r3, #0]
 80069a4:	e008      	b.n	80069b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80069a6:	4b0c      	ldr	r3, [pc, #48]	; (80069d8 <prvInsertBlockIntoFreeList+0xb0>)
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	601a      	str	r2, [r3, #0]
 80069ae:	e003      	b.n	80069b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80069b8:	68fa      	ldr	r2, [r7, #12]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	429a      	cmp	r2, r3
 80069be:	d002      	beq.n	80069c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80069c6:	bf00      	nop
 80069c8:	3714      	adds	r7, #20
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr
 80069d2:	bf00      	nop
 80069d4:	20003fb4 	.word	0x20003fb4
 80069d8:	20003fbc 	.word	0x20003fbc

080069dc <__libc_init_array>:
 80069dc:	b570      	push	{r4, r5, r6, lr}
 80069de:	4e0d      	ldr	r6, [pc, #52]	; (8006a14 <__libc_init_array+0x38>)
 80069e0:	4c0d      	ldr	r4, [pc, #52]	; (8006a18 <__libc_init_array+0x3c>)
 80069e2:	1ba4      	subs	r4, r4, r6
 80069e4:	10a4      	asrs	r4, r4, #2
 80069e6:	2500      	movs	r5, #0
 80069e8:	42a5      	cmp	r5, r4
 80069ea:	d109      	bne.n	8006a00 <__libc_init_array+0x24>
 80069ec:	4e0b      	ldr	r6, [pc, #44]	; (8006a1c <__libc_init_array+0x40>)
 80069ee:	4c0c      	ldr	r4, [pc, #48]	; (8006a20 <__libc_init_array+0x44>)
 80069f0:	f000 f82c 	bl	8006a4c <_init>
 80069f4:	1ba4      	subs	r4, r4, r6
 80069f6:	10a4      	asrs	r4, r4, #2
 80069f8:	2500      	movs	r5, #0
 80069fa:	42a5      	cmp	r5, r4
 80069fc:	d105      	bne.n	8006a0a <__libc_init_array+0x2e>
 80069fe:	bd70      	pop	{r4, r5, r6, pc}
 8006a00:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006a04:	4798      	blx	r3
 8006a06:	3501      	adds	r5, #1
 8006a08:	e7ee      	b.n	80069e8 <__libc_init_array+0xc>
 8006a0a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006a0e:	4798      	blx	r3
 8006a10:	3501      	adds	r5, #1
 8006a12:	e7f2      	b.n	80069fa <__libc_init_array+0x1e>
 8006a14:	08006b58 	.word	0x08006b58
 8006a18:	08006b58 	.word	0x08006b58
 8006a1c:	08006b58 	.word	0x08006b58
 8006a20:	08006b5c 	.word	0x08006b5c

08006a24 <memcpy>:
 8006a24:	b510      	push	{r4, lr}
 8006a26:	1e43      	subs	r3, r0, #1
 8006a28:	440a      	add	r2, r1
 8006a2a:	4291      	cmp	r1, r2
 8006a2c:	d100      	bne.n	8006a30 <memcpy+0xc>
 8006a2e:	bd10      	pop	{r4, pc}
 8006a30:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a38:	e7f7      	b.n	8006a2a <memcpy+0x6>

08006a3a <memset>:
 8006a3a:	4402      	add	r2, r0
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d100      	bne.n	8006a44 <memset+0xa>
 8006a42:	4770      	bx	lr
 8006a44:	f803 1b01 	strb.w	r1, [r3], #1
 8006a48:	e7f9      	b.n	8006a3e <memset+0x4>
	...

08006a4c <_init>:
 8006a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a4e:	bf00      	nop
 8006a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a52:	bc08      	pop	{r3}
 8006a54:	469e      	mov	lr, r3
 8006a56:	4770      	bx	lr

08006a58 <_fini>:
 8006a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a5a:	bf00      	nop
 8006a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a5e:	bc08      	pop	{r3}
 8006a60:	469e      	mov	lr, r3
 8006a62:	4770      	bx	lr
